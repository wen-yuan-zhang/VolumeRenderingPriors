/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "_marching_cubes_lewiner_cy",
        "sources": [
            "_marching_cubes_lewiner_cy.pyx"
        ]
    },
    "module_name": "_marching_cubes_lewiner_cy"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___marching_cubes_lewiner_cy
#define __PYX_HAVE_API___marching_cubes_lewiner_cy
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include "pythread.h"
#include <stdlib.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "_marching_cubes_lewiner_cy.pyx",
  "stringsource",
  "__init__.pxd",
  "array.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell;
struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut;
struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_ctuple_int__and_int;
typedef struct __pyx_ctuple_int__and_int __pyx_ctuple_int__and_int;
struct __pyx_ctuple_int__and_int__and_int;
typedef struct __pyx_ctuple_int__and_int__and_int __pyx_ctuple_int__and_int__and_int;

/* "_marching_cubes_lewiner_cy.pyx":589
 *     ## Used internally
 * 
 *     cdef (int, int) _add_face_from_edge_index(self, int vi):             # <<<<<<<<<<<<<<
 *         """ Add one face from an edge index. Only adds a face if the
 *         vertex already exists. Otherwise also adds a vertex and applies
 */
struct __pyx_ctuple_int__and_int {
  int f0;
  int f1;
};

/* "_marching_cubes_lewiner_cy.pyx":1164
 * 
 *     # cdef list queue = []
 *     cdef deque[(int,int,int)] queue             # <<<<<<<<<<<<<<
 *     cdef deque[(int,int,int)] unsure_cases_queue
 *     cdef deque[(int,int,int)] non_trivial_mc_cases_queue
 */
struct __pyx_ctuple_int__and_int__and_int {
  int f0;
  int f1;
  int f2;
};

/* "_marching_cubes_lewiner_cy.pyx":86
 * 
 * 
 * cdef class Cell:             # <<<<<<<<<<<<<<
 *     """ Class to keep track of some stuff during the whole cube marching
 *     procedure.
 */
struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell {
  PyObject_HEAD
  struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *__pyx_vtab;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *luts;
  int x;
  int y;
  int z;
  int step;
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double *vv;
  double *vg;
  double vmax;
  double v12_x;
  double v12_y;
  double v12_z;
  double v12_xg;
  double v12_yg;
  double v12_zg;
  int v12_calculated;
  int index;
  int nx;
  int ny;
  int nz;
  int *faceLayer;
  float *_vertices;
  float *_normals;
  float *_values;
  int _vertexCount;
  int _vertexMaxCount;
  int *_faces;
  int _faceCount;
  int _faceMaxCount;
};


/* "_marching_cubes_lewiner_cy.pyx":854
 * 
 * 
 * cdef class Lut:             # <<<<<<<<<<<<<<
 *     """ Representation of a lookup table.
 *     The tables are initially defined as numpy arrays. On initialization,
 */
struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut {
  PyObject_HEAD
  struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *__pyx_vtab;
  signed char *VALUES;
  int L0;
  int L1;
  int L2;
};


/* "_marching_cubes_lewiner_cy.pyx":906
 * 
 * 
 * cdef class LutProvider:             # <<<<<<<<<<<<<<
 *     """ Class that provides a common interface to the many lookup tables
 *     used by the algorithm.
 */
struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider {
  PyObject_HEAD
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *EDGESRELX;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *EDGESRELY;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *EDGESRELZ;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *CASESCLASSIC;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *CASES;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING3_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING3_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING4_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING4_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING5;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING6_1_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING6_1_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING6_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING7_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING7_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING7_3;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING7_4_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING7_4_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING8;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING9;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING10_1_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING10_1_1_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING10_1_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING10_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING10_2_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING11;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING12_1_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING12_1_1_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING12_1_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING12_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING12_2_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_1_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_2_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_3;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_3_;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_4;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_5_1;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING13_5_2;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TILING14;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST3;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST4;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST6;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST7;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST10;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST12;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *TEST13;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *SUBCONFIG13;
};


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "_marching_cubes_lewiner_cy.pyx":86
 * 
 * 
 * cdef class Cell:             # <<<<<<<<<<<<<<
 *     """ Class to keep track of some stuff during the whole cube marching
 *     procedure.
 */

struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell {
  void (*_increase_size_vertices)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *);
  void (*_increase_size_faces)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *);
  int (*add_vertex)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, float, float, float);
  void (*add_gradient)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, float, float, float);
  void (*add_gradient_from_index)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, int, float);
  PyObject *(*add_face)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int);
  void (*set_cube)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, double, int, int, int, int, double, double, double, double, double, double, double, double);
  int (*check_triangles)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int);
  int (*check_triangles2)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int);
  int (*add_triangles)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int);
  int (*add_triangles2)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int);
  __pyx_ctuple_int__and_int (*_add_face_from_edge_index)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int);
  int (*get_index_in_facelayer)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int);
  void (*prepare_for_adding_triangles)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *);
  void (*calculate_center_vertex)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *);
};
static struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *__pyx_vtabptr_26_marching_cubes_lewiner_cy_Cell;


/* "_marching_cubes_lewiner_cy.pyx":854
 * 
 * 
 * cdef class Lut:             # <<<<<<<<<<<<<<
 *     """ Representation of a lookup table.
 *     The tables are initially defined as numpy arrays. On initialization,
 */

struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut {
  int (*get1)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int);
  int (*get2)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int);
  int (*get3)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int);
};
static struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *__pyx_vtabptr_26_marching_cubes_lewiner_cy_Lut;


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

#define __Pyx_BufPtrStrided3d(type, buf, i0, s0, i1, s1, i2, s2) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2)
/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
#if PY_MAJOR_VERSION >= 3
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
#endif
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    __Pyx_SET_SIZE(op, size);
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        __Pyx_SET_SIZE(self, n);
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = newsize;
    return 0;
}
#endif

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_int(PyObject *, int writable_flag);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE signed char __Pyx_PyInt_As_signed__char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_bool(npy_bool value);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_vertices(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_faces(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_vertex(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vertexIndex, float __pyx_v_gx, float __pyx_v_gy, float __pyx_v_gz); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient_from_index(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vertexIndex, int __pyx_v_i, float __pyx_v_strength); /* proto*/
static PyObject *__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_face(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_index); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_set_cube(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, double __pyx_v_isovalue, int __pyx_v_x, int __pyx_v_y, int __pyx_v_z, int __pyx_v_step, double __pyx_v_v0, double __pyx_v_v1, double __pyx_v_v2, double __pyx_v_v3, double __pyx_v_v4, double __pyx_v_v5, double __pyx_v_v6, double __pyx_v_v7); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_nt); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_lutIndex2, int __pyx_v_nt); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_nt); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_lutIndex2, int __pyx_v_nt); /* proto*/
static __pyx_ctuple_int__and_int __pyx_f_26_marching_cubes_lewiner_cy_4Cell__add_face_from_edge_index(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vi); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_get_index_in_facelayer(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vi); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_prepare_for_adding_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto*/
static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_calculate_center_vertex(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get1(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0, int __pyx_v_i1); /* proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get3(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0, int __pyx_v_i1, int __pyx_v_i2); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'libc.stdlib' */

/* Module declarations from '_marching_cubes_lewiner_cy' */
static PyTypeObject *__pyx_ptype_26_marching_cubes_lewiner_cy_Cell = 0;
static PyTypeObject *__pyx_ptype_26_marching_cubes_lewiner_cy_Lut = 0;
static PyTypeObject *__pyx_ptype_26_marching_cubes_lewiner_cy_LutProvider = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static CYTHON_INLINE double __pyx_f_26_marching_cubes_lewiner_cy_dabs(double); /*proto*/
static CYTHON_INLINE int __pyx_f_26_marching_cubes_lewiner_cy_imin(int, int); /*proto*/
static float __pyx_f_26_marching_cubes_lewiner_cy_compute_edge_vote(__Pyx_memviewslice, __Pyx_memviewslice, float, float, float); /*proto*/
static float __pyx_f_26_marching_cubes_lewiner_cy_my_sign(float); /*proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__Pyx_memviewslice); /*proto*/
static float __pyx_f_26_marching_cubes_lewiner_cy_avg_cube(float, float, float, float, float, float, float, float); /*proto*/
static float __pyx_f_26_marching_cubes_lewiner_cy_max_cube(float, float, float, float, float, float, float, float); /*proto*/
static float __pyx_f_26_marching_cubes_lewiner_cy_dot3(__Pyx_memviewslice, __Pyx_memviewslice); /*proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_the_big_switch(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, int); /*proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_check_the_big_switch(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, int); /*proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_test_face(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int); /*proto*/
static int __pyx_f_26_marching_cubes_lewiner_cy_test_internal(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *, int, int, int, int); /*proto*/
static PyObject *__pyx_f_26_marching_cubes_lewiner_cy___pyx_unpickle_LutProvider__set_state(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *, PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn_npy_bool = { "npy_bool", NULL, sizeof(npy_bool), { 0 }, 0, IS_UNSIGNED(npy_bool) ? 'U' : 'I', IS_UNSIGNED(npy_bool), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
#define __Pyx_MODULE_NAME "_marching_cubes_lewiner_cy"
extern int __pyx_module_is_main__marching_cubes_lewiner_cy;
int __pyx_module_is_main__marching_cubes_lewiner_cy = 0;

/* Implementation of '_marching_cubes_lewiner_cy' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_Nx[] = "Nx";
static const char __pyx_k_Ny[] = "Ny";
static const char __pyx_k_Nz[] = "Nz";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_i2[] = "i2";
static const char __pyx_k_i3[] = "i3";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_im[] = "im";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nt[] = "nt";
static const char __pyx_k_nx[] = "nx";
static const char __pyx_k_ny[] = "ny";
static const char __pyx_k_nz[] = "nz";
static const char __pyx_k_st[] = "st";
static const char __pyx_k_v0[] = "v0";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_v3[] = "v3";
static const char __pyx_k_v4[] = "v4";
static const char __pyx_k_v5[] = "v5";
static const char __pyx_k_v6[] = "v6";
static const char __pyx_k_v7[] = "v7";
static const char __pyx_k_xi[] = "xi";
static const char __pyx_k_yi[] = "yi";
static const char __pyx_k_zi[] = "zi";
static const char __pyx_k_Lut[] = "Lut";
static const char __pyx_k_arr[] = "arr";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_x_i[] = "x_i";
static const char __pyx_k_y_i[] = "y_i";
static const char __pyx_k_z_i[] = "z_i";
static const char __pyx_k_Cell[] = "Cell";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_case[] = "case";
static const char __pyx_k_cell[] = "cell";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_luts[] = "luts";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_x_st[] = "x_st";
static const char __pyx_k_y_st[] = "y_st";
static const char __pyx_k_z_st[] = "z_st";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_CASES[] = "CASES";
static const char __pyx_k_TEST3[] = "TEST3";
static const char __pyx_k_TEST4[] = "TEST4";
static const char __pyx_k_TEST6[] = "TEST6";
static const char __pyx_k_TEST7[] = "TEST7";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_dir_x[] = "dir_x";
static const char __pyx_k_dir_y[] = "dir_y";
static const char __pyx_k_dir_z[] = "dir_z";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_faces[] = "faces";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_grads[] = "grads";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_queue[] = "queue";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_TEST10[] = "TEST10";
static const char __pyx_k_TEST12[] = "TEST12";
static const char __pyx_k_TEST13[] = "TEST13";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_arrays[] = "arrays";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_cumsum[] = "cumsum";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_faces2[] = "faces2";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_TILING1[] = "TILING1";
static const char __pyx_k_TILING2[] = "TILING2";
static const char __pyx_k_TILING5[] = "TILING5";
static const char __pyx_k_TILING8[] = "TILING8";
static const char __pyx_k_TILING9[] = "TILING9";
static const char __pyx_k_arrays2[] = "arrays2";
static const char __pyx_k_classic[] = "classic";
static const char __pyx_k_cur_x_i[] = "cur_x_i";
static const char __pyx_k_cur_y_i[] = "cur_y_i";
static const char __pyx_k_cur_z_i[] = "cur_z_i";
static const char __pyx_k_faces_2[] = "faces_";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_no_mask[] = "no_mask";
static const char __pyx_k_sign_vs[] = "sign_vs";
static const char __pyx_k_spacing[] = "spacing";
static const char __pyx_k_v_index[] = "v_index";
static const char __pyx_k_visited[] = "visited";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Nx_bound[] = "Nx_bound";
static const char __pyx_k_Ny_bound[] = "Ny_bound";
static const char __pyx_k_Nz_bound[] = "Nz_bound";
static const char __pyx_k_TILING11[] = "TILING11";
static const char __pyx_k_TILING14[] = "TILING14";
static const char __pyx_k_base_vec[] = "base_vec";
static const char __pyx_k_faces_ok[] = "faces_ok";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_EDGESRELX[] = "EDGESRELX";
static const char __pyx_k_EDGESRELY[] = "EDGESRELY";
static const char __pyx_k_EDGESRELZ[] = "EDGESRELZ";
static const char __pyx_k_TILING3_1[] = "TILING3_1";
static const char __pyx_k_TILING3_2[] = "TILING3_2";
static const char __pyx_k_TILING4_1[] = "TILING4_1";
static const char __pyx_k_TILING4_2[] = "TILING4_2";
static const char __pyx_k_TILING6_2[] = "TILING6_2";
static const char __pyx_k_TILING7_1[] = "TILING7_1";
static const char __pyx_k_TILING7_2[] = "TILING7_2";
static const char __pyx_k_TILING7_3[] = "TILING7_3";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_all_0_vec[] = "all 0 vec...";
static const char __pyx_k_cube_sign[] = "cube_sign";
static const char __pyx_k_dir_index[] = "dir_index";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_get_faces[] = "get_faces";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_signed_im[] = "signed_im";
static const char __pyx_k_subconfig[] = "subconfig";
static const char __pyx_k_vertices2[] = "vertices2";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_TILING10_2[] = "TILING10_2";
static const char __pyx_k_TILING12_2[] = "TILING12_2";
static const char __pyx_k_TILING13_1[] = "TILING13_1";
static const char __pyx_k_TILING13_2[] = "TILING13_2";
static const char __pyx_k_TILING13_3[] = "TILING13_3";
static const char __pyx_k_TILING13_4[] = "TILING13_4";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_faces_ok_2[] = "faces_ok_";
static const char __pyx_k_get_values[] = "get_values";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_vertices_2[] = "vertices_";
static const char __pyx_k_visited_vs[] = "visited_vs";
static const char __pyx_k_voxel_size[] = "voxel_size";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LutProvider[] = "LutProvider";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_SUBCONFIG13[] = "SUBCONFIG13";
static const char __pyx_k_TILING6_1_1[] = "TILING6_1_1";
static const char __pyx_k_TILING6_1_2[] = "TILING6_1_2";
static const char __pyx_k_TILING7_4_1[] = "TILING7_4_1";
static const char __pyx_k_TILING7_4_2[] = "TILING7_4_2";
static const char __pyx_k_anchor_sign[] = "anchor_sign";
static const char __pyx_k_change_cube[] = "change_cube";
static const char __pyx_k_get_normals[] = "get_normals";
static const char __pyx_k_total_cubes[] = "total_cubes";
static const char __pyx_k_vertices_ok[] = "vertices_ok";
static const char __pyx_k_CASESCLASSIC[] = "CASESCLASSIC";
static const char __pyx_k_TILING10_1_1[] = "TILING10_1_1";
static const char __pyx_k_TILING10_1_2[] = "TILING10_1_2";
static const char __pyx_k_TILING10_2_2[] = "TILING10_2_";
static const char __pyx_k_TILING12_1_1[] = "TILING12_1_1";
static const char __pyx_k_TILING12_1_2[] = "TILING12_1_2";
static const char __pyx_k_TILING12_2_2[] = "TILING12_2_";
static const char __pyx_k_TILING13_1_2[] = "TILING13_1_";
static const char __pyx_k_TILING13_2_2[] = "TILING13_2_";
static const char __pyx_k_TILING13_3_2[] = "TILING13_3_";
static const char __pyx_k_TILING13_5_1[] = "TILING13_5_1";
static const char __pyx_k_TILING13_5_2[] = "TILING13_5_2";
static const char __pyx_k_directions_x[] = "directions_x";
static const char __pyx_k_directions_y[] = "directions_y";
static const char __pyx_k_directions_z[] = "directions_z";
static const char __pyx_k_get_vertices[] = "get_vertices";
static const char __pyx_k_max_distance[] = "max_distance";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_current_tuple[] = "current_tuple";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_vertices_map0[] = "vertices_map0";
static const char __pyx_k_vertices_map1[] = "vertices_map1";
static const char __pyx_k_vertices_map2[] = "vertices_map2";
static const char __pyx_k_Invalid_edge_i[] = "Invalid edge %i.";
static const char __pyx_k_TILING10_1_1_2[] = "TILING10_1_1_";
static const char __pyx_k_TILING12_1_1_2[] = "TILING12_1_1_";
static const char __pyx_k_signed_im_mask[] = "signed_im_mask";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_vertices_map1_2[] = "vertices_map1_";
static const char __pyx_k_max_distance_temp[] = "max_distance_temp";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_marching_cubes_udf[] = "marching_cubes_udf";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_unsure_cases_queue[] = "unsure_cases_queue";
static const char __pyx_k_avg_cube_val_thresh[] = "avg_cube_val_thresh";
static const char __pyx_k_max_cube_val_thresh[] = "max_cube_val_thresh";
static const char __pyx_k_unsure_cases_thresh[] = "unsure_cases_thresh";
static const char __pyx_k_connected_components[] = "connected_components";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_vertex_index_array_x[] = "vertex_index_array_x";
static const char __pyx_k_vertex_index_array_y[] = "vertex_index_array_y";
static const char __pyx_k_vertex_index_array_z[] = "vertex_index_array_z";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_remove_degenerate_faces[] = "remove_degenerate_faces";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Invalid_ambiguous_case_i[] = "Invalid ambiguous case %i.";
static const char __pyx_k_pyx_unpickle_LutProvider[] = "__pyx_unpickle_LutProvider";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_marching_cubes_lewiner_cy[] = "_marching_cubes_lewiner_cy";
static const char __pyx_k_non_trivial_mc_cases_queue[] = "non_trivial_mc_cases_queue";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_marching_cubes_lewiner_cy_pyx[] = "_marching_cubes_lewiner_cy.pyx";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_unsure_cases_visit_neighbours[] = "unsure_cases_visit_neighbours";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_This_is_an_implementation_of_th[] = "\nThis is an implementation of the marching cubes algorithm proposed in:\n\nEfficient implementation of Marching Cubes' cases with topological guarantees.\nThomas Lewiner, Helio Lopes, Antonio Wilson Vieira and Geovan Tavares.\nJournal of Graphics Tools 8(2): pp. 1-15 (december 2003)\n\nThis algorithm has the advantage that it provides topologically correct\nresults, and the algorithms implementation is relatively simple. Most\nof the magic is in the lookup tables, which are provided as open source.\n\nOriginally implemented in C++ by Thomas Lewiner in 2002, ported to Cython\nby Almar Klein in 2012. Adapted for scikit-image in 2016.\n\n";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Marching_Cubes_Impossible_case_1[] = "Marching Cubes: Impossible case 13?";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_CASES;
static PyObject *__pyx_n_s_CASESCLASSIC;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Cell;
static PyObject *__pyx_n_s_EDGESRELX;
static PyObject *__pyx_n_s_EDGESRELY;
static PyObject *__pyx_n_s_EDGESRELZ;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_ambiguous_case_i;
static PyObject *__pyx_kp_s_Invalid_edge_i;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_Lut;
static PyObject *__pyx_n_s_LutProvider;
static PyObject *__pyx_kp_s_Marching_Cubes_Impossible_case_1;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_Nx;
static PyObject *__pyx_n_s_Nx_bound;
static PyObject *__pyx_n_s_Ny;
static PyObject *__pyx_n_s_Ny_bound;
static PyObject *__pyx_n_s_Nz;
static PyObject *__pyx_n_s_Nz_bound;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_SUBCONFIG13;
static PyObject *__pyx_n_s_TEST10;
static PyObject *__pyx_n_s_TEST12;
static PyObject *__pyx_n_s_TEST13;
static PyObject *__pyx_n_s_TEST3;
static PyObject *__pyx_n_s_TEST4;
static PyObject *__pyx_n_s_TEST6;
static PyObject *__pyx_n_s_TEST7;
static PyObject *__pyx_n_s_TILING1;
static PyObject *__pyx_n_s_TILING10_1_1;
static PyObject *__pyx_n_s_TILING10_1_1_2;
static PyObject *__pyx_n_s_TILING10_1_2;
static PyObject *__pyx_n_s_TILING10_2;
static PyObject *__pyx_n_s_TILING10_2_2;
static PyObject *__pyx_n_s_TILING11;
static PyObject *__pyx_n_s_TILING12_1_1;
static PyObject *__pyx_n_s_TILING12_1_1_2;
static PyObject *__pyx_n_s_TILING12_1_2;
static PyObject *__pyx_n_s_TILING12_2;
static PyObject *__pyx_n_s_TILING12_2_2;
static PyObject *__pyx_n_s_TILING13_1;
static PyObject *__pyx_n_s_TILING13_1_2;
static PyObject *__pyx_n_s_TILING13_2;
static PyObject *__pyx_n_s_TILING13_2_2;
static PyObject *__pyx_n_s_TILING13_3;
static PyObject *__pyx_n_s_TILING13_3_2;
static PyObject *__pyx_n_s_TILING13_4;
static PyObject *__pyx_n_s_TILING13_5_1;
static PyObject *__pyx_n_s_TILING13_5_2;
static PyObject *__pyx_n_s_TILING14;
static PyObject *__pyx_n_s_TILING2;
static PyObject *__pyx_n_s_TILING3_1;
static PyObject *__pyx_n_s_TILING3_2;
static PyObject *__pyx_n_s_TILING4_1;
static PyObject *__pyx_n_s_TILING4_2;
static PyObject *__pyx_n_s_TILING5;
static PyObject *__pyx_n_s_TILING6_1_1;
static PyObject *__pyx_n_s_TILING6_1_2;
static PyObject *__pyx_n_s_TILING6_2;
static PyObject *__pyx_n_s_TILING7_1;
static PyObject *__pyx_n_s_TILING7_2;
static PyObject *__pyx_n_s_TILING7_3;
static PyObject *__pyx_n_s_TILING7_4_1;
static PyObject *__pyx_n_s_TILING7_4_2;
static PyObject *__pyx_n_s_TILING8;
static PyObject *__pyx_n_s_TILING9;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_s_all_0_vec;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_anchor_sign;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_arr;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_arrays;
static PyObject *__pyx_n_s_arrays2;
static PyObject *__pyx_n_s_avg_cube_val_thresh;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_base_vec;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_case;
static PyObject *__pyx_n_s_cell;
static PyObject *__pyx_n_s_change_cube;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_classic;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_config;
static PyObject *__pyx_n_s_connected_components;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cube_sign;
static PyObject *__pyx_n_s_cumsum;
static PyObject *__pyx_n_s_cur_x_i;
static PyObject *__pyx_n_s_cur_y_i;
static PyObject *__pyx_n_s_cur_z_i;
static PyObject *__pyx_n_s_current_tuple;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dir_index;
static PyObject *__pyx_n_s_dir_x;
static PyObject *__pyx_n_s_dir_y;
static PyObject *__pyx_n_s_dir_z;
static PyObject *__pyx_n_s_directions_x;
static PyObject *__pyx_n_s_directions_y;
static PyObject *__pyx_n_s_directions_z;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_faces;
static PyObject *__pyx_n_s_faces2;
static PyObject *__pyx_n_s_faces_2;
static PyObject *__pyx_n_s_faces_ok;
static PyObject *__pyx_n_s_faces_ok_2;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_get_faces;
static PyObject *__pyx_n_s_get_normals;
static PyObject *__pyx_n_s_get_values;
static PyObject *__pyx_n_s_get_vertices;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_grads;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_i2;
static PyObject *__pyx_n_s_i3;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_im;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_luts;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_marching_cubes_lewiner_cy;
static PyObject *__pyx_kp_s_marching_cubes_lewiner_cy_pyx;
static PyObject *__pyx_n_s_marching_cubes_udf;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_n_s_max_cube_val_thresh;
static PyObject *__pyx_n_s_max_distance;
static PyObject *__pyx_n_s_max_distance_temp;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_no_mask;
static PyObject *__pyx_n_s_non_trivial_mc_cases_queue;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nt;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nx;
static PyObject *__pyx_n_s_ny;
static PyObject *__pyx_n_s_nz;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_unpickle_LutProvider;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_queue;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remove_degenerate_faces;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sign_vs;
static PyObject *__pyx_n_s_signed_im;
static PyObject *__pyx_n_s_signed_im_mask;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_spacing;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_subconfig;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_total_cubes;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_unsure_cases_queue;
static PyObject *__pyx_n_s_unsure_cases_thresh;
static PyObject *__pyx_n_s_unsure_cases_visit_neighbours;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_v0;
static PyObject *__pyx_n_s_v1;
static PyObject *__pyx_n_s_v2;
static PyObject *__pyx_n_s_v3;
static PyObject *__pyx_n_s_v4;
static PyObject *__pyx_n_s_v5;
static PyObject *__pyx_n_s_v6;
static PyObject *__pyx_n_s_v7;
static PyObject *__pyx_n_s_v_index;
static PyObject *__pyx_n_s_vertex_index_array_x;
static PyObject *__pyx_n_s_vertex_index_array_y;
static PyObject *__pyx_n_s_vertex_index_array_z;
static PyObject *__pyx_n_s_vertices;
static PyObject *__pyx_n_s_vertices2;
static PyObject *__pyx_n_s_vertices_2;
static PyObject *__pyx_n_s_vertices_map0;
static PyObject *__pyx_n_s_vertices_map1;
static PyObject *__pyx_n_s_vertices_map1_2;
static PyObject *__pyx_n_s_vertices_map2;
static PyObject *__pyx_n_s_vertices_ok;
static PyObject *__pyx_n_s_visited;
static PyObject *__pyx_n_s_visited_vs;
static PyObject *__pyx_n_s_voxel_size;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x_i;
static PyObject *__pyx_n_s_x_st;
static PyObject *__pyx_n_s_xi;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_i;
static PyObject *__pyx_n_s_y_st;
static PyObject *__pyx_n_s_yi;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z_i;
static PyObject *__pyx_n_s_z_st;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zi;
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_remove_degenerate_faces(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces, PyObject *__pyx_v_arrays); /* proto */
static int __pyx_pf_26_marching_cubes_lewiner_cy_4Cell___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, int __pyx_v_nx, int __pyx_v_ny, int __pyx_v_nz); /* proto */
static int __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_2__cinit__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static void __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_4__dealloc__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_6get_vertices(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_8get_normals(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_10get_faces(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_12get_values(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_26_marching_cubes_lewiner_cy_3Lut___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, PyObject *__pyx_v_array); /* proto */
static int __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_2__cinit__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self); /* proto */
static void __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_4__dealloc__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_3Lut_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_3Lut_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self, PyObject *__pyx_v_EDGESRELX, PyObject *__pyx_v_EDGESRELY, PyObject *__pyx_v_EDGESRELZ, PyObject *__pyx_v_CASESCLASSIC, PyObject *__pyx_v_CASES, PyObject *__pyx_v_TILING1, PyObject *__pyx_v_TILING2, PyObject *__pyx_v_TILING3_1, PyObject *__pyx_v_TILING3_2, PyObject *__pyx_v_TILING4_1, PyObject *__pyx_v_TILING4_2, PyObject *__pyx_v_TILING5, PyObject *__pyx_v_TILING6_1_1, PyObject *__pyx_v_TILING6_1_2, PyObject *__pyx_v_TILING6_2, PyObject *__pyx_v_TILING7_1, PyObject *__pyx_v_TILING7_2, PyObject *__pyx_v_TILING7_3, PyObject *__pyx_v_TILING7_4_1, PyObject *__pyx_v_TILING7_4_2, PyObject *__pyx_v_TILING8, PyObject *__pyx_v_TILING9, PyObject *__pyx_v_TILING10_1_1, PyObject *__pyx_v_TILING10_1_1_, PyObject *__pyx_v_TILING10_1_2, PyObject *__pyx_v_TILING10_2, PyObject *__pyx_v_TILING10_2_, PyObject *__pyx_v_TILING11, PyObject *__pyx_v_TILING12_1_1, PyObject *__pyx_v_TILING12_1_1_, PyObject *__pyx_v_TILING12_1_2, PyObject *__pyx_v_TILING12_2, PyObject *__pyx_v_TILING12_2_, PyObject *__pyx_v_TILING13_1, PyObject *__pyx_v_TILING13_1_, PyObject *__pyx_v_TILING13_2, PyObject *__pyx_v_TILING13_2_, PyObject *__pyx_v_TILING13_3, PyObject *__pyx_v_TILING13_3_, PyObject *__pyx_v_TILING13_4, PyObject *__pyx_v_TILING13_5_1, PyObject *__pyx_v_TILING13_5_2, PyObject *__pyx_v_TILING14, PyObject *__pyx_v_TEST3, PyObject *__pyx_v_TEST4, PyObject *__pyx_v_TEST6, PyObject *__pyx_v_TEST7, PyObject *__pyx_v_TEST10, PyObject *__pyx_v_TEST12, PyObject *__pyx_v_TEST13, PyObject *__pyx_v_SUBCONFIG13); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_2__reduce_cython__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_4__setstate_cython__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_2marching_cubes_udf(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_im, __Pyx_memviewslice __pyx_v_grads, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, int __pyx_v_st, CYTHON_UNUSED int __pyx_v_classic, PyArrayObject *__pyx_v_mask); /* proto */
static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4__pyx_unpickle_LutProvider(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_Cell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_Lut(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_LutProvider(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_1_05;
static PyObject *__pyx_float_1_74;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_50552520;
static PyObject *__pyx_int_77914546;
static PyObject *__pyx_int_88039365;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__23;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__41;
/* Late includes */

/* "_marching_cubes_lewiner_cy.pyx":38
 * 
 * # Define abs function for doubles
 * cdef inline double dabs(double a): return a if a>=0 else -a             # <<<<<<<<<<<<<<
 * cdef inline int imin(int a, int b): return a if a<b else b
 * 
 */

static CYTHON_INLINE double __pyx_f_26_marching_cubes_lewiner_cy_dabs(double __pyx_v_a) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("dabs", 0);
  if (((__pyx_v_a >= 0.0) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = (-__pyx_v_a);
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":39
 * # Define abs function for doubles
 * cdef inline double dabs(double a): return a if a>=0 else -a
 * cdef inline int imin(int a, int b): return a if a<b else b             # <<<<<<<<<<<<<<
 * 
 * # todo: allow dynamic isovalue?
 */

static CYTHON_INLINE int __pyx_f_26_marching_cubes_lewiner_cy_imin(int __pyx_v_a, int __pyx_v_b) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("imin", 0);
  if (((__pyx_v_a < __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":44
 * # todo: can we disable Cython from checking for zero division? Sometimes we know that it never happens!
 * 
 * def remove_degenerate_faces(vertices, faces, *arrays):             # <<<<<<<<<<<<<<
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_1remove_degenerate_faces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_26_marching_cubes_lewiner_cy_1remove_degenerate_faces = {"remove_degenerate_faces", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_26_marching_cubes_lewiner_cy_1remove_degenerate_faces, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_1remove_degenerate_faces(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vertices = 0;
  PyObject *__pyx_v_faces = 0;
  PyObject *__pyx_v_arrays = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_degenerate_faces (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_arrays = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_arrays)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_arrays);
  } else {
    __pyx_v_arrays = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vertices,&__pyx_n_s_faces,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vertices)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("remove_degenerate_faces", 0, 2, 2, 1); __PYX_ERR(0, 44, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "remove_degenerate_faces") < 0)) __PYX_ERR(0, 44, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_vertices = values[0];
    __pyx_v_faces = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_degenerate_faces", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 44, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_arrays); __pyx_v_arrays = 0;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.remove_degenerate_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_remove_degenerate_faces(__pyx_self, __pyx_v_vertices, __pyx_v_faces, __pyx_v_arrays);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arrays);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_remove_degenerate_faces(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vertices, PyObject *__pyx_v_faces, PyObject *__pyx_v_arrays) {
  PyObject *__pyx_v_vertices_map0 = NULL;
  PyObject *__pyx_v_vertices_map1 = NULL;
  PyObject *__pyx_v_faces_ok = NULL;
  __Pyx_memviewslice __pyx_v_vertices_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_v1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_v2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_v3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_faces_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_vertices_map1_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_faces_ok_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_j;
  int __pyx_v_i1;
  int __pyx_v_i2;
  int __pyx_v_i3;
  PyObject *__pyx_v_vertices_ok = NULL;
  PyObject *__pyx_v_vertices_map2 = NULL;
  PyObject *__pyx_v_faces2 = NULL;
  PyObject *__pyx_v_vertices2 = NULL;
  PyObject *__pyx_v_arrays2 = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_memviewslice __pyx_t_17 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_18 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_19 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_degenerate_faces", 0);

  /* "_marching_cubes_lewiner_cy.pyx":46
 * def remove_degenerate_faces(vertices, faces, *arrays):
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)             # <<<<<<<<<<<<<<
 *     vertices_map1 = vertices_map0.copy()
 *     faces_ok = np.ones(len(faces), dtype=np.int32)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_arange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_vertices); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vertices_map0 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":47
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 *     vertices_map1 = vertices_map0.copy()             # <<<<<<<<<<<<<<
 *     faces_ok = np.ones(len(faces), dtype=np.int32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vertices_map0, __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_vertices_map1 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":48
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 *     vertices_map1 = vertices_map0.copy()
 *     faces_ok = np.ones(len(faces), dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     cdef float [:, :] vertices_ = vertices
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ones); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_faces); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_faces_ok = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":50
 *     faces_ok = np.ones(len(faces), dtype=np.int32)
 * 
 *     cdef float [:, :] vertices_ = vertices             # <<<<<<<<<<<<<<
 *     cdef float [:] v1, v2, v3
 *     cdef int [:, :]  faces_ = faces
 */
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_vertices, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_v_vertices_ = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":52
 *     cdef float [:, :] vertices_ = vertices
 *     cdef float [:] v1, v2, v3
 *     cdef int [:, :]  faces_ = faces             # <<<<<<<<<<<<<<
 * 
 *     cdef int [:] vertices_map1_ = vertices_map1
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_v_faces, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_v_faces_ = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":54
 *     cdef int [:, :]  faces_ = faces
 * 
 *     cdef int [:] vertices_map1_ = vertices_map1             # <<<<<<<<<<<<<<
 *     cdef int [:] faces_ok_ = faces_ok
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_vertices_map1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 54, __pyx_L1_error)
  __pyx_v_vertices_map1_ = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":55
 * 
 *     cdef int [:] vertices_map1_ = vertices_map1
 *     cdef int [:] faces_ok_ = faces_ok             # <<<<<<<<<<<<<<
 * 
 *     cdef int j, i1, i2, i3
 */
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_faces_ok, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_faces_ok_ = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":61
 *     # Iterate over all faces. When we encounter a degenerate triangle,
 *     # we update the vertex map, i.e. we merge the corresponding vertices.
 *     for j in range(faces_.shape[0]):             # <<<<<<<<<<<<<<
 *         i1, i2, i3 = faces_[j][0], faces_[j][1], faces_[j][2]
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]
 */
  __pyx_t_3 = (__pyx_v_faces_.shape[0]);
  __pyx_t_10 = __pyx_t_3;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_j = __pyx_t_11;

    /* "_marching_cubes_lewiner_cy.pyx":62
 *     # we update the vertex map, i.e. we merge the corresponding vertices.
 *     for j in range(faces_.shape[0]):
 *         i1, i2, i3 = faces_[j][0], faces_[j][1], faces_[j][2]             # <<<<<<<<<<<<<<
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:
 */
    __pyx_t_12 = __pyx_v_j;
    __pyx_t_13 = 0;
    __pyx_t_14 = (*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_faces_.data + __pyx_t_12 * __pyx_v_faces_.strides[0]) ) + __pyx_t_13 * __pyx_v_faces_.strides[1]) )));
    __pyx_t_13 = __pyx_v_j;
    __pyx_t_12 = 1;
    __pyx_t_15 = (*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_faces_.data + __pyx_t_13 * __pyx_v_faces_.strides[0]) ) + __pyx_t_12 * __pyx_v_faces_.strides[1]) )));
    __pyx_t_12 = __pyx_v_j;
    __pyx_t_13 = 2;
    __pyx_t_16 = (*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_faces_.data + __pyx_t_12 * __pyx_v_faces_.strides[0]) ) + __pyx_t_13 * __pyx_v_faces_.strides[1]) )));
    __pyx_v_i1 = __pyx_t_14;
    __pyx_v_i2 = __pyx_t_15;
    __pyx_v_i3 = __pyx_t_16;

    /* "_marching_cubes_lewiner_cy.pyx":63
 *     for j in range(faces_.shape[0]):
 *         i1, i2, i3 = faces_[j][0], faces_[j][1], faces_[j][2]
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]             # <<<<<<<<<<<<<<
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 */
    __pyx_t_17.data = __pyx_v_vertices_.data;
    __pyx_t_17.memview = __pyx_v_vertices_.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_17, 0);
    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i1;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_vertices_.strides[0];
        __pyx_t_17.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_17.shape[0] = __pyx_v_vertices_.shape[1];
__pyx_t_17.strides[0] = __pyx_v_vertices_.strides[1];
    __pyx_t_17.suboffsets[0] = -1;

__pyx_t_18.data = __pyx_v_vertices_.data;
    __pyx_t_18.memview = __pyx_v_vertices_.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_18, 0);
    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i2;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_vertices_.strides[0];
        __pyx_t_18.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_18.shape[0] = __pyx_v_vertices_.shape[1];
__pyx_t_18.strides[0] = __pyx_v_vertices_.strides[1];
    __pyx_t_18.suboffsets[0] = -1;

__pyx_t_19.data = __pyx_v_vertices_.data;
    __pyx_t_19.memview = __pyx_v_vertices_.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_19, 0);
    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_i3;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_vertices_.strides[0];
        __pyx_t_19.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_19.shape[0] = __pyx_v_vertices_.shape[1];
__pyx_t_19.strides[0] = __pyx_v_vertices_.strides[1];
    __pyx_t_19.suboffsets[0] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_v1, 1);
    __pyx_v_v1 = __pyx_t_17;
    __pyx_t_17.memview = NULL;
    __pyx_t_17.data = NULL;
    __PYX_XDEC_MEMVIEW(&__pyx_v_v2, 1);
    __pyx_v_v2 = __pyx_t_18;
    __pyx_t_18.memview = NULL;
    __pyx_t_18.data = NULL;
    __PYX_XDEC_MEMVIEW(&__pyx_v_v3, 1);
    __pyx_v_v3 = __pyx_t_19;
    __pyx_t_19.memview = NULL;
    __pyx_t_19.data = NULL;

    /* "_marching_cubes_lewiner_cy.pyx":64
 *         i1, i2, i3 = faces_[j][0], faces_[j][1], faces_[j][2]
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 *             faces_ok_[j] = 0
 */
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_13 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_12 * __pyx_v_v2.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_12 = 1;
    __pyx_t_13 = 1;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_12 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_13 * __pyx_v_v2.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_13 = 2;
    __pyx_t_12 = 2;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_13 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_12 * __pyx_v_v2.strides[0]) )))) != 0);
    __pyx_t_20 = __pyx_t_21;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_20) {

      /* "_marching_cubes_lewiner_cy.pyx":65
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])             # <<<<<<<<<<<<<<
 *             faces_ok_[j] = 0
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:
 */
      __pyx_t_12 = __pyx_v_i1;
      __pyx_t_13 = __pyx_v_i2;
      __pyx_t_16 = __pyx_f_26_marching_cubes_lewiner_cy_imin((*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_12 * __pyx_v_vertices_map1_.strides[0]) ))), (*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) ))));
      __pyx_t_13 = __pyx_v_i1;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;
      __pyx_t_13 = __pyx_v_i2;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;

      /* "_marching_cubes_lewiner_cy.pyx":66
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 *             faces_ok_[j] = 0             # <<<<<<<<<<<<<<
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 */
      __pyx_t_13 = __pyx_v_j;
      *((int *) ( /* dim=0 */ (__pyx_v_faces_ok_.data + __pyx_t_13 * __pyx_v_faces_ok_.strides[0]) )) = 0;

      /* "_marching_cubes_lewiner_cy.pyx":64
 *         i1, i2, i3 = faces_[j][0], faces_[j][1], faces_[j][2]
 *         v1, v2, v3 = vertices_[i1], vertices_[i2], vertices_[i3]
 *         if v1[0] == v2[0] and v1[1] == v2[1] and v1[2] == v2[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 *             faces_ok_[j] = 0
 */
    }

    /* "_marching_cubes_lewiner_cy.pyx":67
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 *             faces_ok_[j] = 0
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 */
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_13 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_12 * __pyx_v_v3.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_12 = 1;
    __pyx_t_13 = 1;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_12 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_13 * __pyx_v_v3.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_13 = 2;
    __pyx_t_12 = 2;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v1.data + __pyx_t_13 * __pyx_v_v1.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_12 * __pyx_v_v3.strides[0]) )))) != 0);
    __pyx_t_20 = __pyx_t_21;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_20) {

      /* "_marching_cubes_lewiner_cy.pyx":68
 *             faces_ok_[j] = 0
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])             # <<<<<<<<<<<<<<
 *             faces_ok_[j] = 0
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:
 */
      __pyx_t_12 = __pyx_v_i1;
      __pyx_t_13 = __pyx_v_i3;
      __pyx_t_16 = __pyx_f_26_marching_cubes_lewiner_cy_imin((*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_12 * __pyx_v_vertices_map1_.strides[0]) ))), (*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) ))));
      __pyx_t_13 = __pyx_v_i1;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;
      __pyx_t_13 = __pyx_v_i3;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;

      /* "_marching_cubes_lewiner_cy.pyx":69
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 *             faces_ok_[j] = 0             # <<<<<<<<<<<<<<
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:
 *             vertices_map1_[i2] = vertices_map1_[i3] = imin(vertices_map1_[i2], vertices_map1_[i3])
 */
      __pyx_t_13 = __pyx_v_j;
      *((int *) ( /* dim=0 */ (__pyx_v_faces_ok_.data + __pyx_t_13 * __pyx_v_faces_ok_.strides[0]) )) = 0;

      /* "_marching_cubes_lewiner_cy.pyx":67
 *             vertices_map1_[i1] = vertices_map1_[i2] = imin(vertices_map1_[i1], vertices_map1_[i2])
 *             faces_ok_[j] = 0
 *         if v1[0] == v3[0] and v1[1] == v3[1] and v1[2] == v3[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 */
    }

    /* "_marching_cubes_lewiner_cy.pyx":70
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i2] = vertices_map1_[i3] = imin(vertices_map1_[i2], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 */
    __pyx_t_13 = 0;
    __pyx_t_12 = 0;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_13 * __pyx_v_v2.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_12 * __pyx_v_v3.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_12 = 1;
    __pyx_t_13 = 1;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_12 * __pyx_v_v2.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_13 * __pyx_v_v3.strides[0]) )))) != 0);
    if (__pyx_t_21) {
    } else {
      __pyx_t_20 = __pyx_t_21;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_13 = 2;
    __pyx_t_12 = 2;
    __pyx_t_21 = (((*((float *) ( /* dim=0 */ (__pyx_v_v2.data + __pyx_t_13 * __pyx_v_v2.strides[0]) ))) == (*((float *) ( /* dim=0 */ (__pyx_v_v3.data + __pyx_t_12 * __pyx_v_v3.strides[0]) )))) != 0);
    __pyx_t_20 = __pyx_t_21;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_20) {

      /* "_marching_cubes_lewiner_cy.pyx":71
 *             faces_ok_[j] = 0
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:
 *             vertices_map1_[i2] = vertices_map1_[i3] = imin(vertices_map1_[i2], vertices_map1_[i3])             # <<<<<<<<<<<<<<
 *             faces_ok_[j] = 0
 * 
 */
      __pyx_t_12 = __pyx_v_i2;
      __pyx_t_13 = __pyx_v_i3;
      __pyx_t_16 = __pyx_f_26_marching_cubes_lewiner_cy_imin((*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_12 * __pyx_v_vertices_map1_.strides[0]) ))), (*((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) ))));
      __pyx_t_13 = __pyx_v_i2;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;
      __pyx_t_13 = __pyx_v_i3;
      *((int *) ( /* dim=0 */ (__pyx_v_vertices_map1_.data + __pyx_t_13 * __pyx_v_vertices_map1_.strides[0]) )) = __pyx_t_16;

      /* "_marching_cubes_lewiner_cy.pyx":72
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:
 *             vertices_map1_[i2] = vertices_map1_[i3] = imin(vertices_map1_[i2], vertices_map1_[i3])
 *             faces_ok_[j] = 0             # <<<<<<<<<<<<<<
 * 
 *     # Create mask and mapping to new vertex indices
 */
      __pyx_t_13 = __pyx_v_j;
      *((int *) ( /* dim=0 */ (__pyx_v_faces_ok_.data + __pyx_t_13 * __pyx_v_faces_ok_.strides[0]) )) = 0;

      /* "_marching_cubes_lewiner_cy.pyx":70
 *             vertices_map1_[i1] = vertices_map1_[i3] = imin(vertices_map1_[i1], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 *         if v2[0] == v3[0] and v2[1] == v3[1] and v2[2] == v3[2]:             # <<<<<<<<<<<<<<
 *             vertices_map1_[i2] = vertices_map1_[i3] = imin(vertices_map1_[i2], vertices_map1_[i3])
 *             faces_ok_[j] = 0
 */
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":75
 * 
 *     # Create mask and mapping to new vertex indices
 *     vertices_ok = vertices_map1 == vertices_map0             # <<<<<<<<<<<<<<
 *     vertices_map2 = np.cumsum(vertices_ok) - 1
 * 
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_vertices_map1, __pyx_v_vertices_map0, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_v_vertices_ok = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":76
 *     # Create mask and mapping to new vertex indices
 *     vertices_ok = vertices_map1 == vertices_map0
 *     vertices_map2 = np.cumsum(vertices_ok) - 1             # <<<<<<<<<<<<<<
 * 
 *     # Apply selection and mapping
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_cumsum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_v_vertices_ok) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_vertices_ok);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_vertices_map2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":79
 * 
 *     # Apply selection and mapping
 *     faces2 = vertices_map2[vertices_map1[faces[faces_ok>0]]]             # <<<<<<<<<<<<<<
 *     vertices2 = vertices[vertices_ok]
 *     arrays2 = [arr[vertices_ok] for arr in arrays]
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_faces_ok, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_faces, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_vertices_map1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_vertices_map2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_faces2 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":80
 *     # Apply selection and mapping
 *     faces2 = vertices_map2[vertices_map1[faces[faces_ok>0]]]
 *     vertices2 = vertices[vertices_ok]             # <<<<<<<<<<<<<<
 *     arrays2 = [arr[vertices_ok] for arr in arrays]
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_vertices, __pyx_v_vertices_ok); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_vertices2 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":81
 *     faces2 = vertices_map2[vertices_map1[faces[faces_ok>0]]]
 *     vertices2 = vertices[vertices_ok]
 *     arrays2 = [arr[vertices_ok] for arr in arrays]             # <<<<<<<<<<<<<<
 * 
 *     return (vertices2, faces2) + tuple(arrays2)
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __pyx_v_arrays; __Pyx_INCREF(__pyx_t_4); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
    #else
    __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_arr, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_arr, __pyx_v_vertices_ok); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_arrays2 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":83
 *     arrays2 = [arr[vertices_ok] for arr in arrays]
 * 
 *     return (vertices2, faces2) + tuple(arrays2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_vertices2);
  __Pyx_GIVEREF(__pyx_v_vertices2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_vertices2);
  __Pyx_INCREF(__pyx_v_faces2);
  __Pyx_GIVEREF(__pyx_v_faces2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_faces2);
  __pyx_t_4 = PyList_AsTuple(__pyx_v_arrays2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":44
 * # todo: can we disable Cython from checking for zero division? Sometimes we know that it never happens!
 * 
 * def remove_degenerate_faces(vertices, faces, *arrays):             # <<<<<<<<<<<<<<
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_17, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_18, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_19, 1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.remove_degenerate_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vertices_map0);
  __Pyx_XDECREF(__pyx_v_vertices_map1);
  __Pyx_XDECREF(__pyx_v_faces_ok);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vertices_, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_v1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_v2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_v3, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_faces_, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vertices_map1_, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_faces_ok_, 1);
  __Pyx_XDECREF(__pyx_v_vertices_ok);
  __Pyx_XDECREF(__pyx_v_vertices_map2);
  __Pyx_XDECREF(__pyx_v_faces2);
  __Pyx_XDECREF(__pyx_v_vertices2);
  __Pyx_XDECREF(__pyx_v_arrays2);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":187
 * 
 * 
 *     def __init__(self, LutProvider luts, int nx, int ny, int nz):             # <<<<<<<<<<<<<<
 *         self.luts = luts
 *         self.nx, self.ny, self.nz = nx, ny, nz
 */

/* Python wrapper */
static int __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts = 0;
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_nz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_luts,&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_luts)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 187, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_luts = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)values[0]);
    __pyx_v_nx = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
    __pyx_v_ny = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_ny == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
    __pyx_v_nz = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_nz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_luts), __pyx_ptype_26_marching_cubes_lewiner_cy_LutProvider, 1, "luts", 0))) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell___init__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self), __pyx_v_luts, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_26_marching_cubes_lewiner_cy_4Cell___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, int __pyx_v_nx, int __pyx_v_ny, int __pyx_v_nz) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":188
 * 
 *     def __init__(self, LutProvider luts, int nx, int ny, int nz):
 *         self.luts = luts             # <<<<<<<<<<<<<<
 *         self.nx, self.ny, self.nz = nx, ny, nz
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_luts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_luts));
  __Pyx_GOTREF(__pyx_v_self->luts);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->luts));
  __pyx_v_self->luts = __pyx_v_luts;

  /* "_marching_cubes_lewiner_cy.pyx":189
 *     def __init__(self, LutProvider luts, int nx, int ny, int nz):
 *         self.luts = luts
 *         self.nx, self.ny, self.nz = nx, ny, nz             # <<<<<<<<<<<<<<
 * 
 *         # Allocate face layers
 */
  __pyx_t_1 = __pyx_v_nx;
  __pyx_t_2 = __pyx_v_ny;
  __pyx_t_3 = __pyx_v_nz;
  __pyx_v_self->nx = __pyx_t_1;
  __pyx_v_self->ny = __pyx_t_2;
  __pyx_v_self->nz = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":194
 *         # self.faceLayer1 = <int *>malloc(self.nx*self.ny*4 * sizeof(int))
 *         # self.faceLayer2 = <int *>malloc(self.nx*self.ny*4 * sizeof(int))
 *         self.faceLayer = <int *>malloc(self.nx*self.ny*self.nz*4 * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *         # if (self.faceLayer1 is NULL or self.faceLayer2 is NULL or
 */
  __pyx_v_self->faceLayer = ((int *)malloc(((((__pyx_v_self->nx * __pyx_v_self->ny) * __pyx_v_self->nz) * 4) * (sizeof(int)))));

  /* "_marching_cubes_lewiner_cy.pyx":201
 *         #     self._faces is NULL):
 *         #     raise MemoryError()
 *         if (self.faceLayer is NULL or             # <<<<<<<<<<<<<<
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or
 *             self._normals is NULL or self._values is NULL or
 */
  __pyx_t_5 = ((__pyx_v_self->faceLayer == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "_marching_cubes_lewiner_cy.pyx":202
 *         #     raise MemoryError()
 *         if (self.faceLayer is NULL or
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or             # <<<<<<<<<<<<<<
 *             self._normals is NULL or self._values is NULL or
 *             self._faces is NULL):
 */
  __pyx_t_5 = ((__pyx_v_self->vv == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_self->vg == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_self->_vertices == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "_marching_cubes_lewiner_cy.pyx":203
 *         if (self.faceLayer is NULL or
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or
 *             self._normals is NULL or self._values is NULL or             # <<<<<<<<<<<<<<
 *             self._faces is NULL):
 *             raise MemoryError()
 */
  __pyx_t_5 = ((__pyx_v_self->_normals == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_self->_values == NULL) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "_marching_cubes_lewiner_cy.pyx":204
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or
 *             self._normals is NULL or self._values is NULL or
 *             self._faces is NULL):             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->_faces == NULL) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;

  /* "_marching_cubes_lewiner_cy.pyx":201
 *         #     self._faces is NULL):
 *         #     raise MemoryError()
 *         if (self.faceLayer is NULL or             # <<<<<<<<<<<<<<
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or
 *             self._normals is NULL or self._values is NULL or
 */
  if (unlikely(__pyx_t_4)) {

    /* "_marching_cubes_lewiner_cy.pyx":205
 *             self._normals is NULL or self._values is NULL or
 *             self._faces is NULL):
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    PyErr_NoMemory(); __PYX_ERR(0, 205, __pyx_L1_error)

    /* "_marching_cubes_lewiner_cy.pyx":201
 *         #     self._faces is NULL):
 *         #     raise MemoryError()
 *         if (self.faceLayer is NULL or             # <<<<<<<<<<<<<<
 *             self.vv is NULL or self.vg is NULL or self._vertices is NULL or
 *             self._normals is NULL or self._values is NULL or
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":212
 *         #     self.faceLayer2[i] = -1
 *         # self.faceLayer = self.faceLayer1
 *         for i in range(self.nx*self.ny*self.nz*4):             # <<<<<<<<<<<<<<
 *             self.faceLayer[i] = -1
 * 
 */
  __pyx_t_6 = (((__pyx_v_self->nx * __pyx_v_self->ny) * __pyx_v_self->nz) * 4);
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_7; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":213
 *         # self.faceLayer = self.faceLayer1
 *         for i in range(self.nx*self.ny*self.nz*4):
 *             self.faceLayer[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->faceLayer[__pyx_v_i]) = -1;
  }

  /* "_marching_cubes_lewiner_cy.pyx":187
 * 
 * 
 *     def __init__(self, LutProvider luts, int nx, int ny, int nz):             # <<<<<<<<<<<<<<
 *         self.luts = luts
 *         self.nx, self.ny, self.nz = nx, ny, nz
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":216
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         # Init tiny arrays for vertices and gradients at the vertices
 */

/* Python wrapper */
static int __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_2__cinit__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_2__cinit__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":219
 * 
 *         # Init tiny arrays for vertices and gradients at the vertices
 *         self.vv = <double *>malloc(8 * sizeof(double))             # <<<<<<<<<<<<<<
 *         self.vg = <double *>malloc(8*3 * sizeof(double))
 * 
 */
  __pyx_v_self->vv = ((double *)malloc((8 * (sizeof(double)))));

  /* "_marching_cubes_lewiner_cy.pyx":220
 *         # Init tiny arrays for vertices and gradients at the vertices
 *         self.vv = <double *>malloc(8 * sizeof(double))
 *         self.vg = <double *>malloc(8*3 * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *         # Init face layers
 */
  __pyx_v_self->vg = ((double *)malloc((24 * (sizeof(double)))));

  /* "_marching_cubes_lewiner_cy.pyx":225
 *         # self.faceLayer1 = NULL
 *         # self.faceLayer2 = NULL
 *         self.faceLayer = NULL             # <<<<<<<<<<<<<<
 * 
 *         # Init vertices
 */
  __pyx_v_self->faceLayer = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":228
 * 
 *         # Init vertices
 *         self._vertexCount = 0             # <<<<<<<<<<<<<<
 *         self._vertexMaxCount = 8
 *         self._vertices = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 */
  __pyx_v_self->_vertexCount = 0;

  /* "_marching_cubes_lewiner_cy.pyx":229
 *         # Init vertices
 *         self._vertexCount = 0
 *         self._vertexMaxCount = 8             # <<<<<<<<<<<<<<
 *         self._vertices = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 *         self._normals = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 */
  __pyx_v_self->_vertexMaxCount = 8;

  /* "_marching_cubes_lewiner_cy.pyx":230
 *         self._vertexCount = 0
 *         self._vertexMaxCount = 8
 *         self._vertices = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))             # <<<<<<<<<<<<<<
 *         self._normals = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 *         self._values = <float *>malloc(self._vertexMaxCount * sizeof(float))
 */
  __pyx_v_self->_vertices = ((float *)malloc(((__pyx_v_self->_vertexMaxCount * 3) * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":231
 *         self._vertexMaxCount = 8
 *         self._vertices = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 *         self._normals = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))             # <<<<<<<<<<<<<<
 *         self._values = <float *>malloc(self._vertexMaxCount * sizeof(float))
 *         # Clear normals and values
 */
  __pyx_v_self->_normals = ((float *)malloc(((__pyx_v_self->_vertexMaxCount * 3) * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":232
 *         self._vertices = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 *         self._normals = <float *>malloc(self._vertexMaxCount*3 * sizeof(float))
 *         self._values = <float *>malloc(self._vertexMaxCount * sizeof(float))             # <<<<<<<<<<<<<<
 *         # Clear normals and values
 *         cdef int i, j
 */
  __pyx_v_self->_values = ((float *)malloc((__pyx_v_self->_vertexMaxCount * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":235
 *         # Clear normals and values
 *         cdef int i, j
 *         if self._values is not NULL and self._normals is not NULL:             # <<<<<<<<<<<<<<
 *             for i in range(self._vertexMaxCount):
 *                 self._values[i] = 0.0
 */
  __pyx_t_2 = ((__pyx_v_self->_values != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->_normals != NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":236
 *         cdef int i, j
 *         if self._values is not NULL and self._normals is not NULL:
 *             for i in range(self._vertexMaxCount):             # <<<<<<<<<<<<<<
 *                 self._values[i] = 0.0
 *                 for j in range(3):
 */
    __pyx_t_3 = __pyx_v_self->_vertexMaxCount;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "_marching_cubes_lewiner_cy.pyx":237
 *         if self._values is not NULL and self._normals is not NULL:
 *             for i in range(self._vertexMaxCount):
 *                 self._values[i] = 0.0             # <<<<<<<<<<<<<<
 *                 for j in range(3):
 *                     self._normals[i*3+j] = 0.0
 */
      (__pyx_v_self->_values[__pyx_v_i]) = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":238
 *             for i in range(self._vertexMaxCount):
 *                 self._values[i] = 0.0
 *                 for j in range(3):             # <<<<<<<<<<<<<<
 *                     self._normals[i*3+j] = 0.0
 * 
 */
      for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
        __pyx_v_j = __pyx_t_6;

        /* "_marching_cubes_lewiner_cy.pyx":239
 *                 self._values[i] = 0.0
 *                 for j in range(3):
 *                     self._normals[i*3+j] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         # Init faces
 */
        (__pyx_v_self->_normals[((__pyx_v_i * 3) + __pyx_v_j)]) = 0.0;
      }
    }

    /* "_marching_cubes_lewiner_cy.pyx":235
 *         # Clear normals and values
 *         cdef int i, j
 *         if self._values is not NULL and self._normals is not NULL:             # <<<<<<<<<<<<<<
 *             for i in range(self._vertexMaxCount):
 *                 self._values[i] = 0.0
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":242
 * 
 *         # Init faces
 *         self._faceCount = 0             # <<<<<<<<<<<<<<
 *         self._faceMaxCount = 8
 *         self._faces = <int *>malloc(self._faceMaxCount * sizeof(int))
 */
  __pyx_v_self->_faceCount = 0;

  /* "_marching_cubes_lewiner_cy.pyx":243
 *         # Init faces
 *         self._faceCount = 0
 *         self._faceMaxCount = 8             # <<<<<<<<<<<<<<
 *         self._faces = <int *>malloc(self._faceMaxCount * sizeof(int))
 * 
 */
  __pyx_v_self->_faceMaxCount = 8;

  /* "_marching_cubes_lewiner_cy.pyx":244
 *         self._faceCount = 0
 *         self._faceMaxCount = 8
 *         self._faces = <int *>malloc(self._faceMaxCount * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_faces = ((int *)malloc((__pyx_v_self->_faceMaxCount * (sizeof(int)))));

  /* "_marching_cubes_lewiner_cy.pyx":216
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         # Init tiny arrays for vertices and gradients at the vertices
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":247
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.vv)
 *         free(self.vg)
 */

/* Python wrapper */
static void __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_4__dealloc__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_4__dealloc__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":248
 * 
 *     def __dealloc__(self):
 *         free(self.vv)             # <<<<<<<<<<<<<<
 *         free(self.vg)
 *         # free(self.faceLayer1)
 */
  free(__pyx_v_self->vv);

  /* "_marching_cubes_lewiner_cy.pyx":249
 *     def __dealloc__(self):
 *         free(self.vv)
 *         free(self.vg)             # <<<<<<<<<<<<<<
 *         # free(self.faceLayer1)
 *         # free(self.faceLayer2)
 */
  free(__pyx_v_self->vg);

  /* "_marching_cubes_lewiner_cy.pyx":252
 *         # free(self.faceLayer1)
 *         # free(self.faceLayer2)
 *         free(self.faceLayer)             # <<<<<<<<<<<<<<
 *         free(self._vertices)
 *         free(self._normals)
 */
  free(__pyx_v_self->faceLayer);

  /* "_marching_cubes_lewiner_cy.pyx":253
 *         # free(self.faceLayer2)
 *         free(self.faceLayer)
 *         free(self._vertices)             # <<<<<<<<<<<<<<
 *         free(self._normals)
 *         free(self._values)
 */
  free(__pyx_v_self->_vertices);

  /* "_marching_cubes_lewiner_cy.pyx":254
 *         free(self.faceLayer)
 *         free(self._vertices)
 *         free(self._normals)             # <<<<<<<<<<<<<<
 *         free(self._values)
 *         free(self._faces)
 */
  free(__pyx_v_self->_normals);

  /* "_marching_cubes_lewiner_cy.pyx":255
 *         free(self._vertices)
 *         free(self._normals)
 *         free(self._values)             # <<<<<<<<<<<<<<
 *         free(self._faces)
 * 
 */
  free(__pyx_v_self->_values);

  /* "_marching_cubes_lewiner_cy.pyx":256
 *         free(self._normals)
 *         free(self._values)
 *         free(self._faces)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  free(__pyx_v_self->_faces);

  /* "_marching_cubes_lewiner_cy.pyx":247
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.vv)
 *         free(self.vg)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":259
 * 
 * 
 *     cdef void _increase_size_vertices(self):             # <<<<<<<<<<<<<<
 *         """ Increase the size of the vertices array by a factor two.
 *         """
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_vertices(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  int __pyx_v_newMaxCount;
  float *__pyx_v_newVertices;
  float *__pyx_v_newNormals;
  float *__pyx_v_newValues;
  int __pyx_v_i;
  int __pyx_v_j;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_increase_size_vertices", 0);

  /* "_marching_cubes_lewiner_cy.pyx":263
 *         """
 *         # Allocate new array
 *         cdef int newMaxCount = self._vertexMaxCount * 2             # <<<<<<<<<<<<<<
 *         cdef float *newVertices = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))
 */
  __pyx_v_newMaxCount = (__pyx_v_self->_vertexMaxCount * 2);

  /* "_marching_cubes_lewiner_cy.pyx":264
 *         # Allocate new array
 *         cdef int newMaxCount = self._vertexMaxCount * 2
 *         cdef float *newVertices = <float *>malloc(newMaxCount*3 * sizeof(float))             # <<<<<<<<<<<<<<
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))
 */
  __pyx_v_newVertices = ((float *)malloc(((__pyx_v_newMaxCount * 3) * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":265
 *         cdef int newMaxCount = self._vertexMaxCount * 2
 *         cdef float *newVertices = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))             # <<<<<<<<<<<<<<
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:
 */
  __pyx_v_newNormals = ((float *)malloc(((__pyx_v_newMaxCount * 3) * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":266
 *         cdef float *newVertices = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))             # <<<<<<<<<<<<<<
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:
 *             free(newVertices)
 */
  __pyx_v_newValues = ((float *)malloc((__pyx_v_newMaxCount * (sizeof(float)))));

  /* "_marching_cubes_lewiner_cy.pyx":267
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:             # <<<<<<<<<<<<<<
 *             free(newVertices)
 *             free(newNormals)
 */
  __pyx_t_2 = ((__pyx_v_newVertices == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_newNormals == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_newValues == NULL) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "_marching_cubes_lewiner_cy.pyx":268
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:
 *             free(newVertices)             # <<<<<<<<<<<<<<
 *             free(newNormals)
 *             free(newValues)
 */
    free(__pyx_v_newVertices);

    /* "_marching_cubes_lewiner_cy.pyx":269
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:
 *             free(newVertices)
 *             free(newNormals)             # <<<<<<<<<<<<<<
 *             free(newValues)
 *             raise MemoryError()
 */
    free(__pyx_v_newNormals);

    /* "_marching_cubes_lewiner_cy.pyx":270
 *             free(newVertices)
 *             free(newNormals)
 *             free(newValues)             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         # Clear
 */
    free(__pyx_v_newValues);

    /* "_marching_cubes_lewiner_cy.pyx":271
 *             free(newNormals)
 *             free(newValues)
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         # Clear
 *         cdef int i, j
 */
    PyErr_NoMemory(); __PYX_ERR(0, 271, __pyx_L1_error)

    /* "_marching_cubes_lewiner_cy.pyx":267
 *         cdef float *newNormals = <float *>malloc(newMaxCount*3 * sizeof(float))
 *         cdef float *newValues = <float *>malloc(newMaxCount * sizeof(float))
 *         if newVertices is NULL or newNormals is NULL or newValues is NULL:             # <<<<<<<<<<<<<<
 *             free(newVertices)
 *             free(newNormals)
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":274
 *         # Clear
 *         cdef int i, j
 *         for i in range(self._vertexCount, newMaxCount):             # <<<<<<<<<<<<<<
 *             newValues[i] = 0.0
 *             for j in range(3):
 */
  __pyx_t_3 = __pyx_v_newMaxCount;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = __pyx_v_self->_vertexCount; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "_marching_cubes_lewiner_cy.pyx":275
 *         cdef int i, j
 *         for i in range(self._vertexCount, newMaxCount):
 *             newValues[i] = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 newNormals[i*3+j] = 0.0
 */
    (__pyx_v_newValues[__pyx_v_i]) = 0.0;

    /* "_marching_cubes_lewiner_cy.pyx":276
 *         for i in range(self._vertexCount, newMaxCount):
 *             newValues[i] = 0.0
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 newNormals[i*3+j] = 0.0
 *         # Copy
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "_marching_cubes_lewiner_cy.pyx":277
 *             newValues[i] = 0.0
 *             for j in range(3):
 *                 newNormals[i*3+j] = 0.0             # <<<<<<<<<<<<<<
 *         # Copy
 *         for i in range(self._vertexCount):
 */
      (__pyx_v_newNormals[((__pyx_v_i * 3) + __pyx_v_j)]) = 0.0;
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":279
 *                 newNormals[i*3+j] = 0.0
 *         # Copy
 *         for i in range(self._vertexCount):             # <<<<<<<<<<<<<<
 *             newValues[i] = self._values[i]
 *             for j in range(3):
 */
  __pyx_t_3 = __pyx_v_self->_vertexCount;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "_marching_cubes_lewiner_cy.pyx":280
 *         # Copy
 *         for i in range(self._vertexCount):
 *             newValues[i] = self._values[i]             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 newVertices[i*3+j] = self._vertices[i*3+j]
 */
    (__pyx_v_newValues[__pyx_v_i]) = (__pyx_v_self->_values[__pyx_v_i]);

    /* "_marching_cubes_lewiner_cy.pyx":281
 *         for i in range(self._vertexCount):
 *             newValues[i] = self._values[i]
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 newVertices[i*3+j] = self._vertices[i*3+j]
 *                 newNormals[i*3+j] = self._normals[i*3+j]
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "_marching_cubes_lewiner_cy.pyx":282
 *             newValues[i] = self._values[i]
 *             for j in range(3):
 *                 newVertices[i*3+j] = self._vertices[i*3+j]             # <<<<<<<<<<<<<<
 *                 newNormals[i*3+j] = self._normals[i*3+j]
 *         # Apply
 */
      (__pyx_v_newVertices[((__pyx_v_i * 3) + __pyx_v_j)]) = (__pyx_v_self->_vertices[((__pyx_v_i * 3) + __pyx_v_j)]);

      /* "_marching_cubes_lewiner_cy.pyx":283
 *             for j in range(3):
 *                 newVertices[i*3+j] = self._vertices[i*3+j]
 *                 newNormals[i*3+j] = self._normals[i*3+j]             # <<<<<<<<<<<<<<
 *         # Apply
 *         free(self._vertices); self._vertices = newVertices
 */
      (__pyx_v_newNormals[((__pyx_v_i * 3) + __pyx_v_j)]) = (__pyx_v_self->_normals[((__pyx_v_i * 3) + __pyx_v_j)]);
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":285
 *                 newNormals[i*3+j] = self._normals[i*3+j]
 *         # Apply
 *         free(self._vertices); self._vertices = newVertices             # <<<<<<<<<<<<<<
 *         free(self._normals); self._normals = newNormals
 *         free(self._values); self._values = newValues
 */
  free(__pyx_v_self->_vertices);
  __pyx_v_self->_vertices = __pyx_v_newVertices;

  /* "_marching_cubes_lewiner_cy.pyx":286
 *         # Apply
 *         free(self._vertices); self._vertices = newVertices
 *         free(self._normals); self._normals = newNormals             # <<<<<<<<<<<<<<
 *         free(self._values); self._values = newValues
 *         self._vertexMaxCount = newMaxCount
 */
  free(__pyx_v_self->_normals);
  __pyx_v_self->_normals = __pyx_v_newNormals;

  /* "_marching_cubes_lewiner_cy.pyx":287
 *         free(self._vertices); self._vertices = newVertices
 *         free(self._normals); self._normals = newNormals
 *         free(self._values); self._values = newValues             # <<<<<<<<<<<<<<
 *         self._vertexMaxCount = newMaxCount
 * 
 */
  free(__pyx_v_self->_values);
  __pyx_v_self->_values = __pyx_v_newValues;

  /* "_marching_cubes_lewiner_cy.pyx":288
 *         free(self._normals); self._normals = newNormals
 *         free(self._values); self._values = newValues
 *         self._vertexMaxCount = newMaxCount             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_vertexMaxCount = __pyx_v_newMaxCount;

  /* "_marching_cubes_lewiner_cy.pyx":259
 * 
 * 
 *     cdef void _increase_size_vertices(self):             # <<<<<<<<<<<<<<
 *         """ Increase the size of the vertices array by a factor two.
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.Cell._increase_size_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":291
 * 
 * 
 *     cdef void _increase_size_faces(self):             # <<<<<<<<<<<<<<
 *         """ Increase the size of the faces array by a factor two.
 *         """
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_faces(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  int __pyx_v_newMaxCount;
  int *__pyx_v_newFaces;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_increase_size_faces", 0);

  /* "_marching_cubes_lewiner_cy.pyx":295
 *         """
 *         # Allocate new array
 *         cdef int newMaxCount = self._faceMaxCount * 2             # <<<<<<<<<<<<<<
 *         cdef int *newFaces = <int *>malloc(newMaxCount * sizeof(int))
 *         if newFaces is NULL:
 */
  __pyx_v_newMaxCount = (__pyx_v_self->_faceMaxCount * 2);

  /* "_marching_cubes_lewiner_cy.pyx":296
 *         # Allocate new array
 *         cdef int newMaxCount = self._faceMaxCount * 2
 *         cdef int *newFaces = <int *>malloc(newMaxCount * sizeof(int))             # <<<<<<<<<<<<<<
 *         if newFaces is NULL:
 *             raise MemoryError()
 */
  __pyx_v_newFaces = ((int *)malloc((__pyx_v_newMaxCount * (sizeof(int)))));

  /* "_marching_cubes_lewiner_cy.pyx":297
 *         cdef int newMaxCount = self._faceMaxCount * 2
 *         cdef int *newFaces = <int *>malloc(newMaxCount * sizeof(int))
 *         if newFaces is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         # Copy
 */
  __pyx_t_1 = ((__pyx_v_newFaces == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "_marching_cubes_lewiner_cy.pyx":298
 *         cdef int *newFaces = <int *>malloc(newMaxCount * sizeof(int))
 *         if newFaces is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         # Copy
 *         cdef int i
 */
    PyErr_NoMemory(); __PYX_ERR(0, 298, __pyx_L1_error)

    /* "_marching_cubes_lewiner_cy.pyx":297
 *         cdef int newMaxCount = self._faceMaxCount * 2
 *         cdef int *newFaces = <int *>malloc(newMaxCount * sizeof(int))
 *         if newFaces is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         # Copy
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":301
 *         # Copy
 *         cdef int i
 *         for i in range(self._faceCount):             # <<<<<<<<<<<<<<
 *             newFaces[i] = self._faces[i]
 *         # Apply
 */
  __pyx_t_2 = __pyx_v_self->_faceCount;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "_marching_cubes_lewiner_cy.pyx":302
 *         cdef int i
 *         for i in range(self._faceCount):
 *             newFaces[i] = self._faces[i]             # <<<<<<<<<<<<<<
 *         # Apply
 *         free(self._faces)
 */
    (__pyx_v_newFaces[__pyx_v_i]) = (__pyx_v_self->_faces[__pyx_v_i]);
  }

  /* "_marching_cubes_lewiner_cy.pyx":304
 *             newFaces[i] = self._faces[i]
 *         # Apply
 *         free(self._faces)             # <<<<<<<<<<<<<<
 *         self._faces = newFaces
 *         self._faceMaxCount = newMaxCount
 */
  free(__pyx_v_self->_faces);

  /* "_marching_cubes_lewiner_cy.pyx":305
 *         # Apply
 *         free(self._faces)
 *         self._faces = newFaces             # <<<<<<<<<<<<<<
 *         self._faceMaxCount = newMaxCount
 * 
 */
  __pyx_v_self->_faces = __pyx_v_newFaces;

  /* "_marching_cubes_lewiner_cy.pyx":306
 *         free(self._faces)
 *         self._faces = newFaces
 *         self._faceMaxCount = newMaxCount             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_faceMaxCount = __pyx_v_newMaxCount;

  /* "_marching_cubes_lewiner_cy.pyx":291
 * 
 * 
 *     cdef void _increase_size_faces(self):             # <<<<<<<<<<<<<<
 *         """ Increase the size of the faces array by a factor two.
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.Cell._increase_size_faces", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":311
 *     ## Adding results
 * 
 *     cdef int add_vertex(self, float x, float y, float z):             # <<<<<<<<<<<<<<
 *         """ Add a vertex to the result. Return index in vertex array.
 *         """
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_vertex(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, float __pyx_v_x, float __pyx_v_y, float __pyx_v_z) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_vertex", 0);

  /* "_marching_cubes_lewiner_cy.pyx":315
 *         """
 *         # Check if array is large enough
 *         if self._vertexCount >= self._vertexMaxCount:             # <<<<<<<<<<<<<<
 *             self._increase_size_vertices()
 *         # Add vertex
 */
  __pyx_t_1 = ((__pyx_v_self->_vertexCount >= __pyx_v_self->_vertexMaxCount) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":316
 *         # Check if array is large enough
 *         if self._vertexCount >= self._vertexMaxCount:
 *             self._increase_size_vertices()             # <<<<<<<<<<<<<<
 *         # Add vertex
 *         self._vertices[self._vertexCount*3+0] = x
 */
    ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->_increase_size_vertices(__pyx_v_self);

    /* "_marching_cubes_lewiner_cy.pyx":315
 *         """
 *         # Check if array is large enough
 *         if self._vertexCount >= self._vertexMaxCount:             # <<<<<<<<<<<<<<
 *             self._increase_size_vertices()
 *         # Add vertex
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":318
 *             self._increase_size_vertices()
 *         # Add vertex
 *         self._vertices[self._vertexCount*3+0] = x             # <<<<<<<<<<<<<<
 *         self._vertices[self._vertexCount*3+1] = y
 *         self._vertices[self._vertexCount*3+2] = z
 */
  (__pyx_v_self->_vertices[((__pyx_v_self->_vertexCount * 3) + 0)]) = __pyx_v_x;

  /* "_marching_cubes_lewiner_cy.pyx":319
 *         # Add vertex
 *         self._vertices[self._vertexCount*3+0] = x
 *         self._vertices[self._vertexCount*3+1] = y             # <<<<<<<<<<<<<<
 *         self._vertices[self._vertexCount*3+2] = z
 *         self._vertexCount += 1
 */
  (__pyx_v_self->_vertices[((__pyx_v_self->_vertexCount * 3) + 1)]) = __pyx_v_y;

  /* "_marching_cubes_lewiner_cy.pyx":320
 *         self._vertices[self._vertexCount*3+0] = x
 *         self._vertices[self._vertexCount*3+1] = y
 *         self._vertices[self._vertexCount*3+2] = z             # <<<<<<<<<<<<<<
 *         self._vertexCount += 1
 *         return self._vertexCount -1
 */
  (__pyx_v_self->_vertices[((__pyx_v_self->_vertexCount * 3) + 2)]) = __pyx_v_z;

  /* "_marching_cubes_lewiner_cy.pyx":321
 *         self._vertices[self._vertexCount*3+1] = y
 *         self._vertices[self._vertexCount*3+2] = z
 *         self._vertexCount += 1             # <<<<<<<<<<<<<<
 *         return self._vertexCount -1
 * 
 */
  __pyx_v_self->_vertexCount = (__pyx_v_self->_vertexCount + 1);

  /* "_marching_cubes_lewiner_cy.pyx":322
 *         self._vertices[self._vertexCount*3+2] = z
 *         self._vertexCount += 1
 *         return self._vertexCount -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self->_vertexCount - 1);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":311
 *     ## Adding results
 * 
 *     cdef int add_vertex(self, float x, float y, float z):             # <<<<<<<<<<<<<<
 *         """ Add a vertex to the result. Return index in vertex array.
 *         """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":325
 * 
 * 
 *     cdef void add_gradient(self, int vertexIndex, float gx, float gy, float gz):             # <<<<<<<<<<<<<<
 *         """ Add a gradient value to the vertex corresponding to the given index.
 *         """
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vertexIndex, float __pyx_v_gx, float __pyx_v_gy, float __pyx_v_gz) {
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __Pyx_RefNannySetupContext("add_gradient", 0);

  /* "_marching_cubes_lewiner_cy.pyx":328
 *         """ Add a gradient value to the vertex corresponding to the given index.
 *         """
 *         self._normals[vertexIndex*3+0] += gx             # <<<<<<<<<<<<<<
 *         self._normals[vertexIndex*3+1] += gy
 *         self._normals[vertexIndex*3+2] += gz
 */
  __pyx_t_1 = ((__pyx_v_vertexIndex * 3) + 0);
  (__pyx_v_self->_normals[__pyx_t_1]) = ((__pyx_v_self->_normals[__pyx_t_1]) + __pyx_v_gx);

  /* "_marching_cubes_lewiner_cy.pyx":329
 *         """
 *         self._normals[vertexIndex*3+0] += gx
 *         self._normals[vertexIndex*3+1] += gy             # <<<<<<<<<<<<<<
 *         self._normals[vertexIndex*3+2] += gz
 * 
 */
  __pyx_t_1 = ((__pyx_v_vertexIndex * 3) + 1);
  (__pyx_v_self->_normals[__pyx_t_1]) = ((__pyx_v_self->_normals[__pyx_t_1]) + __pyx_v_gy);

  /* "_marching_cubes_lewiner_cy.pyx":330
 *         self._normals[vertexIndex*3+0] += gx
 *         self._normals[vertexIndex*3+1] += gy
 *         self._normals[vertexIndex*3+2] += gz             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((__pyx_v_vertexIndex * 3) + 2);
  (__pyx_v_self->_normals[__pyx_t_1]) = ((__pyx_v_self->_normals[__pyx_t_1]) + __pyx_v_gz);

  /* "_marching_cubes_lewiner_cy.pyx":325
 * 
 * 
 *     cdef void add_gradient(self, int vertexIndex, float gx, float gy, float gz):             # <<<<<<<<<<<<<<
 *         """ Add a gradient value to the vertex corresponding to the given index.
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":333
 * 
 * 
 *     cdef void add_gradient_from_index(self, int vertexIndex, int i, float strength):             # <<<<<<<<<<<<<<
 *         """ Add a gradient value to the vertex corresponding to the given index.
 *         vertexIndex is the index in the large array of vertices that is returned.
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient_from_index(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vertexIndex, int __pyx_v_i, float __pyx_v_strength) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_gradient_from_index", 0);

  /* "_marching_cubes_lewiner_cy.pyx":338
 *         i is the index of the array of vertices 0-7 for the current cell.
 *         """
 *         self.add_gradient(vertexIndex, self.vg[i*3+0] * strength, self.vg[i*3+1] * strength, self.vg[i*3+2] * strength)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient(__pyx_v_self, __pyx_v_vertexIndex, ((__pyx_v_self->vg[((__pyx_v_i * 3) + 0)]) * __pyx_v_strength), ((__pyx_v_self->vg[((__pyx_v_i * 3) + 1)]) * __pyx_v_strength), ((__pyx_v_self->vg[((__pyx_v_i * 3) + 2)]) * __pyx_v_strength));

  /* "_marching_cubes_lewiner_cy.pyx":333
 * 
 * 
 *     cdef void add_gradient_from_index(self, int vertexIndex, int i, float strength):             # <<<<<<<<<<<<<<
 *         """ Add a gradient value to the vertex corresponding to the given index.
 *         vertexIndex is the index in the large array of vertices that is returned.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":341
 * 
 * 
 *     cdef add_face(self, int index):             # <<<<<<<<<<<<<<
 *         """ Add a face to the result. Also updates the value.
 *         """
 */

static PyObject *__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_face(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("add_face", 0);

  /* "_marching_cubes_lewiner_cy.pyx":345
 *         """
 *         # Check if array is large enough
 *         if self._faceCount >= self._faceMaxCount:             # <<<<<<<<<<<<<<
 *             self._increase_size_faces()
 *         # Add face
 */
  __pyx_t_1 = ((__pyx_v_self->_faceCount >= __pyx_v_self->_faceMaxCount) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":346
 *         # Check if array is large enough
 *         if self._faceCount >= self._faceMaxCount:
 *             self._increase_size_faces()             # <<<<<<<<<<<<<<
 *         # Add face
 *         self._faces[self._faceCount] = index
 */
    ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->_increase_size_faces(__pyx_v_self);

    /* "_marching_cubes_lewiner_cy.pyx":345
 *         """
 *         # Check if array is large enough
 *         if self._faceCount >= self._faceMaxCount:             # <<<<<<<<<<<<<<
 *             self._increase_size_faces()
 *         # Add face
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":348
 *             self._increase_size_faces()
 *         # Add face
 *         self._faces[self._faceCount] = index             # <<<<<<<<<<<<<<
 *         self._faceCount += 1
 *         # if (self._faceCount < 18):
 */
  (__pyx_v_self->_faces[__pyx_v_self->_faceCount]) = __pyx_v_index;

  /* "_marching_cubes_lewiner_cy.pyx":349
 *         # Add face
 *         self._faces[self._faceCount] = index
 *         self._faceCount += 1             # <<<<<<<<<<<<<<
 *         # if (self._faceCount < 18):
 *         #     print(str(self._faces[self._faceCount-1]))
 */
  __pyx_v_self->_faceCount = (__pyx_v_self->_faceCount + 1);

  /* "_marching_cubes_lewiner_cy.pyx":354
 *         #     # print("f: " + str(self._faceCount) + " v: " + str(self._vertexCount))
 *         # Also update value
 *         if self.vmax > self._values[index]:             # <<<<<<<<<<<<<<
 *             self._values[index] = self.vmax
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->vmax > (__pyx_v_self->_values[__pyx_v_index])) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":355
 *         # Also update value
 *         if self.vmax > self._values[index]:
 *             self._values[index] = self.vmax             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_v_self->vmax;
    (__pyx_v_self->_values[__pyx_v_index]) = __pyx_t_2;

    /* "_marching_cubes_lewiner_cy.pyx":354
 *         #     # print("f: " + str(self._faceCount) + " v: " + str(self._vertexCount))
 *         # Also update value
 *         if self.vmax > self._values[index]:             # <<<<<<<<<<<<<<
 *             self._values[index] = self.vmax
 * 
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":341
 * 
 * 
 *     cdef add_face(self, int index):             # <<<<<<<<<<<<<<
 *         """ Add a face to the result. Also updates the value.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":360
 *     ## Getting results
 * 
 *     def get_vertices(self):             # <<<<<<<<<<<<<<
 *         """ Get the final vertex array.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_7get_vertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_26_marching_cubes_lewiner_cy_4Cell_6get_vertices[] = " Get the final vertex array.\n        ";
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_7get_vertices(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_vertices (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_6get_vertices(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_6get_vertices(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  PyObject *__pyx_v_vertices = NULL;
  __Pyx_memviewslice __pyx_v_vertices_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_vertices", 0);

  /* "_marching_cubes_lewiner_cy.pyx":363
 *         """ Get the final vertex array.
 *         """
 *         vertices = np.empty((self._vertexCount,3), np.float32)             # <<<<<<<<<<<<<<
 *         cdef float [:, :] vertices_ = vertices
 *         cdef int i, j
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_vertexCount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vertices = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":364
 *         """
 *         vertices = np.empty((self._vertexCount,3), np.float32)
 *         cdef float [:, :] vertices_ = vertices             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         for i in range(self._vertexCount):
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_vertices, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_v_vertices_ = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":366
 *         cdef float [:, :] vertices_ = vertices
 *         cdef int i, j
 *         for i in range(self._vertexCount):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 vertices_[i, j] = self._vertices[i*3+j]
 */
  __pyx_t_6 = __pyx_v_self->_vertexCount;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "_marching_cubes_lewiner_cy.pyx":367
 *         cdef int i, j
 *         for i in range(self._vertexCount):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 vertices_[i, j] = self._vertices[i*3+j]
 *         return vertices
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "_marching_cubes_lewiner_cy.pyx":368
 *         for i in range(self._vertexCount):
 *             for j in range(3):
 *                 vertices_[i, j] = self._vertices[i*3+j]             # <<<<<<<<<<<<<<
 *         return vertices
 * 
 */
      __pyx_t_12 = __pyx_v_i;
      __pyx_t_13 = __pyx_v_j;
      *((float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_vertices_.data + __pyx_t_12 * __pyx_v_vertices_.strides[0]) ) + __pyx_t_13 * __pyx_v_vertices_.strides[1]) )) = (__pyx_v_self->_vertices[((__pyx_v_i * 3) + __pyx_v_j)]);
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":369
 *             for j in range(3):
 *                 vertices_[i, j] = self._vertices[i*3+j]
 *         return vertices             # <<<<<<<<<<<<<<
 * 
 *     def get_normals(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_vertices);
  __pyx_r = __pyx_v_vertices;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":360
 *     ## Getting results
 * 
 *     def get_vertices(self):             # <<<<<<<<<<<<<<
 *         """ Get the final vertex array.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.get_vertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vertices);
  __PYX_XDEC_MEMVIEW(&__pyx_v_vertices_, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":371
 *         return vertices
 * 
 *     def get_normals(self):             # <<<<<<<<<<<<<<
 *         """ Get the final normals array.
 *         The normals are normalized to unit length.
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_9get_normals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_26_marching_cubes_lewiner_cy_4Cell_8get_normals[] = " Get the final normals array.\n        The normals are normalized to unit length.\n        ";
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_9get_normals(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_normals (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_8get_normals(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_8get_normals(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  PyObject *__pyx_v_normals = NULL;
  __Pyx_memviewslice __pyx_v_normals_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_length;
  double __pyx_v_dtmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_normals", 0);

  /* "_marching_cubes_lewiner_cy.pyx":375
 *         The normals are normalized to unit length.
 *         """
 *         normals = np.empty((self._vertexCount,3), np.float32)             # <<<<<<<<<<<<<<
 *         cdef float [:, :] normals_ = normals
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_vertexCount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_normals = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":376
 *         """
 *         normals = np.empty((self._vertexCount,3), np.float32)
 *         cdef float [:, :] normals_ = normals             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, j
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_normals, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_normals_ = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":380
 *         cdef int i, j
 *         cdef double length, dtmp
 *         for i in range(self._vertexCount):             # <<<<<<<<<<<<<<
 *             length = 0.0
 *             for j in range(3):
 */
  __pyx_t_6 = __pyx_v_self->_vertexCount;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "_marching_cubes_lewiner_cy.pyx":381
 *         cdef double length, dtmp
 *         for i in range(self._vertexCount):
 *             length = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!
 */
    __pyx_v_length = 0.0;

    /* "_marching_cubes_lewiner_cy.pyx":382
 *         for i in range(self._vertexCount):
 *             length = 0.0
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!
 *                 length +=  dtmp*dtmp
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "_marching_cubes_lewiner_cy.pyx":383
 *             length = 0.0
 *             for j in range(3):
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!             # <<<<<<<<<<<<<<
 *                 length +=  dtmp*dtmp
 *             if length > 0.0:
 */
      __pyx_v_dtmp = (__pyx_v_self->_normals[((__pyx_v_i * 3) + __pyx_v_j)]);

      /* "_marching_cubes_lewiner_cy.pyx":384
 *             for j in range(3):
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!
 *                 length +=  dtmp*dtmp             # <<<<<<<<<<<<<<
 *             if length > 0.0:
 *                 length = 1.0 / length**0.5
 */
      __pyx_v_length = (__pyx_v_length + (__pyx_v_dtmp * __pyx_v_dtmp));
    }

    /* "_marching_cubes_lewiner_cy.pyx":385
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!
 *                 length +=  dtmp*dtmp
 *             if length > 0.0:             # <<<<<<<<<<<<<<
 *                 length = 1.0 / length**0.5
 *             for j in range(3):
 */
    __pyx_t_12 = ((__pyx_v_length > 0.0) != 0);
    if (__pyx_t_12) {

      /* "_marching_cubes_lewiner_cy.pyx":386
 *                 length +=  dtmp*dtmp
 *             if length > 0.0:
 *                 length = 1.0 / length**0.5             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 normals_[i,j] = self._normals[i*3+j] * length
 */
      __pyx_v_length = (1.0 / pow(__pyx_v_length, 0.5));

      /* "_marching_cubes_lewiner_cy.pyx":385
 *                 dtmp = self._normals[i*3+j] # Make it double before taking **2!
 *                 length +=  dtmp*dtmp
 *             if length > 0.0:             # <<<<<<<<<<<<<<
 *                 length = 1.0 / length**0.5
 *             for j in range(3):
 */
    }

    /* "_marching_cubes_lewiner_cy.pyx":387
 *             if length > 0.0:
 *                 length = 1.0 / length**0.5
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 normals_[i,j] = self._normals[i*3+j] * length
 *         return normals
 */
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_j = __pyx_t_11;

      /* "_marching_cubes_lewiner_cy.pyx":388
 *                 length = 1.0 / length**0.5
 *             for j in range(3):
 *                 normals_[i,j] = self._normals[i*3+j] * length             # <<<<<<<<<<<<<<
 *         return normals
 * 
 */
      __pyx_t_13 = __pyx_v_i;
      __pyx_t_14 = __pyx_v_j;
      *((float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_normals_.data + __pyx_t_13 * __pyx_v_normals_.strides[0]) ) + __pyx_t_14 * __pyx_v_normals_.strides[1]) )) = ((__pyx_v_self->_normals[((__pyx_v_i * 3) + __pyx_v_j)]) * __pyx_v_length);
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":389
 *             for j in range(3):
 *                 normals_[i,j] = self._normals[i*3+j] * length
 *         return normals             # <<<<<<<<<<<<<<
 * 
 *     def get_faces(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_normals);
  __pyx_r = __pyx_v_normals;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":371
 *         return vertices
 * 
 *     def get_normals(self):             # <<<<<<<<<<<<<<
 *         """ Get the final normals array.
 *         The normals are normalized to unit length.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.get_normals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_normals);
  __PYX_XDEC_MEMVIEW(&__pyx_v_normals_, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":391
 *         return normals
 * 
 *     def get_faces(self):             # <<<<<<<<<<<<<<
 *         faces = np.empty((self._faceCount,), np.int32)
 *         cdef int [:] faces_ = faces
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_11get_faces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_11get_faces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_faces (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_10get_faces(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_10get_faces(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  PyObject *__pyx_v_faces = NULL;
  __Pyx_memviewslice __pyx_v_faces_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_faces", 0);

  /* "_marching_cubes_lewiner_cy.pyx":392
 * 
 *     def get_faces(self):
 *         faces = np.empty((self._faceCount,), np.int32)             # <<<<<<<<<<<<<<
 *         cdef int [:] faces_ = faces
 *         cdef int i, j
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_faceCount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_faces = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":393
 *     def get_faces(self):
 *         faces = np.empty((self._faceCount,), np.int32)
 *         cdef int [:] faces_ = faces             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         for i in range(self._faceCount):
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(__pyx_v_faces, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_v_faces_ = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":395
 *         cdef int [:] faces_ = faces
 *         cdef int i, j
 *         for i in range(self._faceCount):             # <<<<<<<<<<<<<<
 *             faces_[i] = self._faces[i]
 *         return faces
 */
  __pyx_t_6 = __pyx_v_self->_faceCount;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "_marching_cubes_lewiner_cy.pyx":396
 *         cdef int i, j
 *         for i in range(self._faceCount):
 *             faces_[i] = self._faces[i]             # <<<<<<<<<<<<<<
 *         return faces
 * 
 */
    __pyx_t_11 = __pyx_v_i;
    *((int *) ( /* dim=0 */ (__pyx_v_faces_.data + __pyx_t_11 * __pyx_v_faces_.strides[0]) )) = (__pyx_v_self->_faces[__pyx_v_i]);
  }

  /* "_marching_cubes_lewiner_cy.pyx":397
 *         for i in range(self._faceCount):
 *             faces_[i] = self._faces[i]
 *         return faces             # <<<<<<<<<<<<<<
 * 
 *     def get_values(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_faces);
  __pyx_r = __pyx_v_faces;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":391
 *         return normals
 * 
 *     def get_faces(self):             # <<<<<<<<<<<<<<
 *         faces = np.empty((self._faceCount,), np.int32)
 *         cdef int [:] faces_ = faces
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.get_faces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faces);
  __PYX_XDEC_MEMVIEW(&__pyx_v_faces_, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":399
 *         return faces
 * 
 *     def get_values(self):             # <<<<<<<<<<<<<<
 *         values = np.empty((self._vertexCount,), np.float32)
 *         cdef float [:] values_ = values
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_13get_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_13get_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_values (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_12get_values(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_12get_values(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  PyObject *__pyx_v_values = NULL;
  __Pyx_memviewslice __pyx_v_values_ = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_values", 0);

  /* "_marching_cubes_lewiner_cy.pyx":400
 * 
 *     def get_values(self):
 *         values = np.empty((self._vertexCount,), np.float32)             # <<<<<<<<<<<<<<
 *         cdef float [:] values_ = values
 *         cdef int i, j
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_vertexCount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_values = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":401
 *     def get_values(self):
 *         values = np.empty((self._vertexCount,), np.float32)
 *         cdef float [:] values_ = values             # <<<<<<<<<<<<<<
 *         cdef int i, j
 *         for i in range(self._vertexCount):
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_float(__pyx_v_values, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_v_values_ = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":403
 *         cdef float [:] values_ = values
 *         cdef int i, j
 *         for i in range(self._vertexCount):             # <<<<<<<<<<<<<<
 *             values_[i] = self._values[i]
 *         return values
 */
  __pyx_t_6 = __pyx_v_self->_vertexCount;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "_marching_cubes_lewiner_cy.pyx":404
 *         cdef int i, j
 *         for i in range(self._vertexCount):
 *             values_[i] = self._values[i]             # <<<<<<<<<<<<<<
 *         return values
 * 
 */
    __pyx_t_11 = __pyx_v_i;
    *((float *) ( /* dim=0 */ (__pyx_v_values_.data + __pyx_t_11 * __pyx_v_values_.strides[0]) )) = (__pyx_v_self->_values[__pyx_v_i]);
  }

  /* "_marching_cubes_lewiner_cy.pyx":405
 *         for i in range(self._vertexCount):
 *             values_[i] = self._values[i]
 *         return values             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_values);
  __pyx_r = __pyx_v_values;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":399
 *         return faces
 * 
 *     def get_values(self):             # <<<<<<<<<<<<<<
 *         values = np.empty((self._vertexCount,), np.float32)
 *         cdef float [:] values_ = values
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.get_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_values);
  __PYX_XDEC_MEMVIEW(&__pyx_v_values_, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":422
 * 
 * 
 *     cdef void set_cube(self,    double isovalue, int x, int y, int z, int step,             # <<<<<<<<<<<<<<
 *                                 double v0, double v1, double v2, double v3,
 *                                 double v4, double v5, double v6, double v7):
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_set_cube(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, double __pyx_v_isovalue, int __pyx_v_x, int __pyx_v_y, int __pyx_v_z, int __pyx_v_step, double __pyx_v_v0, double __pyx_v_v1, double __pyx_v_v2, double __pyx_v_v3, double __pyx_v_v4, double __pyx_v_v5, double __pyx_v_v6, double __pyx_v_v7) {
  int __pyx_v_index;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_cube", 0);

  /* "_marching_cubes_lewiner_cy.pyx":436
 * 
 *         # Set location and step
 *         self.x = x             # <<<<<<<<<<<<<<
 *         self.y = y
 *         self.z = z
 */
  __pyx_v_self->x = __pyx_v_x;

  /* "_marching_cubes_lewiner_cy.pyx":437
 *         # Set location and step
 *         self.x = x
 *         self.y = y             # <<<<<<<<<<<<<<
 *         self.z = z
 *         self.step = step
 */
  __pyx_v_self->y = __pyx_v_y;

  /* "_marching_cubes_lewiner_cy.pyx":438
 *         self.x = x
 *         self.y = y
 *         self.z = z             # <<<<<<<<<<<<<<
 *         self.step = step
 * 
 */
  __pyx_v_self->z = __pyx_v_z;

  /* "_marching_cubes_lewiner_cy.pyx":439
 *         self.y = y
 *         self.z = z
 *         self.step = step             # <<<<<<<<<<<<<<
 * 
 *         # Set values
 */
  __pyx_v_self->step = __pyx_v_step;

  /* "_marching_cubes_lewiner_cy.pyx":442
 * 
 *         # Set values
 *         self.v0 = v0 - isovalue             # <<<<<<<<<<<<<<
 *         self.v1 = v1 - isovalue
 *         self.v2 = v2 - isovalue
 */
  __pyx_v_self->v0 = (__pyx_v_v0 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":443
 *         # Set values
 *         self.v0 = v0 - isovalue
 *         self.v1 = v1 - isovalue             # <<<<<<<<<<<<<<
 *         self.v2 = v2 - isovalue
 *         self.v3 = v3 - isovalue
 */
  __pyx_v_self->v1 = (__pyx_v_v1 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":444
 *         self.v0 = v0 - isovalue
 *         self.v1 = v1 - isovalue
 *         self.v2 = v2 - isovalue             # <<<<<<<<<<<<<<
 *         self.v3 = v3 - isovalue
 *         self.v4 = v4 - isovalue
 */
  __pyx_v_self->v2 = (__pyx_v_v2 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":445
 *         self.v1 = v1 - isovalue
 *         self.v2 = v2 - isovalue
 *         self.v3 = v3 - isovalue             # <<<<<<<<<<<<<<
 *         self.v4 = v4 - isovalue
 *         self.v5 = v5 - isovalue
 */
  __pyx_v_self->v3 = (__pyx_v_v3 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":446
 *         self.v2 = v2 - isovalue
 *         self.v3 = v3 - isovalue
 *         self.v4 = v4 - isovalue             # <<<<<<<<<<<<<<
 *         self.v5 = v5 - isovalue
 *         self.v6 = v6 - isovalue
 */
  __pyx_v_self->v4 = (__pyx_v_v4 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":447
 *         self.v3 = v3 - isovalue
 *         self.v4 = v4 - isovalue
 *         self.v5 = v5 - isovalue             # <<<<<<<<<<<<<<
 *         self.v6 = v6 - isovalue
 *         self.v7 = v7 - isovalue
 */
  __pyx_v_self->v5 = (__pyx_v_v5 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":448
 *         self.v4 = v4 - isovalue
 *         self.v5 = v5 - isovalue
 *         self.v6 = v6 - isovalue             # <<<<<<<<<<<<<<
 *         self.v7 = v7 - isovalue
 * 
 */
  __pyx_v_self->v6 = (__pyx_v_v6 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":449
 *         self.v5 = v5 - isovalue
 *         self.v6 = v6 - isovalue
 *         self.v7 = v7 - isovalue             # <<<<<<<<<<<<<<
 * 
 *         # Calculate index
 */
  __pyx_v_self->v7 = (__pyx_v_v7 - __pyx_v_isovalue);

  /* "_marching_cubes_lewiner_cy.pyx":452
 * 
 *         # Calculate index
 *         cdef int index = 0             # <<<<<<<<<<<<<<
 *         if self.v0 > 0.0:   index += 1
 *         if self.v1 > 0.0:   index += 2
 */
  __pyx_v_index = 0;

  /* "_marching_cubes_lewiner_cy.pyx":453
 *         # Calculate index
 *         cdef int index = 0
 *         if self.v0 > 0.0:   index += 1             # <<<<<<<<<<<<<<
 *         if self.v1 > 0.0:   index += 2
 *         if self.v2 > 0.0:   index += 4
 */
  __pyx_t_1 = ((__pyx_v_self->v0 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 1);
  }

  /* "_marching_cubes_lewiner_cy.pyx":454
 *         cdef int index = 0
 *         if self.v0 > 0.0:   index += 1
 *         if self.v1 > 0.0:   index += 2             # <<<<<<<<<<<<<<
 *         if self.v2 > 0.0:   index += 4
 *         if self.v3 > 0.0:   index += 8
 */
  __pyx_t_1 = ((__pyx_v_self->v1 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 2);
  }

  /* "_marching_cubes_lewiner_cy.pyx":455
 *         if self.v0 > 0.0:   index += 1
 *         if self.v1 > 0.0:   index += 2
 *         if self.v2 > 0.0:   index += 4             # <<<<<<<<<<<<<<
 *         if self.v3 > 0.0:   index += 8
 *         if self.v4 > 0.0:   index += 16
 */
  __pyx_t_1 = ((__pyx_v_self->v2 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 4);
  }

  /* "_marching_cubes_lewiner_cy.pyx":456
 *         if self.v1 > 0.0:   index += 2
 *         if self.v2 > 0.0:   index += 4
 *         if self.v3 > 0.0:   index += 8             # <<<<<<<<<<<<<<
 *         if self.v4 > 0.0:   index += 16
 *         if self.v5 > 0.0:   index += 32
 */
  __pyx_t_1 = ((__pyx_v_self->v3 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 8);
  }

  /* "_marching_cubes_lewiner_cy.pyx":457
 *         if self.v2 > 0.0:   index += 4
 *         if self.v3 > 0.0:   index += 8
 *         if self.v4 > 0.0:   index += 16             # <<<<<<<<<<<<<<
 *         if self.v5 > 0.0:   index += 32
 *         if self.v6 > 0.0:   index += 64
 */
  __pyx_t_1 = ((__pyx_v_self->v4 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 16);
  }

  /* "_marching_cubes_lewiner_cy.pyx":458
 *         if self.v3 > 0.0:   index += 8
 *         if self.v4 > 0.0:   index += 16
 *         if self.v5 > 0.0:   index += 32             # <<<<<<<<<<<<<<
 *         if self.v6 > 0.0:   index += 64
 *         if self.v7 > 0.0:   index += 128
 */
  __pyx_t_1 = ((__pyx_v_self->v5 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 32);
  }

  /* "_marching_cubes_lewiner_cy.pyx":459
 *         if self.v4 > 0.0:   index += 16
 *         if self.v5 > 0.0:   index += 32
 *         if self.v6 > 0.0:   index += 64             # <<<<<<<<<<<<<<
 *         if self.v7 > 0.0:   index += 128
 *         self.index = index
 */
  __pyx_t_1 = ((__pyx_v_self->v6 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 64);
  }

  /* "_marching_cubes_lewiner_cy.pyx":460
 *         if self.v5 > 0.0:   index += 32
 *         if self.v6 > 0.0:   index += 64
 *         if self.v7 > 0.0:   index += 128             # <<<<<<<<<<<<<<
 *         self.index = index
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->v7 > 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_v_index = (__pyx_v_index + 0x80);
  }

  /* "_marching_cubes_lewiner_cy.pyx":461
 *         if self.v6 > 0.0:   index += 64
 *         if self.v7 > 0.0:   index += 128
 *         self.index = index             # <<<<<<<<<<<<<<
 * 
 *         # Reset c12
 */
  __pyx_v_self->index = __pyx_v_index;

  /* "_marching_cubes_lewiner_cy.pyx":464
 * 
 *         # Reset c12
 *         self.v12_calculated = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->v12_calculated = 0;

  /* "_marching_cubes_lewiner_cy.pyx":422
 * 
 * 
 *     cdef void set_cube(self,    double isovalue, int x, int y, int z, int step,             # <<<<<<<<<<<<<<
 *                                 double v0, double v1, double v2, double v3,
 *                                 double v4, double v5, double v6, double v7):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":467
 * 
 * 
 *     cdef bint check_triangles(self, Lut lut, int lutIndex, int nt):             # <<<<<<<<<<<<<<
 *         """ Check triangles.
 * 
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_nt) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_vi;
  int __pyx_v_result;
  PyObject *__pyx_v_fl_values = 0;
  int __pyx_v_index;
  int __pyx_v_fl_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_triangles", 0);

  /* "_marching_cubes_lewiner_cy.pyx":480
 *         cdef int i, j
 *         cdef int vi
 *         cdef int result = 0             # <<<<<<<<<<<<<<
 *         cdef list fl_values = []
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":481
 *         cdef int vi
 *         cdef int result = 0
 *         cdef list fl_values = []             # <<<<<<<<<<<<<<
 * 
 *         self.prepare_for_adding_triangles()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fl_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":483
 *         cdef list fl_values = []
 * 
 *         self.prepare_for_adding_triangles()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(nt):
 */
  ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->prepare_for_adding_triangles(__pyx_v_self);

  /* "_marching_cubes_lewiner_cy.pyx":485
 *         self.prepare_for_adding_triangles()
 * 
 *         for i in range(nt):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 */
  __pyx_t_2 = __pyx_v_nt;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "_marching_cubes_lewiner_cy.pyx":486
 * 
 *         for i in range(nt):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "_marching_cubes_lewiner_cy.pyx":488
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)             # <<<<<<<<<<<<<<
 *                 index = self.get_index_in_facelayer(vi)
 *                 fl_value = self.faceLayer[index]
 */
      __pyx_v_vi = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_lut->__pyx_vtab)->get2(__pyx_v_lut, __pyx_v_lutIndex, ((__pyx_v_i * 3) + __pyx_v_j));

      /* "_marching_cubes_lewiner_cy.pyx":489
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)
 *                 index = self.get_index_in_facelayer(vi)             # <<<<<<<<<<<<<<
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 */
      __pyx_v_index = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->get_index_in_facelayer(__pyx_v_self, __pyx_v_vi);

      /* "_marching_cubes_lewiner_cy.pyx":490
 *                 vi = lut.get2(lutIndex, i*3+j)
 *                 index = self.get_index_in_facelayer(vi)
 *                 fl_value = self.faceLayer[index]             # <<<<<<<<<<<<<<
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:
 */
      __pyx_v_fl_value = (__pyx_v_self->faceLayer[__pyx_v_index]);

      /* "_marching_cubes_lewiner_cy.pyx":492
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:             # <<<<<<<<<<<<<<
 *                     # print("True")
 *                     result += 1
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_fl_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_fl_values, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 492, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_6 = __pyx_t_8;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_fl_value >= 0) != 0);
      __pyx_t_6 = __pyx_t_8;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_6) {

        /* "_marching_cubes_lewiner_cy.pyx":494
 *                 if (not fl_value in fl_values) and fl_value >= 0:
 *                     # print("True")
 *                     result += 1             # <<<<<<<<<<<<<<
 *                 fl_values.append(fl_value)
 *         # print(result)
 */
        __pyx_v_result = (__pyx_v_result + 1);

        /* "_marching_cubes_lewiner_cy.pyx":492
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:             # <<<<<<<<<<<<<<
 *                     # print("True")
 *                     result += 1
 */
      }

      /* "_marching_cubes_lewiner_cy.pyx":495
 *                     # print("True")
 *                     result += 1
 *                 fl_values.append(fl_value)             # <<<<<<<<<<<<<<
 *         # print(result)
 *         return result
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_fl_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_fl_values, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":497
 *                 fl_values.append(fl_value)
 *         # print(result)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":467
 * 
 * 
 *     cdef bint check_triangles(self, Lut lut, int lutIndex, int nt):             # <<<<<<<<<<<<<<
 *         """ Check triangles.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.Cell.check_triangles", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fl_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":500
 * 
 * 
 *     cdef bint check_triangles2(self, Lut lut, int lutIndex, int lutIndex2, int nt):             # <<<<<<<<<<<<<<
 *         """ Same as check_triangles, except that now the geometry is in a LUT
 *         with 3 dimensions, and an extra index is provided.
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_lutIndex2, int __pyx_v_nt) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_vi;
  int __pyx_v_result;
  PyObject *__pyx_v_fl_values = 0;
  int __pyx_v_index;
  int __pyx_v_fl_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_triangles2", 0);

  /* "_marching_cubes_lewiner_cy.pyx":507
 *         cdef int i, j
 *         cdef int vi
 *         cdef int result = 0             # <<<<<<<<<<<<<<
 *         cdef list fl_values = []
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":508
 *         cdef int vi
 *         cdef int result = 0
 *         cdef list fl_values = []             # <<<<<<<<<<<<<<
 * 
 *         self.prepare_for_adding_triangles()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_fl_values = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":510
 *         cdef list fl_values = []
 * 
 *         self.prepare_for_adding_triangles()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(nt):
 */
  ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->prepare_for_adding_triangles(__pyx_v_self);

  /* "_marching_cubes_lewiner_cy.pyx":512
 *         self.prepare_for_adding_triangles()
 * 
 *         for i in range(nt):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 */
  __pyx_t_2 = __pyx_v_nt;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "_marching_cubes_lewiner_cy.pyx":513
 * 
 *         for i in range(nt):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "_marching_cubes_lewiner_cy.pyx":515
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)             # <<<<<<<<<<<<<<
 *                 index = self.get_index_in_facelayer(vi)
 *                 fl_value = self.faceLayer[index]
 */
      __pyx_v_vi = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_lut->__pyx_vtab)->get3(__pyx_v_lut, __pyx_v_lutIndex, __pyx_v_lutIndex2, ((__pyx_v_i * 3) + __pyx_v_j));

      /* "_marching_cubes_lewiner_cy.pyx":516
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)
 *                 index = self.get_index_in_facelayer(vi)             # <<<<<<<<<<<<<<
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 */
      __pyx_v_index = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->get_index_in_facelayer(__pyx_v_self, __pyx_v_vi);

      /* "_marching_cubes_lewiner_cy.pyx":517
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)
 *                 index = self.get_index_in_facelayer(vi)
 *                 fl_value = self.faceLayer[index]             # <<<<<<<<<<<<<<
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:
 */
      __pyx_v_fl_value = (__pyx_v_self->faceLayer[__pyx_v_index]);

      /* "_marching_cubes_lewiner_cy.pyx":519
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:             # <<<<<<<<<<<<<<
 *                     # print("True")
 *                     result += 1
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_fl_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_fl_values, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__pyx_t_7 != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_6 = __pyx_t_8;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_fl_value >= 0) != 0);
      __pyx_t_6 = __pyx_t_8;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_6) {

        /* "_marching_cubes_lewiner_cy.pyx":521
 *                 if (not fl_value in fl_values) and fl_value >= 0:
 *                     # print("True")
 *                     result += 1             # <<<<<<<<<<<<<<
 *                 fl_values.append(fl_value)
 *         # print(result)
 */
        __pyx_v_result = (__pyx_v_result + 1);

        /* "_marching_cubes_lewiner_cy.pyx":519
 *                 fl_value = self.faceLayer[index]
 *                 # print(index, fl_value)
 *                 if (not fl_value in fl_values) and fl_value >= 0:             # <<<<<<<<<<<<<<
 *                     # print("True")
 *                     result += 1
 */
      }

      /* "_marching_cubes_lewiner_cy.pyx":522
 *                     # print("True")
 *                     result += 1
 *                 fl_values.append(fl_value)             # <<<<<<<<<<<<<<
 *         # print(result)
 *         return result
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_fl_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_fl_values, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 522, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":524
 *                 fl_values.append(fl_value)
 *         # print(result)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":500
 * 
 * 
 *     cdef bint check_triangles2(self, Lut lut, int lutIndex, int lutIndex2, int nt):             # <<<<<<<<<<<<<<
 *         """ Same as check_triangles, except that now the geometry is in a LUT
 *         with 3 dimensions, and an extra index is provided.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.Cell.check_triangles2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fl_values);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":528
 * 
 * 
 *     cdef bint add_triangles(self, Lut lut, int lutIndex, int nt):             # <<<<<<<<<<<<<<
 *         """ Add triangles.
 * 
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_nt) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_vi;
  int __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("add_triangles", 0);

  /* "_marching_cubes_lewiner_cy.pyx":541
 *         cdef int i, j
 *         cdef int vi
 *         cdef bint result = False             # <<<<<<<<<<<<<<
 *         # cdef list indices = []
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":544
 *         # cdef list indices = []
 * 
 *         self.prepare_for_adding_triangles()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(nt):
 */
  ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->prepare_for_adding_triangles(__pyx_v_self);

  /* "_marching_cubes_lewiner_cy.pyx":546
 *         self.prepare_for_adding_triangles()
 * 
 *         for i in range(nt):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 */
  __pyx_t_1 = __pyx_v_nt;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":547
 * 
 *         for i in range(nt):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "_marching_cubes_lewiner_cy.pyx":549
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)             # <<<<<<<<<<<<<<
 *                 self._add_face_from_edge_index(vi)
 *                 # index, fl_value = self._add_face_from_edge_index(vi)
 */
      __pyx_v_vi = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_lut->__pyx_vtab)->get2(__pyx_v_lut, __pyx_v_lutIndex, ((__pyx_v_i * 3) + __pyx_v_j));

      /* "_marching_cubes_lewiner_cy.pyx":550
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get2(lutIndex, i*3+j)
 *                 self._add_face_from_edge_index(vi)             # <<<<<<<<<<<<<<
 *                 # index, fl_value = self._add_face_from_edge_index(vi)
 *                 # print(index, fl_value)
 */
      (void)(((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->_add_face_from_edge_index(__pyx_v_self, __pyx_v_vi));
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":558
 *                 #     result = True
 *                 # indices.append(index)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":528
 * 
 * 
 *     cdef bint add_triangles(self, Lut lut, int lutIndex, int nt):             # <<<<<<<<<<<<<<
 *         """ Add triangles.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":561
 * 
 * 
 *     cdef bint add_triangles2(self, Lut lut, int lutIndex, int lutIndex2, int nt):             # <<<<<<<<<<<<<<
 *         """ Same as add_triangles, except that now the geometry is in a LUT
 *         with 3 dimensions, and an extra index is provided.
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_lut, int __pyx_v_lutIndex, int __pyx_v_lutIndex2, int __pyx_v_nt) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_vi;
  int __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("add_triangles2", 0);

  /* "_marching_cubes_lewiner_cy.pyx":568
 *         cdef int i, j
 *         cdef int vi
 *         cdef bint result = False             # <<<<<<<<<<<<<<
 *         # cdef list indices = []
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":571
 *         # cdef list indices = []
 * 
 *         self.prepare_for_adding_triangles()             # <<<<<<<<<<<<<<
 * 
 *         for i in range(nt):
 */
  ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->prepare_for_adding_triangles(__pyx_v_self);

  /* "_marching_cubes_lewiner_cy.pyx":573
 *         self.prepare_for_adding_triangles()
 * 
 *         for i in range(nt):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 */
  __pyx_t_1 = __pyx_v_nt;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":574
 * 
 *         for i in range(nt):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "_marching_cubes_lewiner_cy.pyx":576
 *             for j in range(3):
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)             # <<<<<<<<<<<<<<
 *                 self._add_face_from_edge_index(vi)
 *                 # index, fl_value = self._add_face_from_edge_index(vi)
 */
      __pyx_v_vi = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_lut->__pyx_vtab)->get3(__pyx_v_lut, __pyx_v_lutIndex, __pyx_v_lutIndex2, ((__pyx_v_i * 3) + __pyx_v_j));

      /* "_marching_cubes_lewiner_cy.pyx":577
 *                 # Get two sides for each element in this vertex
 *                 vi = lut.get3(lutIndex, lutIndex2, i*3+j)
 *                 self._add_face_from_edge_index(vi)             # <<<<<<<<<<<<<<
 *                 # index, fl_value = self._add_face_from_edge_index(vi)
 *                 # print(index, fl_value)
 */
      (void)(((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->_add_face_from_edge_index(__pyx_v_self, __pyx_v_vi));
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":585
 *                 #     result = True
 *                 # indices.append(index)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     ## Used internally
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":561
 * 
 * 
 *     cdef bint add_triangles2(self, Lut lut, int lutIndex, int lutIndex2, int nt):             # <<<<<<<<<<<<<<
 *         """ Same as add_triangles, except that now the geometry is in a LUT
 *         with 3 dimensions, and an extra index is provided.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":589
 *     ## Used internally
 * 
 *     cdef (int, int) _add_face_from_edge_index(self, int vi):             # <<<<<<<<<<<<<<
 *         """ Add one face from an edge index. Only adds a face if the
 *         vertex already exists. Otherwise also adds a vertex and applies
 */

static __pyx_ctuple_int__and_int __pyx_f_26_marching_cubes_lewiner_cy_4Cell__add_face_from_edge_index(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vi) {
  int __pyx_v_indexInVertexArray;
  int __pyx_v_indexInFaceLayer;
  int __pyx_v_dx1;
  int __pyx_v_dy1;
  int __pyx_v_dz1;
  int __pyx_v_dx2;
  int __pyx_v_dy2;
  int __pyx_v_dz2;
  int __pyx_v_index1;
  int __pyx_v_index2;
  double __pyx_v_tmpf1;
  double __pyx_v_tmpf2;
  double __pyx_v_fx;
  double __pyx_v_fy;
  double __pyx_v_fz;
  double __pyx_v_ff;
  double __pyx_v_stp;
  int __pyx_v_fl_value;
  __pyx_ctuple_int__and_int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  __pyx_ctuple_int__and_int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_face_from_edge_index", 0);

  /* "_marching_cubes_lewiner_cy.pyx":602
 *         cdef double tmpf1, tmpf2
 *         cdef double fx, fy, fz, ff
 *         cdef double stp = <double>self.step             # <<<<<<<<<<<<<<
 * 
 *         # Get index in the face layer and corresponding vertex number
 */
  __pyx_v_stp = ((double)__pyx_v_self->step);

  /* "_marching_cubes_lewiner_cy.pyx":605
 * 
 *         # Get index in the face layer and corresponding vertex number
 *         indexInFaceLayer = self.get_index_in_facelayer(vi)             # <<<<<<<<<<<<<<
 *         indexInVertexArray = self.faceLayer[indexInFaceLayer]
 *         fl_value = self.faceLayer[indexInFaceLayer]
 */
  __pyx_v_indexInFaceLayer = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->get_index_in_facelayer(__pyx_v_self, __pyx_v_vi);

  /* "_marching_cubes_lewiner_cy.pyx":606
 *         # Get index in the face layer and corresponding vertex number
 *         indexInFaceLayer = self.get_index_in_facelayer(vi)
 *         indexInVertexArray = self.faceLayer[indexInFaceLayer]             # <<<<<<<<<<<<<<
 *         fl_value = self.faceLayer[indexInFaceLayer]
 * 
 */
  __pyx_v_indexInVertexArray = (__pyx_v_self->faceLayer[__pyx_v_indexInFaceLayer]);

  /* "_marching_cubes_lewiner_cy.pyx":607
 *         indexInFaceLayer = self.get_index_in_facelayer(vi)
 *         indexInVertexArray = self.faceLayer[indexInFaceLayer]
 *         fl_value = self.faceLayer[indexInFaceLayer]             # <<<<<<<<<<<<<<
 * 
 *         # If we have the center vertex, we have things pre-calculated,
 */
  __pyx_v_fl_value = (__pyx_v_self->faceLayer[__pyx_v_indexInFaceLayer]);

  /* "_marching_cubes_lewiner_cy.pyx":614
 *         # or not.
 * 
 *         if vi == 12: # center vertex             # <<<<<<<<<<<<<<
 *             if self.v12_calculated == 0:
 *                 self.calculate_center_vertex()
 */
  __pyx_t_1 = ((__pyx_v_vi == 12) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":615
 * 
 *         if vi == 12: # center vertex
 *             if self.v12_calculated == 0:             # <<<<<<<<<<<<<<
 *                 self.calculate_center_vertex()
 *             if indexInVertexArray >= 0:
 */
    __pyx_t_1 = ((__pyx_v_self->v12_calculated == 0) != 0);
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":616
 *         if vi == 12: # center vertex
 *             if self.v12_calculated == 0:
 *                 self.calculate_center_vertex()             # <<<<<<<<<<<<<<
 *             if indexInVertexArray >= 0:
 *                 # Vertex already calculated, only need to add face and gradient
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->calculate_center_vertex(__pyx_v_self);

      /* "_marching_cubes_lewiner_cy.pyx":615
 * 
 *         if vi == 12: # center vertex
 *             if self.v12_calculated == 0:             # <<<<<<<<<<<<<<
 *                 self.calculate_center_vertex()
 *             if indexInVertexArray >= 0:
 */
    }

    /* "_marching_cubes_lewiner_cy.pyx":617
 *             if self.v12_calculated == 0:
 *                 self.calculate_center_vertex()
 *             if indexInVertexArray >= 0:             # <<<<<<<<<<<<<<
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
    __pyx_t_1 = ((__pyx_v_indexInVertexArray >= 0) != 0);
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":619
 *             if indexInVertexArray >= 0:
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)             # <<<<<<<<<<<<<<
 *                 self.add_gradient(indexInVertexArray, self.v12_xg, self.v12_yg, self.v12_zg)
 *             else:
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_face(__pyx_v_self, __pyx_v_indexInVertexArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":620
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient(indexInVertexArray, self.v12_xg, self.v12_yg, self.v12_zg)             # <<<<<<<<<<<<<<
 *             else:
 *                 # Add precalculated center vertex position (is interpolated)
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_self->v12_xg, __pyx_v_self->v12_yg, __pyx_v_self->v12_zg);

      /* "_marching_cubes_lewiner_cy.pyx":617
 *             if self.v12_calculated == 0:
 *                 self.calculate_center_vertex()
 *             if indexInVertexArray >= 0:             # <<<<<<<<<<<<<<
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
      goto __pyx_L5;
    }

    /* "_marching_cubes_lewiner_cy.pyx":623
 *             else:
 *                 # Add precalculated center vertex position (is interpolated)
 *                 indexInVertexArray = self.add_vertex( self.v12_x, self.v12_y, self.v12_z)             # <<<<<<<<<<<<<<
 *                 # Update face layer
 *                 self.faceLayer[indexInFaceLayer] = indexInVertexArray
 */
    /*else*/ {
      __pyx_v_indexInVertexArray = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_vertex(__pyx_v_self, __pyx_v_self->v12_x, __pyx_v_self->v12_y, __pyx_v_self->v12_z);

      /* "_marching_cubes_lewiner_cy.pyx":625
 *                 indexInVertexArray = self.add_vertex( self.v12_x, self.v12_y, self.v12_z)
 *                 # Update face layer
 *                 self.faceLayer[indexInFaceLayer] = indexInVertexArray             # <<<<<<<<<<<<<<
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
      (__pyx_v_self->faceLayer[__pyx_v_indexInFaceLayer]) = __pyx_v_indexInVertexArray;

      /* "_marching_cubes_lewiner_cy.pyx":627
 *                 self.faceLayer[indexInFaceLayer] = indexInVertexArray
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)             # <<<<<<<<<<<<<<
 *                 self.add_gradient(indexInVertexArray, self.v12_xg, self.v12_yg, self.v12_zg)
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_face(__pyx_v_self, __pyx_v_indexInVertexArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":628
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient(indexInVertexArray, self.v12_xg, self.v12_yg, self.v12_zg)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_self->v12_xg, __pyx_v_self->v12_yg, __pyx_v_self->v12_zg);
    }
    __pyx_L5:;

    /* "_marching_cubes_lewiner_cy.pyx":614
 *         # or not.
 * 
 *         if vi == 12: # center vertex             # <<<<<<<<<<<<<<
 *             if self.v12_calculated == 0:
 *                 self.calculate_center_vertex()
 */
    goto __pyx_L3;
  }

  /* "_marching_cubes_lewiner_cy.pyx":633
 * 
 *             # Get relative edge indices for x, y and z
 *             dx1, dx2 = self.luts.EDGESRELX.get2(vi,0), self.luts.EDGESRELX.get2(vi,1)             # <<<<<<<<<<<<<<
 *             dy1, dy2 = self.luts.EDGESRELY.get2(vi,0), self.luts.EDGESRELY.get2(vi,1)
 *             dz1, dz2 = self.luts.EDGESRELZ.get2(vi,0), self.luts.EDGESRELZ.get2(vi,1)
 */
  /*else*/ {
    __pyx_t_3 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELX->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELX, __pyx_v_vi, 0);
    __pyx_t_4 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELX->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELX, __pyx_v_vi, 1);
    __pyx_v_dx1 = __pyx_t_3;
    __pyx_v_dx2 = __pyx_t_4;

    /* "_marching_cubes_lewiner_cy.pyx":634
 *             # Get relative edge indices for x, y and z
 *             dx1, dx2 = self.luts.EDGESRELX.get2(vi,0), self.luts.EDGESRELX.get2(vi,1)
 *             dy1, dy2 = self.luts.EDGESRELY.get2(vi,0), self.luts.EDGESRELY.get2(vi,1)             # <<<<<<<<<<<<<<
 *             dz1, dz2 = self.luts.EDGESRELZ.get2(vi,0), self.luts.EDGESRELZ.get2(vi,1)
 *             # Make two vertex indices
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELY->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELY, __pyx_v_vi, 0);
    __pyx_t_3 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELY->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELY, __pyx_v_vi, 1);
    __pyx_v_dy1 = __pyx_t_4;
    __pyx_v_dy2 = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":635
 *             dx1, dx2 = self.luts.EDGESRELX.get2(vi,0), self.luts.EDGESRELX.get2(vi,1)
 *             dy1, dy2 = self.luts.EDGESRELY.get2(vi,0), self.luts.EDGESRELY.get2(vi,1)
 *             dz1, dz2 = self.luts.EDGESRELZ.get2(vi,0), self.luts.EDGESRELZ.get2(vi,1)             # <<<<<<<<<<<<<<
 *             # Make two vertex indices
 *             index1 = dz1*4 + dy1*2 + dx1
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELZ->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELZ, __pyx_v_vi, 0);
    __pyx_t_4 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self->luts->EDGESRELZ->__pyx_vtab)->get2(__pyx_v_self->luts->EDGESRELZ, __pyx_v_vi, 1);
    __pyx_v_dz1 = __pyx_t_3;
    __pyx_v_dz2 = __pyx_t_4;

    /* "_marching_cubes_lewiner_cy.pyx":637
 *             dz1, dz2 = self.luts.EDGESRELZ.get2(vi,0), self.luts.EDGESRELZ.get2(vi,1)
 *             # Make two vertex indices
 *             index1 = dz1*4 + dy1*2 + dx1             # <<<<<<<<<<<<<<
 *             index2 = dz2*4 + dy2*2 + dx2
 *             # Define strength of both corners
 */
    __pyx_v_index1 = (((__pyx_v_dz1 * 4) + (__pyx_v_dy1 * 2)) + __pyx_v_dx1);

    /* "_marching_cubes_lewiner_cy.pyx":638
 *             # Make two vertex indices
 *             index1 = dz1*4 + dy1*2 + dx1
 *             index2 = dz2*4 + dy2*2 + dx2             # <<<<<<<<<<<<<<
 *             # Define strength of both corners
 *             tmpf1 = 1.0 / (FLT_EPSILON + dabs(self.vv[index1]))
 */
    __pyx_v_index2 = (((__pyx_v_dz2 * 4) + (__pyx_v_dy2 * 2)) + __pyx_v_dx2);

    /* "_marching_cubes_lewiner_cy.pyx":640
 *             index2 = dz2*4 + dy2*2 + dx2
 *             # Define strength of both corners
 *             tmpf1 = 1.0 / (FLT_EPSILON + dabs(self.vv[index1]))             # <<<<<<<<<<<<<<
 *             tmpf2 = 1.0 / (FLT_EPSILON + dabs(self.vv[index2]))
 * 
 */
    __pyx_v_tmpf1 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs((__pyx_v_self->vv[__pyx_v_index1]))));

    /* "_marching_cubes_lewiner_cy.pyx":641
 *             # Define strength of both corners
 *             tmpf1 = 1.0 / (FLT_EPSILON + dabs(self.vv[index1]))
 *             tmpf2 = 1.0 / (FLT_EPSILON + dabs(self.vv[index2]))             # <<<<<<<<<<<<<<
 * 
 *             # print('indexInVertexArray', self.x, self.y, self.z, '-', vi, indexInVertexArray, indexInFaceLayer)
 */
    __pyx_v_tmpf2 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs((__pyx_v_self->vv[__pyx_v_index2]))));

    /* "_marching_cubes_lewiner_cy.pyx":645
 *             # print('indexInVertexArray', self.x, self.y, self.z, '-', vi, indexInVertexArray, indexInFaceLayer)
 * 
 *             if indexInVertexArray >= 0:             # <<<<<<<<<<<<<<
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
    __pyx_t_1 = ((__pyx_v_indexInVertexArray >= 0) != 0);
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":647
 *             if indexInVertexArray >= 0:
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)             # <<<<<<<<<<<<<<
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_face(__pyx_v_self, __pyx_v_indexInVertexArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":648
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)             # <<<<<<<<<<<<<<
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)
 * 
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient_from_index(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_index1, __pyx_v_tmpf1);

      /* "_marching_cubes_lewiner_cy.pyx":649
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient_from_index(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_index2, __pyx_v_tmpf2);

      /* "_marching_cubes_lewiner_cy.pyx":645
 *             # print('indexInVertexArray', self.x, self.y, self.z, '-', vi, indexInVertexArray, indexInFaceLayer)
 * 
 *             if indexInVertexArray >= 0:             # <<<<<<<<<<<<<<
 *                 # Vertex already calculated, only need to add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
      goto __pyx_L6;
    }

    /* "_marching_cubes_lewiner_cy.pyx":653
 *             else:
 *                 # Interpolate by applying a kind of center-of-mass method
 *                 fx, fy, fz, ff = 0.0, 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 *                 fx += <double>dx1 * tmpf1;  fy += <double>dy1 * tmpf1;  fz += <double>dz1 * tmpf1;  ff += tmpf1
 *                 fx += <double>dx2 * tmpf2;  fy += <double>dy2 * tmpf2;  fz += <double>dz2 * tmpf2;  ff += tmpf2
 */
    /*else*/ {
      __pyx_t_5 = 0.0;
      __pyx_t_6 = 0.0;
      __pyx_t_7 = 0.0;
      __pyx_t_8 = 0.0;
      __pyx_v_fx = __pyx_t_5;
      __pyx_v_fy = __pyx_t_6;
      __pyx_v_fz = __pyx_t_7;
      __pyx_v_ff = __pyx_t_8;

      /* "_marching_cubes_lewiner_cy.pyx":654
 *                 # Interpolate by applying a kind of center-of-mass method
 *                 fx, fy, fz, ff = 0.0, 0.0, 0.0, 0.0
 *                 fx += <double>dx1 * tmpf1;  fy += <double>dy1 * tmpf1;  fz += <double>dz1 * tmpf1;  ff += tmpf1             # <<<<<<<<<<<<<<
 *                 fx += <double>dx2 * tmpf2;  fy += <double>dy2 * tmpf2;  fz += <double>dz2 * tmpf2;  ff += tmpf2
 * 
 */
      __pyx_v_fx = (__pyx_v_fx + (((double)__pyx_v_dx1) * __pyx_v_tmpf1));
      __pyx_v_fy = (__pyx_v_fy + (((double)__pyx_v_dy1) * __pyx_v_tmpf1));
      __pyx_v_fz = (__pyx_v_fz + (((double)__pyx_v_dz1) * __pyx_v_tmpf1));
      __pyx_v_ff = (__pyx_v_ff + __pyx_v_tmpf1);

      /* "_marching_cubes_lewiner_cy.pyx":655
 *                 fx, fy, fz, ff = 0.0, 0.0, 0.0, 0.0
 *                 fx += <double>dx1 * tmpf1;  fy += <double>dy1 * tmpf1;  fz += <double>dz1 * tmpf1;  ff += tmpf1
 *                 fx += <double>dx2 * tmpf2;  fy += <double>dy2 * tmpf2;  fz += <double>dz2 * tmpf2;  ff += tmpf2             # <<<<<<<<<<<<<<
 * 
 *                 # Add vertex
 */
      __pyx_v_fx = (__pyx_v_fx + (((double)__pyx_v_dx2) * __pyx_v_tmpf2));
      __pyx_v_fy = (__pyx_v_fy + (((double)__pyx_v_dy2) * __pyx_v_tmpf2));
      __pyx_v_fz = (__pyx_v_fz + (((double)__pyx_v_dz2) * __pyx_v_tmpf2));
      __pyx_v_ff = (__pyx_v_ff + __pyx_v_tmpf2);

      /* "_marching_cubes_lewiner_cy.pyx":658
 * 
 *                 # Add vertex
 *                 indexInVertexArray = self.add_vertex(             # <<<<<<<<<<<<<<
 *                                 <double>self.x + stp*fx/ff,
 *                                 <double>self.y + stp*fy/ff,
 */
      __pyx_v_indexInVertexArray = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_vertex(__pyx_v_self, (((double)__pyx_v_self->x) + ((__pyx_v_stp * __pyx_v_fx) / __pyx_v_ff)), (((double)__pyx_v_self->y) + ((__pyx_v_stp * __pyx_v_fy) / __pyx_v_ff)), (((double)__pyx_v_self->z) + ((__pyx_v_stp * __pyx_v_fz) / __pyx_v_ff)));

      /* "_marching_cubes_lewiner_cy.pyx":663
 *                                 <double>self.z + stp*fz/ff )
 *                 # Update face layer
 *                 self.faceLayer[indexInFaceLayer] = indexInVertexArray             # <<<<<<<<<<<<<<
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)
 */
      (__pyx_v_self->faceLayer[__pyx_v_indexInFaceLayer]) = __pyx_v_indexInVertexArray;

      /* "_marching_cubes_lewiner_cy.pyx":665
 *                 self.faceLayer[indexInFaceLayer] = indexInVertexArray
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)             # <<<<<<<<<<<<<<
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_face(__pyx_v_self, __pyx_v_indexInVertexArray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":666
 *                 # Add face and gradient
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)             # <<<<<<<<<<<<<<
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)
 * 
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient_from_index(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_index1, __pyx_v_tmpf1);

      /* "_marching_cubes_lewiner_cy.pyx":667
 *                 self.add_face(indexInVertexArray)
 *                 self.add_gradient_from_index(indexInVertexArray, index1, tmpf1)
 *                 self.add_gradient_from_index(indexInVertexArray, index2, tmpf2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self->__pyx_vtab)->add_gradient_from_index(__pyx_v_self, __pyx_v_indexInVertexArray, __pyx_v_index2, __pyx_v_tmpf2);
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  /* "_marching_cubes_lewiner_cy.pyx":675
 * #                         self.z + 0.5* dz1 + 0.5 * dz2 )
 * 
 *         return indexInFaceLayer, fl_value             # <<<<<<<<<<<<<<
 * 
 *     cdef int get_index_in_facelayer(self, int vi):
 */
  __pyx_t_9.f0 = __pyx_v_indexInFaceLayer;
  __pyx_t_9.f1 = __pyx_v_fl_value;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":589
 *     ## Used internally
 * 
 *     cdef (int, int) _add_face_from_edge_index(self, int vi):             # <<<<<<<<<<<<<<
 *         """ Add one face from an edge index. Only adds a face if the
 *         vertex already exists. Otherwise also adds a vertex and applies
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.Cell._add_face_from_edge_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":677
 *         return indexInFaceLayer, fl_value
 * 
 *     cdef int get_index_in_facelayer(self, int vi):             # <<<<<<<<<<<<<<
 *         """
 *         Get the index of a vertex position, given the edge on which it lies.
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_4Cell_get_index_in_facelayer(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, int __pyx_v_vi) {
  int __pyx_v_i;
  int __pyx_v_j;
  CYTHON_UNUSED int __pyx_v_vi_;
  int __pyx_v_k;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_index_in_facelayer", 0);

  /* "_marching_cubes_lewiner_cy.pyx":707
 *         # Init indices, both are corrected below
 *         # cdef int i = self.nx * self.y + self.x  # Index of cube to get vertex at
 *         cdef int i = self.ny*self.nx*self.z + self.nx * self.y + self.x  # Index of cube to get vertex at             # <<<<<<<<<<<<<<
 *         cdef int j = 0 # Vertex number for that cell
 *         cdef int vi_ = vi
 */
  __pyx_v_i = ((((__pyx_v_self->ny * __pyx_v_self->nx) * __pyx_v_self->z) + (__pyx_v_self->nx * __pyx_v_self->y)) + __pyx_v_self->x);

  /* "_marching_cubes_lewiner_cy.pyx":708
 *         # cdef int i = self.nx * self.y + self.x  # Index of cube to get vertex at
 *         cdef int i = self.ny*self.nx*self.z + self.nx * self.y + self.x  # Index of cube to get vertex at
 *         cdef int j = 0 # Vertex number for that cell             # <<<<<<<<<<<<<<
 *         cdef int vi_ = vi
 * 
 */
  __pyx_v_j = 0;

  /* "_marching_cubes_lewiner_cy.pyx":709
 *         cdef int i = self.ny*self.nx*self.z + self.nx * self.y + self.x  # Index of cube to get vertex at
 *         cdef int j = 0 # Vertex number for that cell
 *         cdef int vi_ = vi             # <<<<<<<<<<<<<<
 * 
 *         # cdef int *faceLayer
 */
  __pyx_v_vi_ = __pyx_v_vi;

  /* "_marching_cubes_lewiner_cy.pyx":712
 * 
 *         # cdef int *faceLayer
 *         cdef int k = 0 #Defines whether to go to a higher z or not             # <<<<<<<<<<<<<<
 * 
 *         # Select either upper or lower half
 */
  __pyx_v_k = 0;

  /* "_marching_cubes_lewiner_cy.pyx":715
 * 
 *         # Select either upper or lower half
 *         if vi < 8:             # <<<<<<<<<<<<<<
 *             #  8 horizontal edges
 *             if vi < 4:
 */
  __pyx_t_1 = ((__pyx_v_vi < 8) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":717
 *         if vi < 8:
 *             #  8 horizontal edges
 *             if vi < 4:             # <<<<<<<<<<<<<<
 *                 # faceLayer = self.faceLayer1
 *                 k = 0
 */
    __pyx_t_1 = ((__pyx_v_vi < 4) != 0);
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":719
 *             if vi < 4:
 *                 # faceLayer = self.faceLayer1
 *                 k = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 vi -= 4
 */
      __pyx_v_k = 0;

      /* "_marching_cubes_lewiner_cy.pyx":717
 *         if vi < 8:
 *             #  8 horizontal edges
 *             if vi < 4:             # <<<<<<<<<<<<<<
 *                 # faceLayer = self.faceLayer1
 *                 k = 0
 */
      goto __pyx_L4;
    }

    /* "_marching_cubes_lewiner_cy.pyx":721
 *                 k = 0
 *             else:
 *                 vi -= 4             # <<<<<<<<<<<<<<
 *                 # faceLayer = self.faceLayer2
 *                 k = 1
 */
    /*else*/ {
      __pyx_v_vi = (__pyx_v_vi - 4);

      /* "_marching_cubes_lewiner_cy.pyx":723
 *                 vi -= 4
 *                 # faceLayer = self.faceLayer2
 *                 k = 1             # <<<<<<<<<<<<<<
 * 
 *             # Calculate actual index based on edge
 */
      __pyx_v_k = 1;
    }
    __pyx_L4:;

    /* "_marching_cubes_lewiner_cy.pyx":727
 *             # Calculate actual index based on edge
 *             #if vi == 0: pass  # no step
 *             if vi == 1:  # step in x             # <<<<<<<<<<<<<<
 *                 i += self.step
 *                 j = 1
 */
    switch (__pyx_v_vi) {
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":728
 *             #if vi == 0: pass  # no step
 *             if vi == 1:  # step in x
 *                 i += self.step             # <<<<<<<<<<<<<<
 *                 j = 1
 *             elif vi == 2:  # step in y
 */
      __pyx_v_i = (__pyx_v_i + __pyx_v_self->step);

      /* "_marching_cubes_lewiner_cy.pyx":729
 *             if vi == 1:  # step in x
 *                 i += self.step
 *                 j = 1             # <<<<<<<<<<<<<<
 *             elif vi == 2:  # step in y
 *                 i += self.nx * self.step
 */
      __pyx_v_j = 1;

      /* "_marching_cubes_lewiner_cy.pyx":727
 *             # Calculate actual index based on edge
 *             #if vi == 0: pass  # no step
 *             if vi == 1:  # step in x             # <<<<<<<<<<<<<<
 *                 i += self.step
 *                 j = 1
 */
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":731
 *                 j = 1
 *             elif vi == 2:  # step in y
 *                 i += self.nx * self.step             # <<<<<<<<<<<<<<
 *             elif vi == 3:  # no step
 *                 j = 1
 */
      __pyx_v_i = (__pyx_v_i + (__pyx_v_self->nx * __pyx_v_self->step));

      /* "_marching_cubes_lewiner_cy.pyx":730
 *                 i += self.step
 *                 j = 1
 *             elif vi == 2:  # step in y             # <<<<<<<<<<<<<<
 *                 i += self.nx * self.step
 *             elif vi == 3:  # no step
 */
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":733
 *                 i += self.nx * self.step
 *             elif vi == 3:  # no step
 *                 j = 1             # <<<<<<<<<<<<<<
 * 
 *         elif vi < 12:
 */
      __pyx_v_j = 1;

      /* "_marching_cubes_lewiner_cy.pyx":732
 *             elif vi == 2:  # step in y
 *                 i += self.nx * self.step
 *             elif vi == 3:  # no step             # <<<<<<<<<<<<<<
 *                 j = 1
 * 
 */
      break;
      default: break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":715
 * 
 *         # Select either upper or lower half
 *         if vi < 8:             # <<<<<<<<<<<<<<
 *             #  8 horizontal edges
 *             if vi < 4:
 */
    goto __pyx_L3;
  }

  /* "_marching_cubes_lewiner_cy.pyx":735
 *                 j = 1
 * 
 *         elif vi < 12:             # <<<<<<<<<<<<<<
 *             # 4 vertical edges
 *             # faceLayer = self.faceLayer1
 */
  __pyx_t_1 = ((__pyx_v_vi < 12) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":738
 *             # 4 vertical edges
 *             # faceLayer = self.faceLayer1
 *             k = 0             # <<<<<<<<<<<<<<
 *             j = 2
 * 
 */
    __pyx_v_k = 0;

    /* "_marching_cubes_lewiner_cy.pyx":739
 *             # faceLayer = self.faceLayer1
 *             k = 0
 *             j = 2             # <<<<<<<<<<<<<<
 * 
 *             #if vi == 8: pass # no step
 */
    __pyx_v_j = 2;

    /* "_marching_cubes_lewiner_cy.pyx":742
 * 
 *             #if vi == 8: pass # no step
 *             if vi == 9:   # step in x             # <<<<<<<<<<<<<<
 *                 i += self.step
 *             elif vi == 10:   # step in x and y
 */
    switch (__pyx_v_vi) {
      case 9:

      /* "_marching_cubes_lewiner_cy.pyx":743
 *             #if vi == 8: pass # no step
 *             if vi == 9:   # step in x
 *                 i += self.step             # <<<<<<<<<<<<<<
 *             elif vi == 10:   # step in x and y
 *                 i += self.nx * self.step + self.step
 */
      __pyx_v_i = (__pyx_v_i + __pyx_v_self->step);

      /* "_marching_cubes_lewiner_cy.pyx":742
 * 
 *             #if vi == 8: pass # no step
 *             if vi == 9:   # step in x             # <<<<<<<<<<<<<<
 *                 i += self.step
 *             elif vi == 10:   # step in x and y
 */
      break;
      case 10:

      /* "_marching_cubes_lewiner_cy.pyx":745
 *                 i += self.step
 *             elif vi == 10:   # step in x and y
 *                 i += self.nx * self.step + self.step             # <<<<<<<<<<<<<<
 *             elif vi == 11:  # step in y
 *                 i += self.nx * self.step
 */
      __pyx_v_i = (__pyx_v_i + ((__pyx_v_self->nx * __pyx_v_self->step) + __pyx_v_self->step));

      /* "_marching_cubes_lewiner_cy.pyx":744
 *             if vi == 9:   # step in x
 *                 i += self.step
 *             elif vi == 10:   # step in x and y             # <<<<<<<<<<<<<<
 *                 i += self.nx * self.step + self.step
 *             elif vi == 11:  # step in y
 */
      break;
      case 11:

      /* "_marching_cubes_lewiner_cy.pyx":747
 *                 i += self.nx * self.step + self.step
 *             elif vi == 11:  # step in y
 *                 i += self.nx * self.step             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __pyx_v_i = (__pyx_v_i + (__pyx_v_self->nx * __pyx_v_self->step));

      /* "_marching_cubes_lewiner_cy.pyx":746
 *             elif vi == 10:   # step in x and y
 *                 i += self.nx * self.step + self.step
 *             elif vi == 11:  # step in y             # <<<<<<<<<<<<<<
 *                 i += self.nx * self.step
 * 
 */
      break;
      default: break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":735
 *                 j = 1
 * 
 *         elif vi < 12:             # <<<<<<<<<<<<<<
 *             # 4 vertical edges
 *             # faceLayer = self.faceLayer1
 */
    goto __pyx_L3;
  }

  /* "_marching_cubes_lewiner_cy.pyx":752
 *             # center vertex
 *             # faceLayer = self.faceLayer1
 *             k = 0             # <<<<<<<<<<<<<<
 *             j = 3
 * 
 */
  /*else*/ {
    __pyx_v_k = 0;

    /* "_marching_cubes_lewiner_cy.pyx":753
 *             # faceLayer = self.faceLayer1
 *             k = 0
 *             j = 3             # <<<<<<<<<<<<<<
 * 
 *         k = self.nx*self.ny * k
 */
    __pyx_v_j = 3;
  }
  __pyx_L3:;

  /* "_marching_cubes_lewiner_cy.pyx":755
 *             j = 3
 * 
 *         k = self.nx*self.ny * k             # <<<<<<<<<<<<<<
 *         i = i+k
 * 
 */
  __pyx_v_k = ((__pyx_v_self->nx * __pyx_v_self->ny) * __pyx_v_k);

  /* "_marching_cubes_lewiner_cy.pyx":756
 * 
 *         k = self.nx*self.ny * k
 *         i = i+k             # <<<<<<<<<<<<<<
 * 
 *         # Store facelayer and return index
 */
  __pyx_v_i = (__pyx_v_i + __pyx_v_k);

  /* "_marching_cubes_lewiner_cy.pyx":760
 *         # Store facelayer and return index
 *         # self.faceLayer = faceLayer # Dirty way of returning a value
 *         return 4*i + j             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((4 * __pyx_v_i) + __pyx_v_j);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":677
 *         return indexInFaceLayer, fl_value
 * 
 *     cdef int get_index_in_facelayer(self, int vi):             # <<<<<<<<<<<<<<
 *         """
 *         Get the index of a vertex position, given the edge on which it lies.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":763
 * 
 * 
 *     cdef void prepare_for_adding_triangles(self):             # <<<<<<<<<<<<<<
 *         """ Calculates some things to help adding the triangles:
 *         array with corner values, max corner value, gradient at each corner.
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_prepare_for_adding_triangles(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  int __pyx_v_i;
  double __pyx_v_vmin;
  double __pyx_v_vmax;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("prepare_for_adding_triangles", 0);

  /* "_marching_cubes_lewiner_cy.pyx":772
 *         # Copy values in array so we can index them. Note the misalignment
 *         # because the numbering does not correspond with bitwise OR of xyz.
 *         self.vv[0] = self.v0             # <<<<<<<<<<<<<<
 *         self.vv[1] = self.v1
 *         self.vv[2] = self.v3#
 */
  __pyx_t_1 = __pyx_v_self->v0;
  (__pyx_v_self->vv[0]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":773
 *         # because the numbering does not correspond with bitwise OR of xyz.
 *         self.vv[0] = self.v0
 *         self.vv[1] = self.v1             # <<<<<<<<<<<<<<
 *         self.vv[2] = self.v3#
 *         self.vv[3] = self.v2#
 */
  __pyx_t_1 = __pyx_v_self->v1;
  (__pyx_v_self->vv[1]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":774
 *         self.vv[0] = self.v0
 *         self.vv[1] = self.v1
 *         self.vv[2] = self.v3#             # <<<<<<<<<<<<<<
 *         self.vv[3] = self.v2#
 *         self.vv[4] = self.v4
 */
  __pyx_t_1 = __pyx_v_self->v3;
  (__pyx_v_self->vv[2]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":775
 *         self.vv[1] = self.v1
 *         self.vv[2] = self.v3#
 *         self.vv[3] = self.v2#             # <<<<<<<<<<<<<<
 *         self.vv[4] = self.v4
 *         self.vv[5] = self.v5
 */
  __pyx_t_1 = __pyx_v_self->v2;
  (__pyx_v_self->vv[3]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":776
 *         self.vv[2] = self.v3#
 *         self.vv[3] = self.v2#
 *         self.vv[4] = self.v4             # <<<<<<<<<<<<<<
 *         self.vv[5] = self.v5
 *         self.vv[6] = self.v7#
 */
  __pyx_t_1 = __pyx_v_self->v4;
  (__pyx_v_self->vv[4]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":777
 *         self.vv[3] = self.v2#
 *         self.vv[4] = self.v4
 *         self.vv[5] = self.v5             # <<<<<<<<<<<<<<
 *         self.vv[6] = self.v7#
 *         self.vv[7] = self.v6#
 */
  __pyx_t_1 = __pyx_v_self->v5;
  (__pyx_v_self->vv[5]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":778
 *         self.vv[4] = self.v4
 *         self.vv[5] = self.v5
 *         self.vv[6] = self.v7#             # <<<<<<<<<<<<<<
 *         self.vv[7] = self.v6#
 * 
 */
  __pyx_t_1 = __pyx_v_self->v7;
  (__pyx_v_self->vv[6]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":779
 *         self.vv[5] = self.v5
 *         self.vv[6] = self.v7#
 *         self.vv[7] = self.v6#             # <<<<<<<<<<<<<<
 * 
 *         # Calculate max
 */
  __pyx_t_1 = __pyx_v_self->v6;
  (__pyx_v_self->vv[7]) = __pyx_t_1;

  /* "_marching_cubes_lewiner_cy.pyx":783
 *         # Calculate max
 *         cdef double vmin, vmax
 *         vmin, vmax = 0.0, 0.0             # <<<<<<<<<<<<<<
 *         for i in range(8):
 *             if self.vv[i] > vmax:
 */
  __pyx_t_1 = 0.0;
  __pyx_t_2 = 0.0;
  __pyx_v_vmin = __pyx_t_1;
  __pyx_v_vmax = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":784
 *         cdef double vmin, vmax
 *         vmin, vmax = 0.0, 0.0
 *         for i in range(8):             # <<<<<<<<<<<<<<
 *             if self.vv[i] > vmax:
 *                 vmax = self.vv[i]
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 8; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":785
 *         vmin, vmax = 0.0, 0.0
 *         for i in range(8):
 *             if self.vv[i] > vmax:             # <<<<<<<<<<<<<<
 *                 vmax = self.vv[i]
 *             if self.vv[i] < vmin:
 */
    __pyx_t_4 = (((__pyx_v_self->vv[__pyx_v_i]) > __pyx_v_vmax) != 0);
    if (__pyx_t_4) {

      /* "_marching_cubes_lewiner_cy.pyx":786
 *         for i in range(8):
 *             if self.vv[i] > vmax:
 *                 vmax = self.vv[i]             # <<<<<<<<<<<<<<
 *             if self.vv[i] < vmin:
 *                 vmin = self.vv[i]
 */
      __pyx_v_vmax = (__pyx_v_self->vv[__pyx_v_i]);

      /* "_marching_cubes_lewiner_cy.pyx":785
 *         vmin, vmax = 0.0, 0.0
 *         for i in range(8):
 *             if self.vv[i] > vmax:             # <<<<<<<<<<<<<<
 *                 vmax = self.vv[i]
 *             if self.vv[i] < vmin:
 */
    }

    /* "_marching_cubes_lewiner_cy.pyx":787
 *             if self.vv[i] > vmax:
 *                 vmax = self.vv[i]
 *             if self.vv[i] < vmin:             # <<<<<<<<<<<<<<
 *                 vmin = self.vv[i]
 *         self.vmax = vmax-vmin
 */
    __pyx_t_4 = (((__pyx_v_self->vv[__pyx_v_i]) < __pyx_v_vmin) != 0);
    if (__pyx_t_4) {

      /* "_marching_cubes_lewiner_cy.pyx":788
 *                 vmax = self.vv[i]
 *             if self.vv[i] < vmin:
 *                 vmin = self.vv[i]             # <<<<<<<<<<<<<<
 *         self.vmax = vmax-vmin
 * 
 */
      __pyx_v_vmin = (__pyx_v_self->vv[__pyx_v_i]);

      /* "_marching_cubes_lewiner_cy.pyx":787
 *             if self.vv[i] > vmax:
 *                 vmax = self.vv[i]
 *             if self.vv[i] < vmin:             # <<<<<<<<<<<<<<
 *                 vmin = self.vv[i]
 *         self.vmax = vmax-vmin
 */
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":789
 *             if self.vv[i] < vmin:
 *                 vmin = self.vv[i]
 *         self.vmax = vmax-vmin             # <<<<<<<<<<<<<<
 * 
 *         # Calculate gradients
 */
  __pyx_v_self->vmax = (__pyx_v_vmax - __pyx_v_vmin);

  /* "_marching_cubes_lewiner_cy.pyx":796
 *         # by interpolating  and averaging the normals this is solved.
 *         # todo: we can potentially reuse these similar to how we store vertex indices in face layers
 *         self.vg[0*3+0], self.vg[0*3+1], self.vg[0*3+2] = self.v0-self.v1, self.v0-self.v3, self.v0-self.v4             # <<<<<<<<<<<<<<
 *         self.vg[1*3+0], self.vg[1*3+1], self.vg[1*3+2] = self.v0-self.v1, self.v1-self.v2, self.v1-self.v5
 *         self.vg[2*3+0], self.vg[2*3+1], self.vg[2*3+2] = self.v3-self.v2, self.v1-self.v2, self.v2-self.v6
 */
  __pyx_t_2 = (__pyx_v_self->v0 - __pyx_v_self->v1);
  __pyx_t_1 = (__pyx_v_self->v0 - __pyx_v_self->v3);
  __pyx_t_5 = (__pyx_v_self->v0 - __pyx_v_self->v4);
  (__pyx_v_self->vg[0]) = __pyx_t_2;
  (__pyx_v_self->vg[1]) = __pyx_t_1;
  (__pyx_v_self->vg[2]) = __pyx_t_5;

  /* "_marching_cubes_lewiner_cy.pyx":797
 *         # todo: we can potentially reuse these similar to how we store vertex indices in face layers
 *         self.vg[0*3+0], self.vg[0*3+1], self.vg[0*3+2] = self.v0-self.v1, self.v0-self.v3, self.v0-self.v4
 *         self.vg[1*3+0], self.vg[1*3+1], self.vg[1*3+2] = self.v0-self.v1, self.v1-self.v2, self.v1-self.v5             # <<<<<<<<<<<<<<
 *         self.vg[2*3+0], self.vg[2*3+1], self.vg[2*3+2] = self.v3-self.v2, self.v1-self.v2, self.v2-self.v6
 *         self.vg[3*3+0], self.vg[3*3+1], self.vg[3*3+2] = self.v3-self.v2, self.v0-self.v3, self.v3-self.v7
 */
  __pyx_t_5 = (__pyx_v_self->v0 - __pyx_v_self->v1);
  __pyx_t_1 = (__pyx_v_self->v1 - __pyx_v_self->v2);
  __pyx_t_2 = (__pyx_v_self->v1 - __pyx_v_self->v5);
  (__pyx_v_self->vg[3]) = __pyx_t_5;
  (__pyx_v_self->vg[4]) = __pyx_t_1;
  (__pyx_v_self->vg[5]) = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":798
 *         self.vg[0*3+0], self.vg[0*3+1], self.vg[0*3+2] = self.v0-self.v1, self.v0-self.v3, self.v0-self.v4
 *         self.vg[1*3+0], self.vg[1*3+1], self.vg[1*3+2] = self.v0-self.v1, self.v1-self.v2, self.v1-self.v5
 *         self.vg[2*3+0], self.vg[2*3+1], self.vg[2*3+2] = self.v3-self.v2, self.v1-self.v2, self.v2-self.v6             # <<<<<<<<<<<<<<
 *         self.vg[3*3+0], self.vg[3*3+1], self.vg[3*3+2] = self.v3-self.v2, self.v0-self.v3, self.v3-self.v7
 *         self.vg[4*3+0], self.vg[4*3+1], self.vg[4*3+2] = self.v4-self.v5, self.v4-self.v7, self.v0-self.v4
 */
  __pyx_t_2 = (__pyx_v_self->v3 - __pyx_v_self->v2);
  __pyx_t_1 = (__pyx_v_self->v1 - __pyx_v_self->v2);
  __pyx_t_5 = (__pyx_v_self->v2 - __pyx_v_self->v6);
  (__pyx_v_self->vg[6]) = __pyx_t_2;
  (__pyx_v_self->vg[7]) = __pyx_t_1;
  (__pyx_v_self->vg[8]) = __pyx_t_5;

  /* "_marching_cubes_lewiner_cy.pyx":799
 *         self.vg[1*3+0], self.vg[1*3+1], self.vg[1*3+2] = self.v0-self.v1, self.v1-self.v2, self.v1-self.v5
 *         self.vg[2*3+0], self.vg[2*3+1], self.vg[2*3+2] = self.v3-self.v2, self.v1-self.v2, self.v2-self.v6
 *         self.vg[3*3+0], self.vg[3*3+1], self.vg[3*3+2] = self.v3-self.v2, self.v0-self.v3, self.v3-self.v7             # <<<<<<<<<<<<<<
 *         self.vg[4*3+0], self.vg[4*3+1], self.vg[4*3+2] = self.v4-self.v5, self.v4-self.v7, self.v0-self.v4
 *         self.vg[5*3+0], self.vg[5*3+1], self.vg[5*3+2] = self.v4-self.v5, self.v5-self.v6, self.v1-self.v5
 */
  __pyx_t_5 = (__pyx_v_self->v3 - __pyx_v_self->v2);
  __pyx_t_1 = (__pyx_v_self->v0 - __pyx_v_self->v3);
  __pyx_t_2 = (__pyx_v_self->v3 - __pyx_v_self->v7);
  (__pyx_v_self->vg[9]) = __pyx_t_5;
  (__pyx_v_self->vg[10]) = __pyx_t_1;
  (__pyx_v_self->vg[11]) = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":800
 *         self.vg[2*3+0], self.vg[2*3+1], self.vg[2*3+2] = self.v3-self.v2, self.v1-self.v2, self.v2-self.v6
 *         self.vg[3*3+0], self.vg[3*3+1], self.vg[3*3+2] = self.v3-self.v2, self.v0-self.v3, self.v3-self.v7
 *         self.vg[4*3+0], self.vg[4*3+1], self.vg[4*3+2] = self.v4-self.v5, self.v4-self.v7, self.v0-self.v4             # <<<<<<<<<<<<<<
 *         self.vg[5*3+0], self.vg[5*3+1], self.vg[5*3+2] = self.v4-self.v5, self.v5-self.v6, self.v1-self.v5
 *         self.vg[6*3+0], self.vg[6*3+1], self.vg[6*3+2] = self.v7-self.v6, self.v5-self.v6, self.v2-self.v6
 */
  __pyx_t_2 = (__pyx_v_self->v4 - __pyx_v_self->v5);
  __pyx_t_1 = (__pyx_v_self->v4 - __pyx_v_self->v7);
  __pyx_t_5 = (__pyx_v_self->v0 - __pyx_v_self->v4);
  (__pyx_v_self->vg[12]) = __pyx_t_2;
  (__pyx_v_self->vg[13]) = __pyx_t_1;
  (__pyx_v_self->vg[14]) = __pyx_t_5;

  /* "_marching_cubes_lewiner_cy.pyx":801
 *         self.vg[3*3+0], self.vg[3*3+1], self.vg[3*3+2] = self.v3-self.v2, self.v0-self.v3, self.v3-self.v7
 *         self.vg[4*3+0], self.vg[4*3+1], self.vg[4*3+2] = self.v4-self.v5, self.v4-self.v7, self.v0-self.v4
 *         self.vg[5*3+0], self.vg[5*3+1], self.vg[5*3+2] = self.v4-self.v5, self.v5-self.v6, self.v1-self.v5             # <<<<<<<<<<<<<<
 *         self.vg[6*3+0], self.vg[6*3+1], self.vg[6*3+2] = self.v7-self.v6, self.v5-self.v6, self.v2-self.v6
 *         self.vg[7*3+0], self.vg[7*3+1], self.vg[7*3+2] = self.v7-self.v6, self.v4-self.v7, self.v3-self.v7
 */
  __pyx_t_5 = (__pyx_v_self->v4 - __pyx_v_self->v5);
  __pyx_t_1 = (__pyx_v_self->v5 - __pyx_v_self->v6);
  __pyx_t_2 = (__pyx_v_self->v1 - __pyx_v_self->v5);
  (__pyx_v_self->vg[15]) = __pyx_t_5;
  (__pyx_v_self->vg[16]) = __pyx_t_1;
  (__pyx_v_self->vg[17]) = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":802
 *         self.vg[4*3+0], self.vg[4*3+1], self.vg[4*3+2] = self.v4-self.v5, self.v4-self.v7, self.v0-self.v4
 *         self.vg[5*3+0], self.vg[5*3+1], self.vg[5*3+2] = self.v4-self.v5, self.v5-self.v6, self.v1-self.v5
 *         self.vg[6*3+0], self.vg[6*3+1], self.vg[6*3+2] = self.v7-self.v6, self.v5-self.v6, self.v2-self.v6             # <<<<<<<<<<<<<<
 *         self.vg[7*3+0], self.vg[7*3+1], self.vg[7*3+2] = self.v7-self.v6, self.v4-self.v7, self.v3-self.v7
 * 
 */
  __pyx_t_2 = (__pyx_v_self->v7 - __pyx_v_self->v6);
  __pyx_t_1 = (__pyx_v_self->v5 - __pyx_v_self->v6);
  __pyx_t_5 = (__pyx_v_self->v2 - __pyx_v_self->v6);
  (__pyx_v_self->vg[18]) = __pyx_t_2;
  (__pyx_v_self->vg[19]) = __pyx_t_1;
  (__pyx_v_self->vg[20]) = __pyx_t_5;

  /* "_marching_cubes_lewiner_cy.pyx":803
 *         self.vg[5*3+0], self.vg[5*3+1], self.vg[5*3+2] = self.v4-self.v5, self.v5-self.v6, self.v1-self.v5
 *         self.vg[6*3+0], self.vg[6*3+1], self.vg[6*3+2] = self.v7-self.v6, self.v5-self.v6, self.v2-self.v6
 *         self.vg[7*3+0], self.vg[7*3+1], self.vg[7*3+2] = self.v7-self.v6, self.v4-self.v7, self.v3-self.v7             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = (__pyx_v_self->v7 - __pyx_v_self->v6);
  __pyx_t_1 = (__pyx_v_self->v4 - __pyx_v_self->v7);
  __pyx_t_2 = (__pyx_v_self->v3 - __pyx_v_self->v7);
  (__pyx_v_self->vg[21]) = __pyx_t_5;
  (__pyx_v_self->vg[22]) = __pyx_t_1;
  (__pyx_v_self->vg[23]) = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":763
 * 
 * 
 *     cdef void prepare_for_adding_triangles(self):             # <<<<<<<<<<<<<<
 *         """ Calculates some things to help adding the triangles:
 *         array with corner values, max corner value, gradient at each corner.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":806
 * 
 * 
 *     cdef void calculate_center_vertex(self):             # <<<<<<<<<<<<<<
 *         """ Calculate interpolated center vertex and its gradient.
 *         """
 */

static void __pyx_f_26_marching_cubes_lewiner_cy_4Cell_calculate_center_vertex(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  double __pyx_v_v0;
  double __pyx_v_v1;
  double __pyx_v_v2;
  double __pyx_v_v3;
  double __pyx_v_v4;
  double __pyx_v_v5;
  double __pyx_v_v6;
  double __pyx_v_v7;
  double __pyx_v_fx;
  double __pyx_v_fy;
  double __pyx_v_fz;
  double __pyx_v_ff;
  double __pyx_v_stp;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("calculate_center_vertex", 0);

  /* "_marching_cubes_lewiner_cy.pyx":811
 *         cdef double v0, v1, v2, v3, v4, v5, v6, v7
 *         cdef double fx, fy, fz, ff
 *         fx, fy, fz, ff = 0.0, 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 * 
 *         # Define "strength" of each corner of the cube that we need
 */
  __pyx_t_1 = 0.0;
  __pyx_t_2 = 0.0;
  __pyx_t_3 = 0.0;
  __pyx_t_4 = 0.0;
  __pyx_v_fx = __pyx_t_1;
  __pyx_v_fy = __pyx_t_2;
  __pyx_v_fz = __pyx_t_3;
  __pyx_v_ff = __pyx_t_4;

  /* "_marching_cubes_lewiner_cy.pyx":814
 * 
 *         # Define "strength" of each corner of the cube that we need
 *         v0 = 1.0 / (FLT_EPSILON + dabs(self.v0))             # <<<<<<<<<<<<<<
 *         v1 = 1.0 / (FLT_EPSILON + dabs(self.v1))
 *         v2 = 1.0 / (FLT_EPSILON + dabs(self.v2))
 */
  __pyx_v_v0 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v0)));

  /* "_marching_cubes_lewiner_cy.pyx":815
 *         # Define "strength" of each corner of the cube that we need
 *         v0 = 1.0 / (FLT_EPSILON + dabs(self.v0))
 *         v1 = 1.0 / (FLT_EPSILON + dabs(self.v1))             # <<<<<<<<<<<<<<
 *         v2 = 1.0 / (FLT_EPSILON + dabs(self.v2))
 *         v3 = 1.0 / (FLT_EPSILON + dabs(self.v3))
 */
  __pyx_v_v1 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v1)));

  /* "_marching_cubes_lewiner_cy.pyx":816
 *         v0 = 1.0 / (FLT_EPSILON + dabs(self.v0))
 *         v1 = 1.0 / (FLT_EPSILON + dabs(self.v1))
 *         v2 = 1.0 / (FLT_EPSILON + dabs(self.v2))             # <<<<<<<<<<<<<<
 *         v3 = 1.0 / (FLT_EPSILON + dabs(self.v3))
 *         v4 = 1.0 / (FLT_EPSILON + dabs(self.v4))
 */
  __pyx_v_v2 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v2)));

  /* "_marching_cubes_lewiner_cy.pyx":817
 *         v1 = 1.0 / (FLT_EPSILON + dabs(self.v1))
 *         v2 = 1.0 / (FLT_EPSILON + dabs(self.v2))
 *         v3 = 1.0 / (FLT_EPSILON + dabs(self.v3))             # <<<<<<<<<<<<<<
 *         v4 = 1.0 / (FLT_EPSILON + dabs(self.v4))
 *         v5 = 1.0 / (FLT_EPSILON + dabs(self.v5))
 */
  __pyx_v_v3 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v3)));

  /* "_marching_cubes_lewiner_cy.pyx":818
 *         v2 = 1.0 / (FLT_EPSILON + dabs(self.v2))
 *         v3 = 1.0 / (FLT_EPSILON + dabs(self.v3))
 *         v4 = 1.0 / (FLT_EPSILON + dabs(self.v4))             # <<<<<<<<<<<<<<
 *         v5 = 1.0 / (FLT_EPSILON + dabs(self.v5))
 *         v6 = 1.0 / (FLT_EPSILON + dabs(self.v6))
 */
  __pyx_v_v4 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v4)));

  /* "_marching_cubes_lewiner_cy.pyx":819
 *         v3 = 1.0 / (FLT_EPSILON + dabs(self.v3))
 *         v4 = 1.0 / (FLT_EPSILON + dabs(self.v4))
 *         v5 = 1.0 / (FLT_EPSILON + dabs(self.v5))             # <<<<<<<<<<<<<<
 *         v6 = 1.0 / (FLT_EPSILON + dabs(self.v6))
 *         v7 = 1.0 / (FLT_EPSILON + dabs(self.v7))
 */
  __pyx_v_v5 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v5)));

  /* "_marching_cubes_lewiner_cy.pyx":820
 *         v4 = 1.0 / (FLT_EPSILON + dabs(self.v4))
 *         v5 = 1.0 / (FLT_EPSILON + dabs(self.v5))
 *         v6 = 1.0 / (FLT_EPSILON + dabs(self.v6))             # <<<<<<<<<<<<<<
 *         v7 = 1.0 / (FLT_EPSILON + dabs(self.v7))
 * 
 */
  __pyx_v_v6 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v6)));

  /* "_marching_cubes_lewiner_cy.pyx":821
 *         v5 = 1.0 / (FLT_EPSILON + dabs(self.v5))
 *         v6 = 1.0 / (FLT_EPSILON + dabs(self.v6))
 *         v7 = 1.0 / (FLT_EPSILON + dabs(self.v7))             # <<<<<<<<<<<<<<
 * 
 *         # Apply a kind of center-of-mass method
 */
  __pyx_v_v7 = (1.0 / (__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON + __pyx_f_26_marching_cubes_lewiner_cy_dabs(__pyx_v_self->v7)));

  /* "_marching_cubes_lewiner_cy.pyx":824
 * 
 *         # Apply a kind of center-of-mass method
 *         fx += 0.0*v0;  fy += 0.0*v0;  fz += 0.0*v0;  ff += v0             # <<<<<<<<<<<<<<
 *         fx += 1.0*v1;  fy += 0.0*v1;  fz += 0.0*v1;  ff += v1
 *         fx += 1.0*v2;  fy += 1.0*v2;  fz += 0.0*v2;  ff += v2
 */
  __pyx_v_fx = (__pyx_v_fx + (0.0 * __pyx_v_v0));
  __pyx_v_fy = (__pyx_v_fy + (0.0 * __pyx_v_v0));
  __pyx_v_fz = (__pyx_v_fz + (0.0 * __pyx_v_v0));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v0);

  /* "_marching_cubes_lewiner_cy.pyx":825
 *         # Apply a kind of center-of-mass method
 *         fx += 0.0*v0;  fy += 0.0*v0;  fz += 0.0*v0;  ff += v0
 *         fx += 1.0*v1;  fy += 0.0*v1;  fz += 0.0*v1;  ff += v1             # <<<<<<<<<<<<<<
 *         fx += 1.0*v2;  fy += 1.0*v2;  fz += 0.0*v2;  ff += v2
 *         fx += 0.0*v3;  fy += 1.0*v3;  fz += 0.0*v3;  ff += v3
 */
  __pyx_v_fx = (__pyx_v_fx + (1.0 * __pyx_v_v1));
  __pyx_v_fy = (__pyx_v_fy + (0.0 * __pyx_v_v1));
  __pyx_v_fz = (__pyx_v_fz + (0.0 * __pyx_v_v1));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v1);

  /* "_marching_cubes_lewiner_cy.pyx":826
 *         fx += 0.0*v0;  fy += 0.0*v0;  fz += 0.0*v0;  ff += v0
 *         fx += 1.0*v1;  fy += 0.0*v1;  fz += 0.0*v1;  ff += v1
 *         fx += 1.0*v2;  fy += 1.0*v2;  fz += 0.0*v2;  ff += v2             # <<<<<<<<<<<<<<
 *         fx += 0.0*v3;  fy += 1.0*v3;  fz += 0.0*v3;  ff += v3
 *         fx += 0.0*v4;  fy += 0.0*v4;  fz += 1.0*v4;  ff += v4
 */
  __pyx_v_fx = (__pyx_v_fx + (1.0 * __pyx_v_v2));
  __pyx_v_fy = (__pyx_v_fy + (1.0 * __pyx_v_v2));
  __pyx_v_fz = (__pyx_v_fz + (0.0 * __pyx_v_v2));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v2);

  /* "_marching_cubes_lewiner_cy.pyx":827
 *         fx += 1.0*v1;  fy += 0.0*v1;  fz += 0.0*v1;  ff += v1
 *         fx += 1.0*v2;  fy += 1.0*v2;  fz += 0.0*v2;  ff += v2
 *         fx += 0.0*v3;  fy += 1.0*v3;  fz += 0.0*v3;  ff += v3             # <<<<<<<<<<<<<<
 *         fx += 0.0*v4;  fy += 0.0*v4;  fz += 1.0*v4;  ff += v4
 *         fx += 1.0*v5;  fy += 0.0*v5;  fz += 1.0*v5;  ff += v5
 */
  __pyx_v_fx = (__pyx_v_fx + (0.0 * __pyx_v_v3));
  __pyx_v_fy = (__pyx_v_fy + (1.0 * __pyx_v_v3));
  __pyx_v_fz = (__pyx_v_fz + (0.0 * __pyx_v_v3));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v3);

  /* "_marching_cubes_lewiner_cy.pyx":828
 *         fx += 1.0*v2;  fy += 1.0*v2;  fz += 0.0*v2;  ff += v2
 *         fx += 0.0*v3;  fy += 1.0*v3;  fz += 0.0*v3;  ff += v3
 *         fx += 0.0*v4;  fy += 0.0*v4;  fz += 1.0*v4;  ff += v4             # <<<<<<<<<<<<<<
 *         fx += 1.0*v5;  fy += 0.0*v5;  fz += 1.0*v5;  ff += v5
 *         fx += 1.0*v6;  fy += 1.0*v6;  fz += 1.0*v6;  ff += v6
 */
  __pyx_v_fx = (__pyx_v_fx + (0.0 * __pyx_v_v4));
  __pyx_v_fy = (__pyx_v_fy + (0.0 * __pyx_v_v4));
  __pyx_v_fz = (__pyx_v_fz + (1.0 * __pyx_v_v4));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v4);

  /* "_marching_cubes_lewiner_cy.pyx":829
 *         fx += 0.0*v3;  fy += 1.0*v3;  fz += 0.0*v3;  ff += v3
 *         fx += 0.0*v4;  fy += 0.0*v4;  fz += 1.0*v4;  ff += v4
 *         fx += 1.0*v5;  fy += 0.0*v5;  fz += 1.0*v5;  ff += v5             # <<<<<<<<<<<<<<
 *         fx += 1.0*v6;  fy += 1.0*v6;  fz += 1.0*v6;  ff += v6
 *         fx += 0.0*v7;  fy += 1.0*v7;  fz += 1.0*v7;  ff += v7
 */
  __pyx_v_fx = (__pyx_v_fx + (1.0 * __pyx_v_v5));
  __pyx_v_fy = (__pyx_v_fy + (0.0 * __pyx_v_v5));
  __pyx_v_fz = (__pyx_v_fz + (1.0 * __pyx_v_v5));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v5);

  /* "_marching_cubes_lewiner_cy.pyx":830
 *         fx += 0.0*v4;  fy += 0.0*v4;  fz += 1.0*v4;  ff += v4
 *         fx += 1.0*v5;  fy += 0.0*v5;  fz += 1.0*v5;  ff += v5
 *         fx += 1.0*v6;  fy += 1.0*v6;  fz += 1.0*v6;  ff += v6             # <<<<<<<<<<<<<<
 *         fx += 0.0*v7;  fy += 1.0*v7;  fz += 1.0*v7;  ff += v7
 * 
 */
  __pyx_v_fx = (__pyx_v_fx + (1.0 * __pyx_v_v6));
  __pyx_v_fy = (__pyx_v_fy + (1.0 * __pyx_v_v6));
  __pyx_v_fz = (__pyx_v_fz + (1.0 * __pyx_v_v6));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v6);

  /* "_marching_cubes_lewiner_cy.pyx":831
 *         fx += 1.0*v5;  fy += 0.0*v5;  fz += 1.0*v5;  ff += v5
 *         fx += 1.0*v6;  fy += 1.0*v6;  fz += 1.0*v6;  ff += v6
 *         fx += 0.0*v7;  fy += 1.0*v7;  fz += 1.0*v7;  ff += v7             # <<<<<<<<<<<<<<
 * 
 *         # Store
 */
  __pyx_v_fx = (__pyx_v_fx + (0.0 * __pyx_v_v7));
  __pyx_v_fy = (__pyx_v_fy + (1.0 * __pyx_v_v7));
  __pyx_v_fz = (__pyx_v_fz + (1.0 * __pyx_v_v7));
  __pyx_v_ff = (__pyx_v_ff + __pyx_v_v7);

  /* "_marching_cubes_lewiner_cy.pyx":834
 * 
 *         # Store
 *         cdef double stp = <double>self.step             # <<<<<<<<<<<<<<
 *         self.v12_x = self.x + stp * fx / ff
 *         self.v12_y = self.y + stp * fy / ff
 */
  __pyx_v_stp = ((double)__pyx_v_self->step);

  /* "_marching_cubes_lewiner_cy.pyx":835
 *         # Store
 *         cdef double stp = <double>self.step
 *         self.v12_x = self.x + stp * fx / ff             # <<<<<<<<<<<<<<
 *         self.v12_y = self.y + stp * fy / ff
 *         self.v12_z = self.z + stp * fz / ff
 */
  __pyx_v_self->v12_x = (__pyx_v_self->x + ((__pyx_v_stp * __pyx_v_fx) / __pyx_v_ff));

  /* "_marching_cubes_lewiner_cy.pyx":836
 *         cdef double stp = <double>self.step
 *         self.v12_x = self.x + stp * fx / ff
 *         self.v12_y = self.y + stp * fy / ff             # <<<<<<<<<<<<<<
 *         self.v12_z = self.z + stp * fz / ff
 * 
 */
  __pyx_v_self->v12_y = (__pyx_v_self->y + ((__pyx_v_stp * __pyx_v_fy) / __pyx_v_ff));

  /* "_marching_cubes_lewiner_cy.pyx":837
 *         self.v12_x = self.x + stp * fx / ff
 *         self.v12_y = self.y + stp * fy / ff
 *         self.v12_z = self.z + stp * fz / ff             # <<<<<<<<<<<<<<
 * 
 *         # Also pre-calculate gradient of center
 */
  __pyx_v_self->v12_z = (__pyx_v_self->z + ((__pyx_v_stp * __pyx_v_fz) / __pyx_v_ff));

  /* "_marching_cubes_lewiner_cy.pyx":842
 *         # note that prepare_for_adding_triangles() must have been called for
 *         # the gradient data to exist.
 *         self.v12_xg = ( v0*self.vg[0*3+0] + v1*self.vg[1*3+0] + v2*self.vg[2*3+0] + v3*self.vg[3*3+0] +             # <<<<<<<<<<<<<<
 *                         v4*self.vg[4*3+0] + v5*self.vg[5*3+0] + v6*self.vg[6*3+0] + v7*self.vg[7*3+0] )
 *         self.v12_yg = ( v0*self.vg[0*3+1] + v1*self.vg[1*3+1] + v2*self.vg[2*3+1] + v3*self.vg[3*3+1] +
 */
  __pyx_v_self->v12_xg = ((((((((__pyx_v_v0 * (__pyx_v_self->vg[0])) + (__pyx_v_v1 * (__pyx_v_self->vg[3]))) + (__pyx_v_v2 * (__pyx_v_self->vg[6]))) + (__pyx_v_v3 * (__pyx_v_self->vg[9]))) + (__pyx_v_v4 * (__pyx_v_self->vg[12]))) + (__pyx_v_v5 * (__pyx_v_self->vg[15]))) + (__pyx_v_v6 * (__pyx_v_self->vg[18]))) + (__pyx_v_v7 * (__pyx_v_self->vg[21])));

  /* "_marching_cubes_lewiner_cy.pyx":844
 *         self.v12_xg = ( v0*self.vg[0*3+0] + v1*self.vg[1*3+0] + v2*self.vg[2*3+0] + v3*self.vg[3*3+0] +
 *                         v4*self.vg[4*3+0] + v5*self.vg[5*3+0] + v6*self.vg[6*3+0] + v7*self.vg[7*3+0] )
 *         self.v12_yg = ( v0*self.vg[0*3+1] + v1*self.vg[1*3+1] + v2*self.vg[2*3+1] + v3*self.vg[3*3+1] +             # <<<<<<<<<<<<<<
 *                         v4*self.vg[4*3+1] + v5*self.vg[5*3+1] + v6*self.vg[6*3+1] + v7*self.vg[7*3+1] )
 *         self.v12_xg = ( v0*self.vg[0*3+2] + v1*self.vg[1*3+2] + v2*self.vg[2*3+2] + v3*self.vg[3*3+2] +
 */
  __pyx_v_self->v12_yg = ((((((((__pyx_v_v0 * (__pyx_v_self->vg[1])) + (__pyx_v_v1 * (__pyx_v_self->vg[4]))) + (__pyx_v_v2 * (__pyx_v_self->vg[7]))) + (__pyx_v_v3 * (__pyx_v_self->vg[10]))) + (__pyx_v_v4 * (__pyx_v_self->vg[13]))) + (__pyx_v_v5 * (__pyx_v_self->vg[16]))) + (__pyx_v_v6 * (__pyx_v_self->vg[19]))) + (__pyx_v_v7 * (__pyx_v_self->vg[22])));

  /* "_marching_cubes_lewiner_cy.pyx":846
 *         self.v12_yg = ( v0*self.vg[0*3+1] + v1*self.vg[1*3+1] + v2*self.vg[2*3+1] + v3*self.vg[3*3+1] +
 *                         v4*self.vg[4*3+1] + v5*self.vg[5*3+1] + v6*self.vg[6*3+1] + v7*self.vg[7*3+1] )
 *         self.v12_xg = ( v0*self.vg[0*3+2] + v1*self.vg[1*3+2] + v2*self.vg[2*3+2] + v3*self.vg[3*3+2] +             # <<<<<<<<<<<<<<
 *                         v4*self.vg[4*3+2] + v5*self.vg[5*3+2] + v6*self.vg[6*3+2] + v7*self.vg[7*3+2] )
 * 
 */
  __pyx_v_self->v12_xg = ((((((((__pyx_v_v0 * (__pyx_v_self->vg[2])) + (__pyx_v_v1 * (__pyx_v_self->vg[5]))) + (__pyx_v_v2 * (__pyx_v_self->vg[8]))) + (__pyx_v_v3 * (__pyx_v_self->vg[11]))) + (__pyx_v_v4 * (__pyx_v_self->vg[14]))) + (__pyx_v_v5 * (__pyx_v_self->vg[17]))) + (__pyx_v_v6 * (__pyx_v_self->vg[20]))) + (__pyx_v_v7 * (__pyx_v_self->vg[23])));

  /* "_marching_cubes_lewiner_cy.pyx":850
 * 
 *         # Set flag that this stuff is calculated
 *         self.v12_calculated = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->v12_calculated = 1;

  /* "_marching_cubes_lewiner_cy.pyx":806
 * 
 * 
 *     cdef void calculate_center_vertex(self):             # <<<<<<<<<<<<<<
 *         """ Calculate interpolated center vertex and its gradient.
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_14__reduce_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4Cell_16__setstate_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4Cell_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Cell.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":866
 *     cdef int L2 # size of tuple in tuple (if any)
 * 
 *     def __init__(self, array):             # <<<<<<<<<<<<<<
 * 
 *         # Get the shape of the LUT
 */

/* Python wrapper */
static int __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_array = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_array,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 866, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_array = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 866, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Lut.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_3Lut___init__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self), __pyx_v_array);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_26_marching_cubes_lewiner_cy_3Lut___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, PyObject *__pyx_v_array) {
  int __pyx_v_n;
  int __pyx_v_N;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  signed char __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_array);

  /* "_marching_cubes_lewiner_cy.pyx":869
 * 
 *         # Get the shape of the LUT
 *         self.L1 = 1             # <<<<<<<<<<<<<<
 *         self.L2 = 1
 *         #
 */
  __pyx_v_self->L1 = 1;

  /* "_marching_cubes_lewiner_cy.pyx":870
 *         # Get the shape of the LUT
 *         self.L1 = 1
 *         self.L2 = 1             # <<<<<<<<<<<<<<
 *         #
 *         self.L0 = array.shape[0]
 */
  __pyx_v_self->L2 = 1;

  /* "_marching_cubes_lewiner_cy.pyx":872
 *         self.L2 = 1
 *         #
 *         self.L0 = array.shape[0]             # <<<<<<<<<<<<<<
 *         if array.ndim > 1:
 *             self.L1 = array.shape[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->L0 = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":873
 *         #
 *         self.L0 = array.shape[0]
 *         if array.ndim > 1:             # <<<<<<<<<<<<<<
 *             self.L1 = array.shape[1]
 *         if array.ndim > 2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "_marching_cubes_lewiner_cy.pyx":874
 *         self.L0 = array.shape[0]
 *         if array.ndim > 1:
 *             self.L1 = array.shape[1]             # <<<<<<<<<<<<<<
 *         if array.ndim > 2:
 *             self.L2 = array.shape[2]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->L1 = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":873
 *         #
 *         self.L0 = array.shape[0]
 *         if array.ndim > 1:             # <<<<<<<<<<<<<<
 *             self.L1 = array.shape[1]
 *         if array.ndim > 2:
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":875
 *         if array.ndim > 1:
 *             self.L1 = array.shape[1]
 *         if array.ndim > 2:             # <<<<<<<<<<<<<<
 *             self.L2 = array.shape[2]
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "_marching_cubes_lewiner_cy.pyx":876
 *             self.L1 = array.shape[1]
 *         if array.ndim > 2:
 *             self.L2 = array.shape[2]             # <<<<<<<<<<<<<<
 * 
 *         # Copy the contents
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->L2 = __pyx_t_3;

    /* "_marching_cubes_lewiner_cy.pyx":875
 *         if array.ndim > 1:
 *             self.L1 = array.shape[1]
 *         if array.ndim > 2:             # <<<<<<<<<<<<<<
 *             self.L2 = array.shape[2]
 * 
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":879
 * 
 *         # Copy the contents
 *         array = array.ravel()             # <<<<<<<<<<<<<<
 *         cdef int n, N
 *         N = self.L0 * self.L1 * self.L2
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_array, __pyx_n_s_ravel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_array, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":881
 *         array = array.ravel()
 *         cdef int n, N
 *         N = self.L0 * self.L1 * self.L2             # <<<<<<<<<<<<<<
 *         self.VALUES = <signed char *> malloc(N * sizeof(signed char))
 *         if self.VALUES is NULL:
 */
  __pyx_v_N = ((__pyx_v_self->L0 * __pyx_v_self->L1) * __pyx_v_self->L2);

  /* "_marching_cubes_lewiner_cy.pyx":882
 *         cdef int n, N
 *         N = self.L0 * self.L1 * self.L2
 *         self.VALUES = <signed char *> malloc(N * sizeof(signed char))             # <<<<<<<<<<<<<<
 *         if self.VALUES is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->VALUES = ((signed char *)malloc((__pyx_v_N * (sizeof(signed char)))));

  /* "_marching_cubes_lewiner_cy.pyx":883
 *         N = self.L0 * self.L1 * self.L2
 *         self.VALUES = <signed char *> malloc(N * sizeof(signed char))
 *         if self.VALUES is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         for n in range(N):
 */
  __pyx_t_4 = ((__pyx_v_self->VALUES == NULL) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "_marching_cubes_lewiner_cy.pyx":884
 *         self.VALUES = <signed char *> malloc(N * sizeof(signed char))
 *         if self.VALUES is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             self.VALUES[n] = array[n]
 */
    PyErr_NoMemory(); __PYX_ERR(0, 884, __pyx_L1_error)

    /* "_marching_cubes_lewiner_cy.pyx":883
 *         N = self.L0 * self.L1 * self.L2
 *         self.VALUES = <signed char *> malloc(N * sizeof(signed char))
 *         if self.VALUES is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         for n in range(N):
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":885
 *         if self.VALUES is NULL:
 *             raise MemoryError()
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             self.VALUES[n] = array[n]
 * 
 */
  __pyx_t_3 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_3;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_n = __pyx_t_7;

    /* "_marching_cubes_lewiner_cy.pyx":886
 *             raise MemoryError()
 *         for n in range(N):
 *             self.VALUES[n] = array[n]             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_array, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyInt_As_signed__char(__pyx_t_2); if (unlikely((__pyx_t_8 == (signed char)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_self->VALUES[__pyx_v_n]) = __pyx_t_8;
  }

  /* "_marching_cubes_lewiner_cy.pyx":866
 *     cdef int L2 # size of tuple in tuple (if any)
 * 
 *     def __init__(self, array):             # <<<<<<<<<<<<<<
 * 
 *         # Get the shape of the LUT
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Lut.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":888
 *             self.VALUES[n] = array[n]
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.VALUES = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_2__cinit__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_2__cinit__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":889
 * 
 *     def __cinit__(self):
 *         self.VALUES = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->VALUES = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":888
 *             self.VALUES[n] = array[n]
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.VALUES = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":891
 *         self.VALUES = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.VALUES is not NULL:
 *             free(self.VALUES)
 */

/* Python wrapper */
static void __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_4__dealloc__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_4__dealloc__(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":892
 * 
 *     def __dealloc__(self):
 *         if self.VALUES is not NULL:             # <<<<<<<<<<<<<<
 *             free(self.VALUES)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->VALUES != NULL) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":893
 *     def __dealloc__(self):
 *         if self.VALUES is not NULL:
 *             free(self.VALUES)             # <<<<<<<<<<<<<<
 * 
 *     cdef int get1(self, int i0):
 */
    free(__pyx_v_self->VALUES);

    /* "_marching_cubes_lewiner_cy.pyx":892
 * 
 *     def __dealloc__(self):
 *         if self.VALUES is not NULL:             # <<<<<<<<<<<<<<
 *             free(self.VALUES)
 * 
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":891
 *         self.VALUES = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.VALUES is not NULL:
 *             free(self.VALUES)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_marching_cubes_lewiner_cy.pyx":895
 *             free(self.VALUES)
 * 
 *     cdef int get1(self, int i0):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0]
 * 
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get1(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get1", 0);

  /* "_marching_cubes_lewiner_cy.pyx":896
 * 
 *     cdef int get1(self, int i0):
 *         return self.VALUES[i0]             # <<<<<<<<<<<<<<
 * 
 *     cdef int get2(self, int i0, int i1):
 */
  __pyx_r = (__pyx_v_self->VALUES[__pyx_v_i0]);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":895
 *             free(self.VALUES)
 * 
 *     cdef int get1(self, int i0):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":898
 *         return self.VALUES[i0]
 * 
 *     cdef int get2(self, int i0, int i1):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0*self.L1 + i1]
 * 
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get2(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0, int __pyx_v_i1) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get2", 0);

  /* "_marching_cubes_lewiner_cy.pyx":899
 * 
 *     cdef int get2(self, int i0, int i1):
 *         return self.VALUES[i0*self.L1 + i1]             # <<<<<<<<<<<<<<
 * 
 *     cdef int get3(self, int i0, int i1, int i2):
 */
  __pyx_r = (__pyx_v_self->VALUES[((__pyx_v_i0 * __pyx_v_self->L1) + __pyx_v_i1)]);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":898
 *         return self.VALUES[i0]
 * 
 *     cdef int get2(self, int i0, int i1):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0*self.L1 + i1]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":901
 *         return self.VALUES[i0*self.L1 + i1]
 * 
 *     cdef int get3(self, int i0, int i1, int i2):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0*self.L1*self.L2 + i1*self.L2 + i2]
 * 
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_3Lut_get3(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, int __pyx_v_i0, int __pyx_v_i1, int __pyx_v_i2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get3", 0);

  /* "_marching_cubes_lewiner_cy.pyx":902
 * 
 *     cdef int get3(self, int i0, int i1, int i2):
 *         return self.VALUES[i0*self.L1*self.L2 + i1*self.L2 + i2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self->VALUES[((((__pyx_v_i0 * __pyx_v_self->L1) * __pyx_v_self->L2) + (__pyx_v_i1 * __pyx_v_self->L2)) + __pyx_v_i2)]);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":901
 *         return self.VALUES[i0*self.L1 + i1]
 * 
 *     cdef int get3(self, int i0, int i1, int i2):             # <<<<<<<<<<<<<<
 *         return self.VALUES[i0*self.L1*self.L2 + i1*self.L2 + i2]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_6__reduce_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_3Lut_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Lut.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_3Lut_8__setstate_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_3Lut_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.Lut.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":969
 * 
 * 
 *     def __init__(self, EDGESRELX, EDGESRELY, EDGESRELZ, CASESCLASSIC, CASES,             # <<<<<<<<<<<<<<
 * 
 *             TILING1, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2,
 */

/* Python wrapper */
static int __pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_EDGESRELX = 0;
  PyObject *__pyx_v_EDGESRELY = 0;
  PyObject *__pyx_v_EDGESRELZ = 0;
  PyObject *__pyx_v_CASESCLASSIC = 0;
  PyObject *__pyx_v_CASES = 0;
  PyObject *__pyx_v_TILING1 = 0;
  PyObject *__pyx_v_TILING2 = 0;
  PyObject *__pyx_v_TILING3_1 = 0;
  PyObject *__pyx_v_TILING3_2 = 0;
  PyObject *__pyx_v_TILING4_1 = 0;
  PyObject *__pyx_v_TILING4_2 = 0;
  PyObject *__pyx_v_TILING5 = 0;
  PyObject *__pyx_v_TILING6_1_1 = 0;
  PyObject *__pyx_v_TILING6_1_2 = 0;
  PyObject *__pyx_v_TILING6_2 = 0;
  PyObject *__pyx_v_TILING7_1 = 0;
  PyObject *__pyx_v_TILING7_2 = 0;
  PyObject *__pyx_v_TILING7_3 = 0;
  PyObject *__pyx_v_TILING7_4_1 = 0;
  PyObject *__pyx_v_TILING7_4_2 = 0;
  PyObject *__pyx_v_TILING8 = 0;
  PyObject *__pyx_v_TILING9 = 0;
  PyObject *__pyx_v_TILING10_1_1 = 0;
  PyObject *__pyx_v_TILING10_1_1_ = 0;
  PyObject *__pyx_v_TILING10_1_2 = 0;
  PyObject *__pyx_v_TILING10_2 = 0;
  PyObject *__pyx_v_TILING10_2_ = 0;
  PyObject *__pyx_v_TILING11 = 0;
  PyObject *__pyx_v_TILING12_1_1 = 0;
  PyObject *__pyx_v_TILING12_1_1_ = 0;
  PyObject *__pyx_v_TILING12_1_2 = 0;
  PyObject *__pyx_v_TILING12_2 = 0;
  PyObject *__pyx_v_TILING12_2_ = 0;
  PyObject *__pyx_v_TILING13_1 = 0;
  PyObject *__pyx_v_TILING13_1_ = 0;
  PyObject *__pyx_v_TILING13_2 = 0;
  PyObject *__pyx_v_TILING13_2_ = 0;
  PyObject *__pyx_v_TILING13_3 = 0;
  PyObject *__pyx_v_TILING13_3_ = 0;
  PyObject *__pyx_v_TILING13_4 = 0;
  PyObject *__pyx_v_TILING13_5_1 = 0;
  PyObject *__pyx_v_TILING13_5_2 = 0;
  PyObject *__pyx_v_TILING14 = 0;
  PyObject *__pyx_v_TEST3 = 0;
  PyObject *__pyx_v_TEST4 = 0;
  PyObject *__pyx_v_TEST6 = 0;
  PyObject *__pyx_v_TEST7 = 0;
  PyObject *__pyx_v_TEST10 = 0;
  PyObject *__pyx_v_TEST12 = 0;
  PyObject *__pyx_v_TEST13 = 0;
  PyObject *__pyx_v_SUBCONFIG13 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EDGESRELX,&__pyx_n_s_EDGESRELY,&__pyx_n_s_EDGESRELZ,&__pyx_n_s_CASESCLASSIC,&__pyx_n_s_CASES,&__pyx_n_s_TILING1,&__pyx_n_s_TILING2,&__pyx_n_s_TILING3_1,&__pyx_n_s_TILING3_2,&__pyx_n_s_TILING4_1,&__pyx_n_s_TILING4_2,&__pyx_n_s_TILING5,&__pyx_n_s_TILING6_1_1,&__pyx_n_s_TILING6_1_2,&__pyx_n_s_TILING6_2,&__pyx_n_s_TILING7_1,&__pyx_n_s_TILING7_2,&__pyx_n_s_TILING7_3,&__pyx_n_s_TILING7_4_1,&__pyx_n_s_TILING7_4_2,&__pyx_n_s_TILING8,&__pyx_n_s_TILING9,&__pyx_n_s_TILING10_1_1,&__pyx_n_s_TILING10_1_1_2,&__pyx_n_s_TILING10_1_2,&__pyx_n_s_TILING10_2,&__pyx_n_s_TILING10_2_2,&__pyx_n_s_TILING11,&__pyx_n_s_TILING12_1_1,&__pyx_n_s_TILING12_1_1_2,&__pyx_n_s_TILING12_1_2,&__pyx_n_s_TILING12_2,&__pyx_n_s_TILING12_2_2,&__pyx_n_s_TILING13_1,&__pyx_n_s_TILING13_1_2,&__pyx_n_s_TILING13_2,&__pyx_n_s_TILING13_2_2,&__pyx_n_s_TILING13_3,&__pyx_n_s_TILING13_3_2,&__pyx_n_s_TILING13_4,&__pyx_n_s_TILING13_5_1,&__pyx_n_s_TILING13_5_2,&__pyx_n_s_TILING14,&__pyx_n_s_TEST3,&__pyx_n_s_TEST4,&__pyx_n_s_TEST6,&__pyx_n_s_TEST7,&__pyx_n_s_TEST10,&__pyx_n_s_TEST12,&__pyx_n_s_TEST13,&__pyx_n_s_SUBCONFIG13,0};
    PyObject* values[51] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 51: values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
        CYTHON_FALLTHROUGH;
        case 50: values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
        CYTHON_FALLTHROUGH;
        case 49: values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
        CYTHON_FALLTHROUGH;
        case 48: values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
        CYTHON_FALLTHROUGH;
        case 47: values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
        CYTHON_FALLTHROUGH;
        case 46: values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
        CYTHON_FALLTHROUGH;
        case 45: values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
        CYTHON_FALLTHROUGH;
        case 44: values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
        CYTHON_FALLTHROUGH;
        case 43: values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
        CYTHON_FALLTHROUGH;
        case 42: values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
        CYTHON_FALLTHROUGH;
        case 41: values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
        CYTHON_FALLTHROUGH;
        case 40: values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
        CYTHON_FALLTHROUGH;
        case 39: values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
        CYTHON_FALLTHROUGH;
        case 38: values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
        CYTHON_FALLTHROUGH;
        case 37: values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
        CYTHON_FALLTHROUGH;
        case 36: values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
        CYTHON_FALLTHROUGH;
        case 35: values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
        CYTHON_FALLTHROUGH;
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        CYTHON_FALLTHROUGH;
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        CYTHON_FALLTHROUGH;
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        CYTHON_FALLTHROUGH;
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        CYTHON_FALLTHROUGH;
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        CYTHON_FALLTHROUGH;
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        CYTHON_FALLTHROUGH;
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        CYTHON_FALLTHROUGH;
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        CYTHON_FALLTHROUGH;
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        CYTHON_FALLTHROUGH;
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        CYTHON_FALLTHROUGH;
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_EDGESRELX)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_EDGESRELY)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 1); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_EDGESRELZ)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 2); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_CASESCLASSIC)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 3); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_CASES)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 4); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 5); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 6); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING3_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 7); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING3_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 8); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING4_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 9); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING4_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 10); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING5)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 11); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING6_1_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 12); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING6_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 13); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING6_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 14); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING7_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 15); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING7_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 16); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING7_3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 17); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (likely((values[18] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING7_4_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 18); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (likely((values[19] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING7_4_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 19); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 20:
        if (likely((values[20] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING8)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 20); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 21:
        if (likely((values[21] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING9)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 21); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 22:
        if (likely((values[22] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING10_1_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 22); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 23:
        if (likely((values[23] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING10_1_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 23); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 24:
        if (likely((values[24] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING10_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 24); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 25:
        if (likely((values[25] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING10_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 25); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 26:
        if (likely((values[26] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING10_2_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 26); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 27:
        if (likely((values[27] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 27); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 28:
        if (likely((values[28] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING12_1_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 28); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 29:
        if (likely((values[29] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING12_1_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 29); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 30:
        if (likely((values[30] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING12_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 30); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 31:
        if (likely((values[31] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING12_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 31); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 32:
        if (likely((values[32] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING12_2_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 32); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 33:
        if (likely((values[33] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 33); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 34:
        if (likely((values[34] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_1_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 34); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 35:
        if (likely((values[35] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 35); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 36:
        if (likely((values[36] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_2_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 36); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 37:
        if (likely((values[37] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 37); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 38:
        if (likely((values[38] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_3_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 38); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 39:
        if (likely((values[39] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_4)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 39); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 40:
        if (likely((values[40] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_5_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 40); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 41:
        if (likely((values[41] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING13_5_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 41); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 42:
        if (likely((values[42] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TILING14)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 42); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 43:
        if (likely((values[43] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 43); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 44:
        if (likely((values[44] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST4)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 44); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 45:
        if (likely((values[45] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST6)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 45); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 46:
        if (likely((values[46] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST7)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 46); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 47:
        if (likely((values[47] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 47); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 48:
        if (likely((values[48] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST12)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 48); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 49:
        if (likely((values[49] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_TEST13)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 49); __PYX_ERR(0, 969, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 50:
        if (likely((values[50] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_SUBCONFIG13)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, 50); __PYX_ERR(0, 969, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 969, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 51) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
      values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
      values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
      values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
      values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
      values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
      values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
      values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
      values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
      values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
      values[34] = PyTuple_GET_ITEM(__pyx_args, 34);
      values[35] = PyTuple_GET_ITEM(__pyx_args, 35);
      values[36] = PyTuple_GET_ITEM(__pyx_args, 36);
      values[37] = PyTuple_GET_ITEM(__pyx_args, 37);
      values[38] = PyTuple_GET_ITEM(__pyx_args, 38);
      values[39] = PyTuple_GET_ITEM(__pyx_args, 39);
      values[40] = PyTuple_GET_ITEM(__pyx_args, 40);
      values[41] = PyTuple_GET_ITEM(__pyx_args, 41);
      values[42] = PyTuple_GET_ITEM(__pyx_args, 42);
      values[43] = PyTuple_GET_ITEM(__pyx_args, 43);
      values[44] = PyTuple_GET_ITEM(__pyx_args, 44);
      values[45] = PyTuple_GET_ITEM(__pyx_args, 45);
      values[46] = PyTuple_GET_ITEM(__pyx_args, 46);
      values[47] = PyTuple_GET_ITEM(__pyx_args, 47);
      values[48] = PyTuple_GET_ITEM(__pyx_args, 48);
      values[49] = PyTuple_GET_ITEM(__pyx_args, 49);
      values[50] = PyTuple_GET_ITEM(__pyx_args, 50);
    }
    __pyx_v_EDGESRELX = values[0];
    __pyx_v_EDGESRELY = values[1];
    __pyx_v_EDGESRELZ = values[2];
    __pyx_v_CASESCLASSIC = values[3];
    __pyx_v_CASES = values[4];
    __pyx_v_TILING1 = values[5];
    __pyx_v_TILING2 = values[6];
    __pyx_v_TILING3_1 = values[7];
    __pyx_v_TILING3_2 = values[8];
    __pyx_v_TILING4_1 = values[9];
    __pyx_v_TILING4_2 = values[10];
    __pyx_v_TILING5 = values[11];
    __pyx_v_TILING6_1_1 = values[12];
    __pyx_v_TILING6_1_2 = values[13];
    __pyx_v_TILING6_2 = values[14];
    __pyx_v_TILING7_1 = values[15];
    __pyx_v_TILING7_2 = values[16];
    __pyx_v_TILING7_3 = values[17];
    __pyx_v_TILING7_4_1 = values[18];
    __pyx_v_TILING7_4_2 = values[19];
    __pyx_v_TILING8 = values[20];
    __pyx_v_TILING9 = values[21];
    __pyx_v_TILING10_1_1 = values[22];
    __pyx_v_TILING10_1_1_ = values[23];
    __pyx_v_TILING10_1_2 = values[24];
    __pyx_v_TILING10_2 = values[25];
    __pyx_v_TILING10_2_ = values[26];
    __pyx_v_TILING11 = values[27];
    __pyx_v_TILING12_1_1 = values[28];
    __pyx_v_TILING12_1_1_ = values[29];
    __pyx_v_TILING12_1_2 = values[30];
    __pyx_v_TILING12_2 = values[31];
    __pyx_v_TILING12_2_ = values[32];
    __pyx_v_TILING13_1 = values[33];
    __pyx_v_TILING13_1_ = values[34];
    __pyx_v_TILING13_2 = values[35];
    __pyx_v_TILING13_2_ = values[36];
    __pyx_v_TILING13_3 = values[37];
    __pyx_v_TILING13_3_ = values[38];
    __pyx_v_TILING13_4 = values[39];
    __pyx_v_TILING13_5_1 = values[40];
    __pyx_v_TILING13_5_2 = values[41];
    __pyx_v_TILING14 = values[42];
    __pyx_v_TEST3 = values[43];
    __pyx_v_TEST4 = values[44];
    __pyx_v_TEST6 = values[45];
    __pyx_v_TEST7 = values[46];
    __pyx_v_TEST10 = values[47];
    __pyx_v_TEST12 = values[48];
    __pyx_v_TEST13 = values[49];
    __pyx_v_SUBCONFIG13 = values[50];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 51, 51, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 969, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.LutProvider.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider___init__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)__pyx_v_self), __pyx_v_EDGESRELX, __pyx_v_EDGESRELY, __pyx_v_EDGESRELZ, __pyx_v_CASESCLASSIC, __pyx_v_CASES, __pyx_v_TILING1, __pyx_v_TILING2, __pyx_v_TILING3_1, __pyx_v_TILING3_2, __pyx_v_TILING4_1, __pyx_v_TILING4_2, __pyx_v_TILING5, __pyx_v_TILING6_1_1, __pyx_v_TILING6_1_2, __pyx_v_TILING6_2, __pyx_v_TILING7_1, __pyx_v_TILING7_2, __pyx_v_TILING7_3, __pyx_v_TILING7_4_1, __pyx_v_TILING7_4_2, __pyx_v_TILING8, __pyx_v_TILING9, __pyx_v_TILING10_1_1, __pyx_v_TILING10_1_1_, __pyx_v_TILING10_1_2, __pyx_v_TILING10_2, __pyx_v_TILING10_2_, __pyx_v_TILING11, __pyx_v_TILING12_1_1, __pyx_v_TILING12_1_1_, __pyx_v_TILING12_1_2, __pyx_v_TILING12_2, __pyx_v_TILING12_2_, __pyx_v_TILING13_1, __pyx_v_TILING13_1_, __pyx_v_TILING13_2, __pyx_v_TILING13_2_, __pyx_v_TILING13_3, __pyx_v_TILING13_3_, __pyx_v_TILING13_4, __pyx_v_TILING13_5_1, __pyx_v_TILING13_5_2, __pyx_v_TILING14, __pyx_v_TEST3, __pyx_v_TEST4, __pyx_v_TEST6, __pyx_v_TEST7, __pyx_v_TEST10, __pyx_v_TEST12, __pyx_v_TEST13, __pyx_v_SUBCONFIG13);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider___init__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self, PyObject *__pyx_v_EDGESRELX, PyObject *__pyx_v_EDGESRELY, PyObject *__pyx_v_EDGESRELZ, PyObject *__pyx_v_CASESCLASSIC, PyObject *__pyx_v_CASES, PyObject *__pyx_v_TILING1, PyObject *__pyx_v_TILING2, PyObject *__pyx_v_TILING3_1, PyObject *__pyx_v_TILING3_2, PyObject *__pyx_v_TILING4_1, PyObject *__pyx_v_TILING4_2, PyObject *__pyx_v_TILING5, PyObject *__pyx_v_TILING6_1_1, PyObject *__pyx_v_TILING6_1_2, PyObject *__pyx_v_TILING6_2, PyObject *__pyx_v_TILING7_1, PyObject *__pyx_v_TILING7_2, PyObject *__pyx_v_TILING7_3, PyObject *__pyx_v_TILING7_4_1, PyObject *__pyx_v_TILING7_4_2, PyObject *__pyx_v_TILING8, PyObject *__pyx_v_TILING9, PyObject *__pyx_v_TILING10_1_1, PyObject *__pyx_v_TILING10_1_1_, PyObject *__pyx_v_TILING10_1_2, PyObject *__pyx_v_TILING10_2, PyObject *__pyx_v_TILING10_2_, PyObject *__pyx_v_TILING11, PyObject *__pyx_v_TILING12_1_1, PyObject *__pyx_v_TILING12_1_1_, PyObject *__pyx_v_TILING12_1_2, PyObject *__pyx_v_TILING12_2, PyObject *__pyx_v_TILING12_2_, PyObject *__pyx_v_TILING13_1, PyObject *__pyx_v_TILING13_1_, PyObject *__pyx_v_TILING13_2, PyObject *__pyx_v_TILING13_2_, PyObject *__pyx_v_TILING13_3, PyObject *__pyx_v_TILING13_3_, PyObject *__pyx_v_TILING13_4, PyObject *__pyx_v_TILING13_5_1, PyObject *__pyx_v_TILING13_5_2, PyObject *__pyx_v_TILING14, PyObject *__pyx_v_TEST3, PyObject *__pyx_v_TEST4, PyObject *__pyx_v_TEST6, PyObject *__pyx_v_TEST7, PyObject *__pyx_v_TEST10, PyObject *__pyx_v_TEST12, PyObject *__pyx_v_TEST13, PyObject *__pyx_v_SUBCONFIG13) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "_marching_cubes_lewiner_cy.pyx":984
 *             ):
 * 
 *         self.EDGESRELX = Lut(EDGESRELX)             # <<<<<<<<<<<<<<
 *         self.EDGESRELY = Lut(EDGESRELY)
 *         self.EDGESRELZ = Lut(EDGESRELZ)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_EDGESRELX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->EDGESRELX);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->EDGESRELX));
  __pyx_v_self->EDGESRELX = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":985
 * 
 *         self.EDGESRELX = Lut(EDGESRELX)
 *         self.EDGESRELY = Lut(EDGESRELY)             # <<<<<<<<<<<<<<
 *         self.EDGESRELZ = Lut(EDGESRELZ)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_EDGESRELY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->EDGESRELY);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->EDGESRELY));
  __pyx_v_self->EDGESRELY = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":986
 *         self.EDGESRELX = Lut(EDGESRELX)
 *         self.EDGESRELY = Lut(EDGESRELY)
 *         self.EDGESRELZ = Lut(EDGESRELZ)             # <<<<<<<<<<<<<<
 * 
 *         self.CASESCLASSIC = Lut(CASESCLASSIC)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_EDGESRELZ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->EDGESRELZ);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->EDGESRELZ));
  __pyx_v_self->EDGESRELZ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":988
 *         self.EDGESRELZ = Lut(EDGESRELZ)
 * 
 *         self.CASESCLASSIC = Lut(CASESCLASSIC)             # <<<<<<<<<<<<<<
 *         self.CASES = Lut(CASES)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_CASESCLASSIC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->CASESCLASSIC);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->CASESCLASSIC));
  __pyx_v_self->CASESCLASSIC = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":989
 * 
 *         self.CASESCLASSIC = Lut(CASESCLASSIC)
 *         self.CASES = Lut(CASES)             # <<<<<<<<<<<<<<
 * 
 *         self.TILING1 = Lut(TILING1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_CASES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->CASES);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->CASES));
  __pyx_v_self->CASES = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":991
 *         self.CASES = Lut(CASES)
 * 
 *         self.TILING1 = Lut(TILING1)             # <<<<<<<<<<<<<<
 *         self.TILING2 = Lut(TILING2)
 *         self.TILING3_1 = Lut(TILING3_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING1));
  __pyx_v_self->TILING1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":992
 * 
 *         self.TILING1 = Lut(TILING1)
 *         self.TILING2 = Lut(TILING2)             # <<<<<<<<<<<<<<
 *         self.TILING3_1 = Lut(TILING3_1)
 *         self.TILING3_2 = Lut(TILING3_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING2));
  __pyx_v_self->TILING2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":993
 *         self.TILING1 = Lut(TILING1)
 *         self.TILING2 = Lut(TILING2)
 *         self.TILING3_1 = Lut(TILING3_1)             # <<<<<<<<<<<<<<
 *         self.TILING3_2 = Lut(TILING3_2)
 *         self.TILING4_1 = Lut(TILING4_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING3_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING3_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING3_1));
  __pyx_v_self->TILING3_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":994
 *         self.TILING2 = Lut(TILING2)
 *         self.TILING3_1 = Lut(TILING3_1)
 *         self.TILING3_2 = Lut(TILING3_2)             # <<<<<<<<<<<<<<
 *         self.TILING4_1 = Lut(TILING4_1)
 *         self.TILING4_2 = Lut(TILING4_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING3_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING3_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING3_2));
  __pyx_v_self->TILING3_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":995
 *         self.TILING3_1 = Lut(TILING3_1)
 *         self.TILING3_2 = Lut(TILING3_2)
 *         self.TILING4_1 = Lut(TILING4_1)             # <<<<<<<<<<<<<<
 *         self.TILING4_2 = Lut(TILING4_2)
 *         self.TILING5 = Lut(TILING5)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING4_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING4_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING4_1));
  __pyx_v_self->TILING4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":996
 *         self.TILING3_2 = Lut(TILING3_2)
 *         self.TILING4_1 = Lut(TILING4_1)
 *         self.TILING4_2 = Lut(TILING4_2)             # <<<<<<<<<<<<<<
 *         self.TILING5 = Lut(TILING5)
 *         self.TILING6_1_1 = Lut(TILING6_1_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING4_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING4_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING4_2));
  __pyx_v_self->TILING4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":997
 *         self.TILING4_1 = Lut(TILING4_1)
 *         self.TILING4_2 = Lut(TILING4_2)
 *         self.TILING5 = Lut(TILING5)             # <<<<<<<<<<<<<<
 *         self.TILING6_1_1 = Lut(TILING6_1_1)
 *         self.TILING6_1_2 = Lut(TILING6_1_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING5);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING5));
  __pyx_v_self->TILING5 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":998
 *         self.TILING4_2 = Lut(TILING4_2)
 *         self.TILING5 = Lut(TILING5)
 *         self.TILING6_1_1 = Lut(TILING6_1_1)             # <<<<<<<<<<<<<<
 *         self.TILING6_1_2 = Lut(TILING6_1_2)
 *         self.TILING6_2 = Lut(TILING6_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING6_1_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING6_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING6_1_1));
  __pyx_v_self->TILING6_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":999
 *         self.TILING5 = Lut(TILING5)
 *         self.TILING6_1_1 = Lut(TILING6_1_1)
 *         self.TILING6_1_2 = Lut(TILING6_1_2)             # <<<<<<<<<<<<<<
 *         self.TILING6_2 = Lut(TILING6_2)
 *         self.TILING7_1 = Lut(TILING7_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING6_1_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING6_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING6_1_2));
  __pyx_v_self->TILING6_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1000
 *         self.TILING6_1_1 = Lut(TILING6_1_1)
 *         self.TILING6_1_2 = Lut(TILING6_1_2)
 *         self.TILING6_2 = Lut(TILING6_2)             # <<<<<<<<<<<<<<
 *         self.TILING7_1 = Lut(TILING7_1)
 *         self.TILING7_2 = Lut(TILING7_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING6_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING6_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING6_2));
  __pyx_v_self->TILING6_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1001
 *         self.TILING6_1_2 = Lut(TILING6_1_2)
 *         self.TILING6_2 = Lut(TILING6_2)
 *         self.TILING7_1 = Lut(TILING7_1)             # <<<<<<<<<<<<<<
 *         self.TILING7_2 = Lut(TILING7_2)
 *         self.TILING7_3 = Lut(TILING7_3)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING7_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING7_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING7_1));
  __pyx_v_self->TILING7_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1002
 *         self.TILING6_2 = Lut(TILING6_2)
 *         self.TILING7_1 = Lut(TILING7_1)
 *         self.TILING7_2 = Lut(TILING7_2)             # <<<<<<<<<<<<<<
 *         self.TILING7_3 = Lut(TILING7_3)
 *         self.TILING7_4_1 = Lut(TILING7_4_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING7_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING7_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING7_2));
  __pyx_v_self->TILING7_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1003
 *         self.TILING7_1 = Lut(TILING7_1)
 *         self.TILING7_2 = Lut(TILING7_2)
 *         self.TILING7_3 = Lut(TILING7_3)             # <<<<<<<<<<<<<<
 *         self.TILING7_4_1 = Lut(TILING7_4_1)
 *         self.TILING7_4_2 = Lut(TILING7_4_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING7_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING7_3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING7_3));
  __pyx_v_self->TILING7_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1004
 *         self.TILING7_2 = Lut(TILING7_2)
 *         self.TILING7_3 = Lut(TILING7_3)
 *         self.TILING7_4_1 = Lut(TILING7_4_1)             # <<<<<<<<<<<<<<
 *         self.TILING7_4_2 = Lut(TILING7_4_2)
 *         self.TILING8 = Lut(TILING8)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING7_4_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING7_4_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING7_4_1));
  __pyx_v_self->TILING7_4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1005
 *         self.TILING7_3 = Lut(TILING7_3)
 *         self.TILING7_4_1 = Lut(TILING7_4_1)
 *         self.TILING7_4_2 = Lut(TILING7_4_2)             # <<<<<<<<<<<<<<
 *         self.TILING8 = Lut(TILING8)
 *         self.TILING9 = Lut(TILING9)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING7_4_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING7_4_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING7_4_2));
  __pyx_v_self->TILING7_4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1006
 *         self.TILING7_4_1 = Lut(TILING7_4_1)
 *         self.TILING7_4_2 = Lut(TILING7_4_2)
 *         self.TILING8 = Lut(TILING8)             # <<<<<<<<<<<<<<
 *         self.TILING9 = Lut(TILING9)
 *         self.TILING10_1_1 = Lut(TILING10_1_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING8);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING8));
  __pyx_v_self->TILING8 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1007
 *         self.TILING7_4_2 = Lut(TILING7_4_2)
 *         self.TILING8 = Lut(TILING8)
 *         self.TILING9 = Lut(TILING9)             # <<<<<<<<<<<<<<
 *         self.TILING10_1_1 = Lut(TILING10_1_1)
 *         self.TILING10_1_1_ = Lut(TILING10_1_1_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING9);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING9));
  __pyx_v_self->TILING9 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1008
 *         self.TILING8 = Lut(TILING8)
 *         self.TILING9 = Lut(TILING9)
 *         self.TILING10_1_1 = Lut(TILING10_1_1)             # <<<<<<<<<<<<<<
 *         self.TILING10_1_1_ = Lut(TILING10_1_1_)
 *         self.TILING10_1_2 = Lut(TILING10_1_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING10_1_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING10_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING10_1_1));
  __pyx_v_self->TILING10_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1009
 *         self.TILING9 = Lut(TILING9)
 *         self.TILING10_1_1 = Lut(TILING10_1_1)
 *         self.TILING10_1_1_ = Lut(TILING10_1_1_)             # <<<<<<<<<<<<<<
 *         self.TILING10_1_2 = Lut(TILING10_1_2)
 *         self.TILING10_2 = Lut(TILING10_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING10_1_1_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING10_1_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING10_1_1_));
  __pyx_v_self->TILING10_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1010
 *         self.TILING10_1_1 = Lut(TILING10_1_1)
 *         self.TILING10_1_1_ = Lut(TILING10_1_1_)
 *         self.TILING10_1_2 = Lut(TILING10_1_2)             # <<<<<<<<<<<<<<
 *         self.TILING10_2 = Lut(TILING10_2)
 *         self.TILING10_2_ = Lut(TILING10_2_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING10_1_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING10_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING10_1_2));
  __pyx_v_self->TILING10_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1011
 *         self.TILING10_1_1_ = Lut(TILING10_1_1_)
 *         self.TILING10_1_2 = Lut(TILING10_1_2)
 *         self.TILING10_2 = Lut(TILING10_2)             # <<<<<<<<<<<<<<
 *         self.TILING10_2_ = Lut(TILING10_2_)
 *         self.TILING11 = Lut(TILING11)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING10_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING10_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING10_2));
  __pyx_v_self->TILING10_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1012
 *         self.TILING10_1_2 = Lut(TILING10_1_2)
 *         self.TILING10_2 = Lut(TILING10_2)
 *         self.TILING10_2_ = Lut(TILING10_2_)             # <<<<<<<<<<<<<<
 *         self.TILING11 = Lut(TILING11)
 *         self.TILING12_1_1 = Lut(TILING12_1_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING10_2_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING10_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING10_2_));
  __pyx_v_self->TILING10_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1013
 *         self.TILING10_2 = Lut(TILING10_2)
 *         self.TILING10_2_ = Lut(TILING10_2_)
 *         self.TILING11 = Lut(TILING11)             # <<<<<<<<<<<<<<
 *         self.TILING12_1_1 = Lut(TILING12_1_1)
 *         self.TILING12_1_1_ = Lut(TILING12_1_1_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING11);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING11));
  __pyx_v_self->TILING11 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1014
 *         self.TILING10_2_ = Lut(TILING10_2_)
 *         self.TILING11 = Lut(TILING11)
 *         self.TILING12_1_1 = Lut(TILING12_1_1)             # <<<<<<<<<<<<<<
 *         self.TILING12_1_1_ = Lut(TILING12_1_1_)
 *         self.TILING12_1_2 = Lut(TILING12_1_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING12_1_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING12_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING12_1_1));
  __pyx_v_self->TILING12_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1015
 *         self.TILING11 = Lut(TILING11)
 *         self.TILING12_1_1 = Lut(TILING12_1_1)
 *         self.TILING12_1_1_ = Lut(TILING12_1_1_)             # <<<<<<<<<<<<<<
 *         self.TILING12_1_2 = Lut(TILING12_1_2)
 *         self.TILING12_2 = Lut(TILING12_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING12_1_1_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING12_1_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING12_1_1_));
  __pyx_v_self->TILING12_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1016
 *         self.TILING12_1_1 = Lut(TILING12_1_1)
 *         self.TILING12_1_1_ = Lut(TILING12_1_1_)
 *         self.TILING12_1_2 = Lut(TILING12_1_2)             # <<<<<<<<<<<<<<
 *         self.TILING12_2 = Lut(TILING12_2)
 *         self.TILING12_2_ = Lut(TILING12_2_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING12_1_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING12_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING12_1_2));
  __pyx_v_self->TILING12_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1017
 *         self.TILING12_1_1_ = Lut(TILING12_1_1_)
 *         self.TILING12_1_2 = Lut(TILING12_1_2)
 *         self.TILING12_2 = Lut(TILING12_2)             # <<<<<<<<<<<<<<
 *         self.TILING12_2_ = Lut(TILING12_2_)
 *         self.TILING13_1 = Lut(TILING13_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING12_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING12_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING12_2));
  __pyx_v_self->TILING12_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1018
 *         self.TILING12_1_2 = Lut(TILING12_1_2)
 *         self.TILING12_2 = Lut(TILING12_2)
 *         self.TILING12_2_ = Lut(TILING12_2_)             # <<<<<<<<<<<<<<
 *         self.TILING13_1 = Lut(TILING13_1)
 *         self.TILING13_1_ = Lut(TILING13_1_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING12_2_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING12_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING12_2_));
  __pyx_v_self->TILING12_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1019
 *         self.TILING12_2 = Lut(TILING12_2)
 *         self.TILING12_2_ = Lut(TILING12_2_)
 *         self.TILING13_1 = Lut(TILING13_1)             # <<<<<<<<<<<<<<
 *         self.TILING13_1_ = Lut(TILING13_1_)
 *         self.TILING13_2 = Lut(TILING13_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_1));
  __pyx_v_self->TILING13_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1020
 *         self.TILING12_2_ = Lut(TILING12_2_)
 *         self.TILING13_1 = Lut(TILING13_1)
 *         self.TILING13_1_ = Lut(TILING13_1_)             # <<<<<<<<<<<<<<
 *         self.TILING13_2 = Lut(TILING13_2)
 *         self.TILING13_2_ = Lut(TILING13_2_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_1_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_1_));
  __pyx_v_self->TILING13_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1021
 *         self.TILING13_1 = Lut(TILING13_1)
 *         self.TILING13_1_ = Lut(TILING13_1_)
 *         self.TILING13_2 = Lut(TILING13_2)             # <<<<<<<<<<<<<<
 *         self.TILING13_2_ = Lut(TILING13_2_)
 *         self.TILING13_3 = Lut(TILING13_3)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_2));
  __pyx_v_self->TILING13_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1022
 *         self.TILING13_1_ = Lut(TILING13_1_)
 *         self.TILING13_2 = Lut(TILING13_2)
 *         self.TILING13_2_ = Lut(TILING13_2_)             # <<<<<<<<<<<<<<
 *         self.TILING13_3 = Lut(TILING13_3)
 *         self.TILING13_3_ = Lut(TILING13_3_)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_2_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_2_));
  __pyx_v_self->TILING13_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1023
 *         self.TILING13_2 = Lut(TILING13_2)
 *         self.TILING13_2_ = Lut(TILING13_2_)
 *         self.TILING13_3 = Lut(TILING13_3)             # <<<<<<<<<<<<<<
 *         self.TILING13_3_ = Lut(TILING13_3_)
 *         self.TILING13_4 = Lut(TILING13_4)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_3));
  __pyx_v_self->TILING13_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1024
 *         self.TILING13_2_ = Lut(TILING13_2_)
 *         self.TILING13_3 = Lut(TILING13_3)
 *         self.TILING13_3_ = Lut(TILING13_3_)             # <<<<<<<<<<<<<<
 *         self.TILING13_4 = Lut(TILING13_4)
 *         self.TILING13_5_1 = Lut(TILING13_5_1)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_3_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_3_);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_3_));
  __pyx_v_self->TILING13_3_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1025
 *         self.TILING13_3 = Lut(TILING13_3)
 *         self.TILING13_3_ = Lut(TILING13_3_)
 *         self.TILING13_4 = Lut(TILING13_4)             # <<<<<<<<<<<<<<
 *         self.TILING13_5_1 = Lut(TILING13_5_1)
 *         self.TILING13_5_2 = Lut(TILING13_5_2)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_4);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_4));
  __pyx_v_self->TILING13_4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1026
 *         self.TILING13_3_ = Lut(TILING13_3_)
 *         self.TILING13_4 = Lut(TILING13_4)
 *         self.TILING13_5_1 = Lut(TILING13_5_1)             # <<<<<<<<<<<<<<
 *         self.TILING13_5_2 = Lut(TILING13_5_2)
 *         self.TILING14 = Lut(TILING14)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_5_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_5_1);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_5_1));
  __pyx_v_self->TILING13_5_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1027
 *         self.TILING13_4 = Lut(TILING13_4)
 *         self.TILING13_5_1 = Lut(TILING13_5_1)
 *         self.TILING13_5_2 = Lut(TILING13_5_2)             # <<<<<<<<<<<<<<
 *         self.TILING14 = Lut(TILING14)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING13_5_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING13_5_2);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING13_5_2));
  __pyx_v_self->TILING13_5_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1028
 *         self.TILING13_5_1 = Lut(TILING13_5_1)
 *         self.TILING13_5_2 = Lut(TILING13_5_2)
 *         self.TILING14 = Lut(TILING14)             # <<<<<<<<<<<<<<
 * 
 *         self.TEST3 = Lut(TEST3)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TILING14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TILING14);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TILING14));
  __pyx_v_self->TILING14 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1030
 *         self.TILING14 = Lut(TILING14)
 * 
 *         self.TEST3 = Lut(TEST3)             # <<<<<<<<<<<<<<
 *         self.TEST4 = Lut(TEST4)
 *         self.TEST6 = Lut(TEST6)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST3);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST3));
  __pyx_v_self->TEST3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1031
 * 
 *         self.TEST3 = Lut(TEST3)
 *         self.TEST4 = Lut(TEST4)             # <<<<<<<<<<<<<<
 *         self.TEST6 = Lut(TEST6)
 *         self.TEST7 = Lut(TEST7)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST4);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST4));
  __pyx_v_self->TEST4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1032
 *         self.TEST3 = Lut(TEST3)
 *         self.TEST4 = Lut(TEST4)
 *         self.TEST6 = Lut(TEST6)             # <<<<<<<<<<<<<<
 *         self.TEST7 = Lut(TEST7)
 *         self.TEST10 = Lut(TEST10)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST6);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST6));
  __pyx_v_self->TEST6 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1033
 *         self.TEST4 = Lut(TEST4)
 *         self.TEST6 = Lut(TEST6)
 *         self.TEST7 = Lut(TEST7)             # <<<<<<<<<<<<<<
 *         self.TEST10 = Lut(TEST10)
 *         self.TEST12 = Lut(TEST12)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST7);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST7));
  __pyx_v_self->TEST7 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1034
 *         self.TEST6 = Lut(TEST6)
 *         self.TEST7 = Lut(TEST7)
 *         self.TEST10 = Lut(TEST10)             # <<<<<<<<<<<<<<
 *         self.TEST12 = Lut(TEST12)
 *         self.TEST13 = Lut(TEST13)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST10);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST10));
  __pyx_v_self->TEST10 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1035
 *         self.TEST7 = Lut(TEST7)
 *         self.TEST10 = Lut(TEST10)
 *         self.TEST12 = Lut(TEST12)             # <<<<<<<<<<<<<<
 *         self.TEST13 = Lut(TEST13)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST12);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST12));
  __pyx_v_self->TEST12 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1036
 *         self.TEST10 = Lut(TEST10)
 *         self.TEST12 = Lut(TEST12)
 *         self.TEST13 = Lut(TEST13)             # <<<<<<<<<<<<<<
 * 
 *         self.SUBCONFIG13 = Lut(SUBCONFIG13)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_TEST13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->TEST13);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->TEST13));
  __pyx_v_self->TEST13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1038
 *         self.TEST13 = Lut(TEST13)
 * 
 *         self.SUBCONFIG13 = Lut(SUBCONFIG13)             # <<<<<<<<<<<<<<
 * 
 * # def marching_cubes(float[:, :, :] im not None, double isovalue,
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Lut), __pyx_v_SUBCONFIG13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->SUBCONFIG13);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->SUBCONFIG13));
  __pyx_v_self->SUBCONFIG13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":969
 * 
 * 
 *     def __init__(self, EDGESRELX, EDGESRELY, EDGESRELZ, CASESCLASSIC, CASES,             # <<<<<<<<<<<<<<
 * 
 *             TILING1, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.LutProvider.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_2__reduce_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_2__reduce_cython__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.CASES, self.CASESCLASSIC, self.EDGESRELX, self.EDGESRELY, self.EDGESRELZ, self.SUBCONFIG13, self.TEST10, self.TEST12, self.TEST13, self.TEST3, self.TEST4, self.TEST6, self.TEST7, self.TILING1, self.TILING10_1_1, self.TILING10_1_1_, self.TILING10_1_2, self.TILING10_2, self.TILING10_2_, self.TILING11, self.TILING12_1_1, self.TILING12_1_1_, self.TILING12_1_2, self.TILING12_2, self.TILING12_2_, self.TILING13_1, self.TILING13_1_, self.TILING13_2, self.TILING13_2_, self.TILING13_3, self.TILING13_3_, self.TILING13_4, self.TILING13_5_1, self.TILING13_5_2, self.TILING14, self.TILING2, self.TILING3_1, self.TILING3_2, self.TILING4_1, self.TILING4_2, self.TILING5, self.TILING6_1_1, self.TILING6_1_2, self.TILING6_2, self.TILING7_1, self.TILING7_2, self.TILING7_3, self.TILING7_4_1, self.TILING7_4_2, self.TILING8, self.TILING9)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(51); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->CASES));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->CASES));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->CASES));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->CASESCLASSIC));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->CASESCLASSIC));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->CASESCLASSIC));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->EDGESRELX));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->EDGESRELX));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_self->EDGESRELX));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->EDGESRELY));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->EDGESRELY));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_self->EDGESRELY));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->EDGESRELZ));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->EDGESRELZ));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_v_self->EDGESRELZ));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->SUBCONFIG13));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->SUBCONFIG13));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_v_self->SUBCONFIG13));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST10));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST10));
  PyTuple_SET_ITEM(__pyx_t_1, 6, ((PyObject *)__pyx_v_self->TEST10));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST12));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST12));
  PyTuple_SET_ITEM(__pyx_t_1, 7, ((PyObject *)__pyx_v_self->TEST12));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST13));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST13));
  PyTuple_SET_ITEM(__pyx_t_1, 8, ((PyObject *)__pyx_v_self->TEST13));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST3));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST3));
  PyTuple_SET_ITEM(__pyx_t_1, 9, ((PyObject *)__pyx_v_self->TEST3));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST4));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST4));
  PyTuple_SET_ITEM(__pyx_t_1, 10, ((PyObject *)__pyx_v_self->TEST4));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST6));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST6));
  PyTuple_SET_ITEM(__pyx_t_1, 11, ((PyObject *)__pyx_v_self->TEST6));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TEST7));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TEST7));
  PyTuple_SET_ITEM(__pyx_t_1, 12, ((PyObject *)__pyx_v_self->TEST7));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING1));
  PyTuple_SET_ITEM(__pyx_t_1, 13, ((PyObject *)__pyx_v_self->TILING1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING10_1_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING10_1_1));
  PyTuple_SET_ITEM(__pyx_t_1, 14, ((PyObject *)__pyx_v_self->TILING10_1_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING10_1_1_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING10_1_1_));
  PyTuple_SET_ITEM(__pyx_t_1, 15, ((PyObject *)__pyx_v_self->TILING10_1_1_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING10_1_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING10_1_2));
  PyTuple_SET_ITEM(__pyx_t_1, 16, ((PyObject *)__pyx_v_self->TILING10_1_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING10_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING10_2));
  PyTuple_SET_ITEM(__pyx_t_1, 17, ((PyObject *)__pyx_v_self->TILING10_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING10_2_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING10_2_));
  PyTuple_SET_ITEM(__pyx_t_1, 18, ((PyObject *)__pyx_v_self->TILING10_2_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING11));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING11));
  PyTuple_SET_ITEM(__pyx_t_1, 19, ((PyObject *)__pyx_v_self->TILING11));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING12_1_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING12_1_1));
  PyTuple_SET_ITEM(__pyx_t_1, 20, ((PyObject *)__pyx_v_self->TILING12_1_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING12_1_1_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING12_1_1_));
  PyTuple_SET_ITEM(__pyx_t_1, 21, ((PyObject *)__pyx_v_self->TILING12_1_1_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING12_1_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING12_1_2));
  PyTuple_SET_ITEM(__pyx_t_1, 22, ((PyObject *)__pyx_v_self->TILING12_1_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING12_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING12_2));
  PyTuple_SET_ITEM(__pyx_t_1, 23, ((PyObject *)__pyx_v_self->TILING12_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING12_2_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING12_2_));
  PyTuple_SET_ITEM(__pyx_t_1, 24, ((PyObject *)__pyx_v_self->TILING12_2_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_1));
  PyTuple_SET_ITEM(__pyx_t_1, 25, ((PyObject *)__pyx_v_self->TILING13_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_1_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_1_));
  PyTuple_SET_ITEM(__pyx_t_1, 26, ((PyObject *)__pyx_v_self->TILING13_1_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_2));
  PyTuple_SET_ITEM(__pyx_t_1, 27, ((PyObject *)__pyx_v_self->TILING13_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_2_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_2_));
  PyTuple_SET_ITEM(__pyx_t_1, 28, ((PyObject *)__pyx_v_self->TILING13_2_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_3));
  PyTuple_SET_ITEM(__pyx_t_1, 29, ((PyObject *)__pyx_v_self->TILING13_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_3_));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_3_));
  PyTuple_SET_ITEM(__pyx_t_1, 30, ((PyObject *)__pyx_v_self->TILING13_3_));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_4));
  PyTuple_SET_ITEM(__pyx_t_1, 31, ((PyObject *)__pyx_v_self->TILING13_4));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_5_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_5_1));
  PyTuple_SET_ITEM(__pyx_t_1, 32, ((PyObject *)__pyx_v_self->TILING13_5_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING13_5_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING13_5_2));
  PyTuple_SET_ITEM(__pyx_t_1, 33, ((PyObject *)__pyx_v_self->TILING13_5_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING14));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING14));
  PyTuple_SET_ITEM(__pyx_t_1, 34, ((PyObject *)__pyx_v_self->TILING14));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING2));
  PyTuple_SET_ITEM(__pyx_t_1, 35, ((PyObject *)__pyx_v_self->TILING2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING3_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING3_1));
  PyTuple_SET_ITEM(__pyx_t_1, 36, ((PyObject *)__pyx_v_self->TILING3_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING3_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING3_2));
  PyTuple_SET_ITEM(__pyx_t_1, 37, ((PyObject *)__pyx_v_self->TILING3_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING4_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING4_1));
  PyTuple_SET_ITEM(__pyx_t_1, 38, ((PyObject *)__pyx_v_self->TILING4_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING4_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING4_2));
  PyTuple_SET_ITEM(__pyx_t_1, 39, ((PyObject *)__pyx_v_self->TILING4_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING5));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING5));
  PyTuple_SET_ITEM(__pyx_t_1, 40, ((PyObject *)__pyx_v_self->TILING5));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING6_1_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING6_1_1));
  PyTuple_SET_ITEM(__pyx_t_1, 41, ((PyObject *)__pyx_v_self->TILING6_1_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING6_1_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING6_1_2));
  PyTuple_SET_ITEM(__pyx_t_1, 42, ((PyObject *)__pyx_v_self->TILING6_1_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING6_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING6_2));
  PyTuple_SET_ITEM(__pyx_t_1, 43, ((PyObject *)__pyx_v_self->TILING6_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING7_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING7_1));
  PyTuple_SET_ITEM(__pyx_t_1, 44, ((PyObject *)__pyx_v_self->TILING7_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING7_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING7_2));
  PyTuple_SET_ITEM(__pyx_t_1, 45, ((PyObject *)__pyx_v_self->TILING7_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING7_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING7_3));
  PyTuple_SET_ITEM(__pyx_t_1, 46, ((PyObject *)__pyx_v_self->TILING7_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING7_4_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING7_4_1));
  PyTuple_SET_ITEM(__pyx_t_1, 47, ((PyObject *)__pyx_v_self->TILING7_4_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING7_4_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING7_4_2));
  PyTuple_SET_ITEM(__pyx_t_1, 48, ((PyObject *)__pyx_v_self->TILING7_4_2));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING8));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING8));
  PyTuple_SET_ITEM(__pyx_t_1, 49, ((PyObject *)__pyx_v_self->TILING8));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->TILING9));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->TILING9));
  PyTuple_SET_ITEM(__pyx_t_1, 50, ((PyObject *)__pyx_v_self->TILING9));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.CASES, self.CASESCLASSIC, self.EDGESRELX, self.EDGESRELY, self.EDGESRELZ, self.SUBCONFIG13, self.TEST10, self.TEST12, self.TEST13, self.TEST3, self.TEST4, self.TEST6, self.TEST7, self.TILING1, self.TILING10_1_1, self.TILING10_1_1_, self.TILING10_1_2, self.TILING10_2, self.TILING10_2_, self.TILING11, self.TILING12_1_1, self.TILING12_1_1_, self.TILING12_1_2, self.TILING12_2, self.TILING12_2_, self.TILING13_1, self.TILING13_1_, self.TILING13_2, self.TILING13_2_, self.TILING13_3, self.TILING13_3_, self.TILING13_4, self.TILING13_5_1, self.TILING13_5_2, self.TILING14, self.TILING2, self.TILING3_1, self.TILING3_2, self.TILING4_1, self.TILING4_2, self.TILING5, self.TILING6_1_1, self.TILING6_1_2, self.TILING6_2, self.TILING7_1, self.TILING7_2, self.TILING7_3, self.TILING7_4_1, self.TILING7_4_2, self.TILING8, self.TILING9)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.CASES, self.CASESCLASSIC, self.EDGESRELX, self.EDGESRELY, self.EDGESRELZ, self.SUBCONFIG13, self.TEST10, self.TEST12, self.TEST13, self.TEST3, self.TEST4, self.TEST6, self.TEST7, self.TILING1, self.TILING10_1_1, self.TILING10_1_1_, self.TILING10_1_2, self.TILING10_2, self.TILING10_2_, self.TILING11, self.TILING12_1_1, self.TILING12_1_1_, self.TILING12_1_2, self.TILING12_2, self.TILING12_2_, self.TILING13_1, self.TILING13_1_, self.TILING13_2, self.TILING13_2_, self.TILING13_3, self.TILING13_3_, self.TILING13_4, self.TILING13_5_1, self.TILING13_5_2, self.TILING14, self.TILING2, self.TILING3_1, self.TILING3_2, self.TILING4_1, self.TILING4_2, self.TILING5, self.TILING6_1_1, self.TILING6_1_2, self.TILING6_2, self.TILING7_1, self.TILING7_2, self.TILING7_3, self.TILING7_4_1, self.TILING7_4_2, self.TILING8, self.TILING9)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.CASES is not None or self.CASESCLASSIC is not None or self.EDGESRELX is not None or self.EDGESRELY is not None or self.EDGESRELZ is not None or self.SUBCONFIG13 is not None or self.TEST10 is not None or self.TEST12 is not None or self.TEST13 is not None or self.TEST3 is not None or self.TEST4 is not None or self.TEST6 is not None or self.TEST7 is not None or self.TILING1 is not None or self.TILING10_1_1 is not None or self.TILING10_1_1_ is not None or self.TILING10_1_2 is not None or self.TILING10_2 is not None or self.TILING10_2_ is not None or self.TILING11 is not None or self.TILING12_1_1 is not None or self.TILING12_1_1_ is not None or self.TILING12_1_2 is not None or self.TILING12_2 is not None or self.TILING12_2_ is not None or self.TILING13_1 is not None or self.TILING13_1_ is not None or self.TILING13_2 is not None or self.TILING13_2_ is not None or self.TILING13_3 is not None or self.TILING13_3_ is not None or self.TILING13_4 is not None or self.TILING13_5_1 is not None or self.TILING13_5_2 is not None or self.TILING14 is not None or self.TILING2 is not None or self.TILING3_1 is not None or self.TILING3_2 is not None or self.TILING4_1 is not None or self.TILING4_2 is not None or self.TILING5 is not None or self.TILING6_1_1 is not None or self.TILING6_1_2 is not None or self.TILING6_2 is not None or self.TILING7_1 is not None or self.TILING7_2 is not None or self.TILING7_3 is not None or self.TILING7_4_1 is not None or self.TILING7_4_2 is not None or self.TILING8 is not None or self.TILING9 is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.CASES, self.CASESCLASSIC, self.EDGESRELX, self.EDGESRELY, self.EDGESRELZ, self.SUBCONFIG13, self.TEST10, self.TEST12, self.TEST13, self.TEST3, self.TEST4, self.TEST6, self.TEST7, self.TILING1, self.TILING10_1_1, self.TILING10_1_1_, self.TILING10_1_2, self.TILING10_2, self.TILING10_2_, self.TILING11, self.TILING12_1_1, self.TILING12_1_1_, self.TILING12_1_2, self.TILING12_2, self.TILING12_2_, self.TILING13_1, self.TILING13_1_, self.TILING13_2, self.TILING13_2_, self.TILING13_3, self.TILING13_3_, self.TILING13_4, self.TILING13_5_1, self.TILING13_5_2, self.TILING14, self.TILING2, self.TILING3_1, self.TILING3_2, self.TILING4_1, self.TILING4_2, self.TILING5, self.TILING6_1_1, self.TILING6_1_2, self.TILING6_2, self.TILING7_1, self.TILING7_2, self.TILING7_3, self.TILING7_4_1, self.TILING7_4_2, self.TILING8, self.TILING9)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.CASES is not None or self.CASESCLASSIC is not None or self.EDGESRELX is not None or self.EDGESRELY is not None or self.EDGESRELZ is not None or self.SUBCONFIG13 is not None or self.TEST10 is not None or self.TEST12 is not None or self.TEST13 is not None or self.TEST3 is not None or self.TEST4 is not None or self.TEST6 is not None or self.TEST7 is not None or self.TILING1 is not None or self.TILING10_1_1 is not None or self.TILING10_1_1_ is not None or self.TILING10_1_2 is not None or self.TILING10_2 is not None or self.TILING10_2_ is not None or self.TILING11 is not None or self.TILING12_1_1 is not None or self.TILING12_1_1_ is not None or self.TILING12_1_2 is not None or self.TILING12_2 is not None or self.TILING12_2_ is not None or self.TILING13_1 is not None or self.TILING13_1_ is not None or self.TILING13_2 is not None or self.TILING13_2_ is not None or self.TILING13_3 is not None or self.TILING13_3_ is not None or self.TILING13_4 is not None or self.TILING13_5_1 is not None or self.TILING13_5_2 is not None or self.TILING14 is not None or self.TILING2 is not None or self.TILING3_1 is not None or self.TILING3_2 is not None or self.TILING4_1 is not None or self.TILING4_2 is not None or self.TILING5 is not None or self.TILING6_1_1 is not None or self.TILING6_1_2 is not None or self.TILING6_2 is not None or self.TILING7_1 is not None or self.TILING7_2 is not None or self.TILING7_3 is not None or self.TILING7_4_1 is not None or self.TILING7_4_2 is not None or self.TILING8 is not None or self.TILING9 is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->CASES) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->CASESCLASSIC) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->EDGESRELX) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->EDGESRELY) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->EDGESRELZ) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->SUBCONFIG13) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TEST10) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TEST12) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TEST13) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TEST3) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TEST4) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TEST6) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TEST7) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING1) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING10_1_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING10_1_1_) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING10_1_2) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING10_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING10_2_) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING11) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING12_1_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING12_1_1_) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING12_1_2) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING12_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING12_2_) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING13_1) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING13_1_) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING13_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING13_2_) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING13_3) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING13_3_) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING13_4) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING13_5_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING13_5_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING14) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING3_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING3_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING4_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING4_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING5) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING6_1_1) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING6_1_2) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING6_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING7_1) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING7_2) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING7_3) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING7_4_1) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING7_4_2) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->TILING8) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = (((PyObject *)__pyx_v_self->TILING9) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    __pyx_t_3 = __pyx_t_5;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.CASES is not None or self.CASESCLASSIC is not None or self.EDGESRELX is not None or self.EDGESRELY is not None or self.EDGESRELZ is not None or self.SUBCONFIG13 is not None or self.TEST10 is not None or self.TEST12 is not None or self.TEST13 is not None or self.TEST3 is not None or self.TEST4 is not None or self.TEST6 is not None or self.TEST7 is not None or self.TILING1 is not None or self.TILING10_1_1 is not None or self.TILING10_1_1_ is not None or self.TILING10_1_2 is not None or self.TILING10_2 is not None or self.TILING10_2_ is not None or self.TILING11 is not None or self.TILING12_1_1 is not None or self.TILING12_1_1_ is not None or self.TILING12_1_2 is not None or self.TILING12_2 is not None or self.TILING12_2_ is not None or self.TILING13_1 is not None or self.TILING13_1_ is not None or self.TILING13_2 is not None or self.TILING13_2_ is not None or self.TILING13_3 is not None or self.TILING13_3_ is not None or self.TILING13_4 is not None or self.TILING13_5_1 is not None or self.TILING13_5_2 is not None or self.TILING14 is not None or self.TILING2 is not None or self.TILING3_1 is not None or self.TILING3_2 is not None or self.TILING4_1 is not None or self.TILING4_2 is not None or self.TILING5 is not None or self.TILING6_1_1 is not None or self.TILING6_1_2 is not None or self.TILING6_2 is not None or self.TILING7_1 is not None or self.TILING7_2 is not None or self.TILING7_3 is not None or self.TILING7_4_1 is not None or self.TILING7_4_2 is not None or self.TILING8 is not None or self.TILING9 is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.CASES is not None or self.CASESCLASSIC is not None or self.EDGESRELX is not None or self.EDGESRELY is not None or self.EDGESRELZ is not None or self.SUBCONFIG13 is not None or self.TEST10 is not None or self.TEST12 is not None or self.TEST13 is not None or self.TEST3 is not None or self.TEST4 is not None or self.TEST6 is not None or self.TEST7 is not None or self.TILING1 is not None or self.TILING10_1_1 is not None or self.TILING10_1_1_ is not None or self.TILING10_1_2 is not None or self.TILING10_2 is not None or self.TILING10_2_ is not None or self.TILING11 is not None or self.TILING12_1_1 is not None or self.TILING12_1_1_ is not None or self.TILING12_1_2 is not None or self.TILING12_2 is not None or self.TILING12_2_ is not None or self.TILING13_1 is not None or self.TILING13_1_ is not None or self.TILING13_2 is not None or self.TILING13_2_ is not None or self.TILING13_3 is not None or self.TILING13_3_ is not None or self.TILING13_4 is not None or self.TILING13_5_1 is not None or self.TILING13_5_2 is not None or self.TILING14 is not None or self.TILING2 is not None or self.TILING3_1 is not None or self.TILING3_2 is not None or self.TILING4_1 is not None or self.TILING4_2 is not None or self.TILING5 is not None or self.TILING6_1_1 is not None or self.TILING6_1_2 is not None or self.TILING6_2 is not None or self.TILING7_1 is not None or self.TILING7_2 is not None or self.TILING7_3 is not None or self.TILING7_4_1 is not None or self.TILING7_4_2 is not None or self.TILING8 is not None or self.TILING9 is not None
 *     if use_setstate:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_LutProvider); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_50552520);
    __Pyx_GIVEREF(__pyx_int_50552520);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_50552520);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.CASES is not None or self.CASESCLASSIC is not None or self.EDGESRELX is not None or self.EDGESRELY is not None or self.EDGESRELZ is not None or self.SUBCONFIG13 is not None or self.TEST10 is not None or self.TEST12 is not None or self.TEST13 is not None or self.TEST3 is not None or self.TEST4 is not None or self.TEST6 is not None or self.TEST7 is not None or self.TILING1 is not None or self.TILING10_1_1 is not None or self.TILING10_1_1_ is not None or self.TILING10_1_2 is not None or self.TILING10_2 is not None or self.TILING10_2_ is not None or self.TILING11 is not None or self.TILING12_1_1 is not None or self.TILING12_1_1_ is not None or self.TILING12_1_2 is not None or self.TILING12_2 is not None or self.TILING12_2_ is not None or self.TILING13_1 is not None or self.TILING13_1_ is not None or self.TILING13_2 is not None or self.TILING13_2_ is not None or self.TILING13_3 is not None or self.TILING13_3_ is not None or self.TILING13_4 is not None or self.TILING13_5_1 is not None or self.TILING13_5_2 is not None or self.TILING14 is not None or self.TILING2 is not None or self.TILING3_1 is not None or self.TILING3_2 is not None or self.TILING4_1 is not None or self.TILING4_2 is not None or self.TILING5 is not None or self.TILING6_1_1 is not None or self.TILING6_1_2 is not None or self.TILING6_2 is not None or self.TILING7_1 is not None or self.TILING7_2 is not None or self.TILING7_3 is not None or self.TILING7_4_1 is not None or self.TILING7_4_2 is not None or self.TILING8 is not None or self.TILING9 is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, None), state
 *     else:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LutProvider__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_LutProvider); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_50552520);
    __Pyx_GIVEREF(__pyx_int_50552520);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_50552520);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.LutProvider.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LutProvider__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_4__setstate_cython__(((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_11LutProvider_4__setstate_cython__(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LutProvider__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_26_marching_cubes_lewiner_cy___pyx_unpickle_LutProvider__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LutProvider, (type(self), 0x3035ec8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LutProvider__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.LutProvider.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1115
 * 
 * 
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,             # <<<<<<<<<<<<<<
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3marching_cubes_udf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_26_marching_cubes_lewiner_cy_2marching_cubes_udf[] = " marching_cubes(im, double isovalue, LutProvider luts, int st=1, int classic=0)\n    Main entry to apply marching cubes.\n\n    Masked version of marching cubes. This function will check a\n    masking array (same size as im) to decide if the algorithm must be\n    computed for a given voxel. This adds a small overhead that\n    rapidly gets compensated by the fewer computed cubes\n    Returns (vertices, faces, normals, values)\n    ";
static PyMethodDef __pyx_mdef_26_marching_cubes_lewiner_cy_3marching_cubes_udf = {"marching_cubes_udf", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_26_marching_cubes_lewiner_cy_3marching_cubes_udf, METH_VARARGS|METH_KEYWORDS, __pyx_doc_26_marching_cubes_lewiner_cy_2marching_cubes_udf};
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_3marching_cubes_udf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_im = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_grads = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts = 0;
  int __pyx_v_st;
  CYTHON_UNUSED int __pyx_v_classic;
  PyArrayObject *__pyx_v_mask = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("marching_cubes_udf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_im,&__pyx_n_s_grads,&__pyx_n_s_luts,&__pyx_n_s_st,&__pyx_n_s_classic,&__pyx_n_s_mask,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "_marching_cubes_lewiner_cy.pyx":1117
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):             # <<<<<<<<<<<<<<
 *     """ marching_cubes(im, double isovalue, LutProvider luts, int st=1, int classic=0)
 *     Main entry to apply marching cubes.
 */
    values[5] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_im)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("marching_cubes_udf", 0, 3, 6, 1); __PYX_ERR(0, 1115, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_luts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("marching_cubes_udf", 0, 3, 6, 2); __PYX_ERR(0, 1115, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_st);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_classic);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mask);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "marching_cubes_udf") < 0)) __PYX_ERR(0, 1115, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_im = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_im.memview)) __PYX_ERR(0, 1115, __pyx_L3_error)
    __pyx_v_grads = __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_float(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_grads.memview)) __PYX_ERR(0, 1115, __pyx_L3_error)
    __pyx_v_luts = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)values[2]);
    if (values[3]) {
      __pyx_v_st = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_st == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L3_error)
    } else {
      __pyx_v_st = ((int)1);
    }
    if (values[4]) {
      __pyx_v_classic = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_classic == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L3_error)
    } else {
      __pyx_v_classic = ((int)0);
    }
    __pyx_v_mask = ((PyArrayObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("marching_cubes_udf", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.marching_cubes_udf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_im.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "im"); __PYX_ERR(0, 1115, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_grads.memview) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "grads"); __PYX_ERR(0, 1115, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_luts), __pyx_ptype_26_marching_cubes_lewiner_cy_LutProvider, 1, "luts", 0))) __PYX_ERR(0, 1116, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_ptype_5numpy_ndarray, 1, "mask", 0))) __PYX_ERR(0, 1117, __pyx_L1_error)
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_2marching_cubes_udf(__pyx_self, __pyx_v_im, __pyx_v_grads, __pyx_v_luts, __pyx_v_st, __pyx_v_classic, __pyx_v_mask);

  /* "_marching_cubes_lewiner_cy.pyx":1115
 * 
 * 
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,             # <<<<<<<<<<<<<<
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_2marching_cubes_udf(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_im, __Pyx_memviewslice __pyx_v_grads, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, int __pyx_v_st, CYTHON_UNUSED int __pyx_v_classic, PyArrayObject *__pyx_v_mask) {
  int __pyx_v_Nx;
  int __pyx_v_Ny;
  int __pyx_v_Nz;
  PyObject *__pyx_v_voxel_size = 0;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_cell = 0;
  __Pyx_memviewslice __pyx_v_signed_im = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_signed_im_mask = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_z;
  int __pyx_v_x_st;
  int __pyx_v_y_st;
  int __pyx_v_z_st;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_zi;
  int __pyx_v_x_i;
  int __pyx_v_y_i;
  int __pyx_v_z_i;
  int __pyx_v_dir_x;
  int __pyx_v_dir_y;
  int __pyx_v_dir_z;
  int __pyx_v_cur_x_i;
  int __pyx_v_cur_y_i;
  int __pyx_v_cur_z_i;
  int __pyx_v_case;
  int __pyx_v_config;
  int __pyx_v_no_mask;
  double __pyx_v_v0;
  double __pyx_v_v1;
  double __pyx_v_v2;
  double __pyx_v_v3;
  double __pyx_v_v4;
  double __pyx_v_v5;
  double __pyx_v_v6;
  double __pyx_v_v7;
  int __pyx_v_Nx_bound;
  int __pyx_v_Ny_bound;
  int __pyx_v_Nz_bound;
  __Pyx_memviewslice __pyx_v_base_vec = { 0, 0, { 0 }, { 0 }, { 0 } };
  float __pyx_v_avg_cube_val_thresh;
  float __pyx_v_max_cube_val_thresh;
  __Pyx_memviewslice __pyx_v_visited = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::deque<__pyx_ctuple_int__and_int__and_int>  __pyx_v_queue;
  std::deque<__pyx_ctuple_int__and_int__and_int>  __pyx_v_unsure_cases_queue;
  std::deque<__pyx_ctuple_int__and_int__and_int>  __pyx_v_non_trivial_mc_cases_queue;
  __pyx_ctuple_int__and_int__and_int __pyx_v_current_tuple;
  arrayobject *__pyx_v_sign_vs = 0;
  arrayobject *__pyx_v_visited_vs = 0;
  CYTHON_UNUSED int __pyx_v_total_cubes;
  CYTHON_UNUSED int __pyx_v_connected_components;
  arrayobject *__pyx_v_vertex_index_array_z = 0;
  arrayobject *__pyx_v_vertex_index_array_y = 0;
  arrayobject *__pyx_v_vertex_index_array_x = 0;
  arrayobject *__pyx_v_directions_z = 0;
  arrayobject *__pyx_v_directions_y = 0;
  arrayobject *__pyx_v_directions_x = 0;
  int __pyx_v_max_distance;
  int __pyx_v_max_distance_temp;
  float __pyx_v_unsure_cases_thresh;
  int __pyx_v_change_cube;
  int __pyx_v_i;
  int __pyx_v_v_index;
  int __pyx_v_dir_index;
  int __pyx_v_unsure_cases_visit_neighbours;
  double __pyx_v_anchor_sign;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  float __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  int __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  Py_ssize_t __pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  Py_ssize_t __pyx_t_42;
  Py_ssize_t __pyx_t_43;
  Py_ssize_t __pyx_t_44;
  PyObject *__pyx_t_45 = NULL;
  PyObject *__pyx_t_46 = NULL;
  PyObject *__pyx_t_47 = NULL;
  PyObject *__pyx_t_48 = NULL;
  __Pyx_memviewslice __pyx_t_49 = { 0, 0, { 0 }, { 0 }, { 0 } };
  float __pyx_t_50;
  float __pyx_t_51;
  double __pyx_t_52;
  double __pyx_t_53;
  double __pyx_t_54;
  __pyx_ctuple_int__and_int__and_int __pyx_t_55;
  int __pyx_t_56;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("marching_cubes_udf", 0);
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn_npy_bool, PyBUF_FORMAT| PyBUF_STRIDES, 3, 1, __pyx_stack) == -1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_mask.diminfo[1].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_mask.diminfo[1].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_mask.diminfo[2].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_mask.diminfo[2].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[2];

  /* "_marching_cubes_lewiner_cy.pyx":1129
 *     # Get dimemsnions
 *     cdef int Nx, Ny, Nz
 *     Nx, Ny, Nz = im.shape[2], im.shape[1], im.shape[0]             # <<<<<<<<<<<<<<
 *     # Compute voxel size
 *     cdef voxel_size = 2.0 / (Nx - 1)
 */
  __pyx_t_1 = (__pyx_v_im.shape[2]);
  __pyx_t_2 = (__pyx_v_im.shape[1]);
  __pyx_t_3 = (__pyx_v_im.shape[0]);
  __pyx_v_Nx = __pyx_t_1;
  __pyx_v_Ny = __pyx_t_2;
  __pyx_v_Nz = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":1131
 *     Nx, Ny, Nz = im.shape[2], im.shape[1], im.shape[0]
 *     # Compute voxel size
 *     cdef voxel_size = 2.0 / (Nx - 1)             # <<<<<<<<<<<<<<
 * 
 *     # Create cell to use throughout
 */
  __pyx_t_4 = PyFloat_FromDouble((2.0 / (__pyx_v_Nx - 1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_voxel_size = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1134
 * 
 *     # Create cell to use throughout
 *     cdef Cell cell = Cell(luts, Nx, Ny, Nz)             # <<<<<<<<<<<<<<
 * 
 *     # Create a 3D matrix to store signed im values
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_Nx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_Ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Nz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_luts));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_luts));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_luts));
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_Cell), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_cell = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1137
 * 
 *     # Create a 3D matrix to store signed im values
 *     cdef float[:,:,:] signed_im = np.zeros((Nz, Ny, Nx), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     cdef bint[:,:,:] signed_im_mask = np.zeros((Nz, Ny, Nx), dtype=np.int32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Nz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_Ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_Nx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_signed_im = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":1138
 *     # Create a 3D matrix to store signed im values
 *     cdef float[:,:,:] signed_im = np.zeros((Nz, Ny, Nx), dtype=np.float32)
 *     cdef bint[:,:,:] signed_im_mask = np.zeros((Nz, Ny, Nx), dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     # Typedef variables
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_Nz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_Ny); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_Nx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_7);
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_int(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_signed_im_mask = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":1145
 *     cdef int nt
 *     cdef int case, config, subconfig
 *     cdef bint no_mask = mask is None             # <<<<<<<<<<<<<<
 *     cdef double v0, v1, v2, v3, v4, v5, v6, v7
 *     # Unfortunately specifying a step in range() significantly degrades
 */
  __pyx_t_11 = (((PyObject *)__pyx_v_mask) == Py_None);
  __pyx_v_no_mask = __pyx_t_11;

  /* "_marching_cubes_lewiner_cy.pyx":1152
 *     #       ->  Nx_bound = max_allowable_x + 1 - 2 * st
 *     #       ->  Nx_bound = Nx - 2 * st
 *     assert st > 0             # <<<<<<<<<<<<<<
 *     cdef int Nx_bound, Ny_bound, Nz_bound
 *     Nx_bound, Ny_bound, Nz_bound = Nx - 2 * st, Ny - 2 * st, Nz - 2 * st  # precalculated index range
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_st > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1152, __pyx_L1_error)
    }
  }
  #endif

  /* "_marching_cubes_lewiner_cy.pyx":1154
 *     assert st > 0
 *     cdef int Nx_bound, Ny_bound, Nz_bound
 *     Nx_bound, Ny_bound, Nz_bound = Nx - 2 * st, Ny - 2 * st, Nz - 2 * st  # precalculated index range             # <<<<<<<<<<<<<<
 *     cdef float[:] base_vec = np.empty((3), dtype=np.float32)
 * 
 */
  __pyx_t_12 = (__pyx_v_Nx - (2 * __pyx_v_st));
  __pyx_t_13 = (__pyx_v_Ny - (2 * __pyx_v_st));
  __pyx_t_14 = (__pyx_v_Nz - (2 * __pyx_v_st));
  __pyx_v_Nx_bound = __pyx_t_12;
  __pyx_v_Ny_bound = __pyx_t_13;
  __pyx_v_Nz_bound = __pyx_t_14;

  /* "_marching_cubes_lewiner_cy.pyx":1155
 *     cdef int Nx_bound, Ny_bound, Nz_bound
 *     Nx_bound, Ny_bound, Nz_bound = Nx - 2 * st, Ny - 2 * st, Nz - 2 * st  # precalculated index range
 *     cdef float[:] base_vec = np.empty((3), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *     cdef float avg_cube_val_thresh = 1.05 * voxel_size
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_float(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_base_vec = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":1157
 *     cdef float[:] base_vec = np.empty((3), dtype=np.float32)
 * 
 *     cdef float avg_cube_val_thresh = 1.05 * voxel_size             # <<<<<<<<<<<<<<
 *     cdef float max_cube_val_thresh = 1.74 * voxel_size
 * 
 */
  __pyx_t_8 = PyNumber_Multiply(__pyx_float_1_05, __pyx_v_voxel_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_avg_cube_val_thresh = __pyx_t_16;

  /* "_marching_cubes_lewiner_cy.pyx":1158
 * 
 *     cdef float avg_cube_val_thresh = 1.05 * voxel_size
 *     cdef float max_cube_val_thresh = 1.74 * voxel_size             # <<<<<<<<<<<<<<
 * 
 *     # BFS data structures
 */
  __pyx_t_8 = PyNumber_Multiply(__pyx_float_1_74, __pyx_v_voxel_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_max_cube_val_thresh = __pyx_t_16;

  /* "_marching_cubes_lewiner_cy.pyx":1161
 * 
 *     # BFS data structures
 *     cdef bint[:,:,:] visited = np.zeros((Nz, Ny, Nx), dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     # cdef list queue = []
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_Nz); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_Ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_Nx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
  __pyx_t_8 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_int(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_visited = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "_marching_cubes_lewiner_cy.pyx":1169
 *     cdef (int, int, int) current_tuple
 * 
 *     cdef array.array sign_vs = array.array('f', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])             # <<<<<<<<<<<<<<
 *     cdef array.array visited_vs = array.array('i', [0, 0, 0, 0, 0, 0, 0, 0])
 *     cdef int cube_sign
 */
  __pyx_t_8 = PyList_New(8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 6, __pyx_float_0_0);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_8, 7, __pyx_float_0_0);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_f);
  __Pyx_GIVEREF(__pyx_n_s_f);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_f);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_sign_vs = ((arrayobject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1170
 * 
 *     cdef array.array sign_vs = array.array('f', [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
 *     cdef array.array visited_vs = array.array('i', [0, 0, 0, 0, 0, 0, 0, 0])             # <<<<<<<<<<<<<<
 *     cdef int cube_sign
 * 
 */
  __pyx_t_8 = PyList_New(8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 6, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 7, __pyx_int_0);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_visited_vs = ((arrayobject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1173
 *     cdef int cube_sign
 * 
 *     cdef int total_cubes = 0             # <<<<<<<<<<<<<<
 *     cdef int connected_components = 0
 * 
 */
  __pyx_v_total_cubes = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1174
 * 
 *     cdef int total_cubes = 0
 *     cdef int connected_components = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef array.array vertex_index_array_z
 */
  __pyx_v_connected_components = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1180
 *     cdef array.array vertex_index_array_x
 * 
 *     cdef array.array directions_z = array.array('i', [st, -st, 0, 0, 0, 0])             # <<<<<<<<<<<<<<
 *     cdef array.array directions_y = array.array('i', [0, 0, st, -st, 0, 0])
 *     cdef array.array directions_x = array.array('i', [0, 0, 0, 0, st, -st])
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int((-__pyx_v_st)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyList_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_int_0);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_directions_z = ((arrayobject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1181
 * 
 *     cdef array.array directions_z = array.array('i', [st, -st, 0, 0, 0, 0])
 *     cdef array.array directions_y = array.array('i', [0, 0, st, -st, 0, 0])             # <<<<<<<<<<<<<<
 *     cdef array.array directions_x = array.array('i', [0, 0, 0, 0, st, -st])
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_st); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyInt_From_int((-__pyx_v_st)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyList_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_int_0);
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_directions_y = ((arrayobject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1182
 *     cdef array.array directions_z = array.array('i', [st, -st, 0, 0, 0, 0])
 *     cdef array.array directions_y = array.array('i', [0, 0, st, -st, 0, 0])
 *     cdef array.array directions_x = array.array('i', [0, 0, 0, 0, st, -st])             # <<<<<<<<<<<<<<
 * 
 *     cdef int max_distance = 1
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int((-__pyx_v_st)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyList_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 5, __pyx_t_4);
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_directions_x = ((arrayobject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1184
 *     cdef array.array directions_x = array.array('i', [0, 0, 0, 0, st, -st])
 * 
 *     cdef int max_distance = 1             # <<<<<<<<<<<<<<
 *     cdef int max_distance_temp
 * 
 */
  __pyx_v_max_distance = 1;

  /* "_marching_cubes_lewiner_cy.pyx":1187
 *     cdef int max_distance_temp
 * 
 *     cdef float unsure_cases_thresh = 0.707             # <<<<<<<<<<<<<<
 *     cdef bint change_cube
 * 
 */
  __pyx_v_unsure_cases_thresh = 0.707;

  /* "_marching_cubes_lewiner_cy.pyx":1195
 * 
 *     # Raster scan of the whole 3D grid
 *     zi = -st             # <<<<<<<<<<<<<<
 *     while zi < Nz_bound:
 *         zi += st
 */
  __pyx_v_zi = (-__pyx_v_st);

  /* "_marching_cubes_lewiner_cy.pyx":1196
 *     # Raster scan of the whole 3D grid
 *     zi = -st
 *     while zi < Nz_bound:             # <<<<<<<<<<<<<<
 *         zi += st
 * 
 */
  while (1) {
    __pyx_t_11 = ((__pyx_v_zi < __pyx_v_Nz_bound) != 0);
    if (!__pyx_t_11) break;

    /* "_marching_cubes_lewiner_cy.pyx":1197
 *     zi = -st
 *     while zi < Nz_bound:
 *         zi += st             # <<<<<<<<<<<<<<
 * 
 *         yi = -st
 */
    __pyx_v_zi = (__pyx_v_zi + __pyx_v_st);

    /* "_marching_cubes_lewiner_cy.pyx":1199
 *         zi += st
 * 
 *         yi = -st             # <<<<<<<<<<<<<<
 *         while yi < Ny_bound:
 *             yi += st
 */
    __pyx_v_yi = (-__pyx_v_st);

    /* "_marching_cubes_lewiner_cy.pyx":1200
 * 
 *         yi = -st
 *         while yi < Ny_bound:             # <<<<<<<<<<<<<<
 *             yi += st
 * 
 */
    while (1) {
      __pyx_t_11 = ((__pyx_v_yi < __pyx_v_Ny_bound) != 0);
      if (!__pyx_t_11) break;

      /* "_marching_cubes_lewiner_cy.pyx":1201
 *         yi = -st
 *         while yi < Ny_bound:
 *             yi += st             # <<<<<<<<<<<<<<
 * 
 *             xi = -st
 */
      __pyx_v_yi = (__pyx_v_yi + __pyx_v_st);

      /* "_marching_cubes_lewiner_cy.pyx":1203
 *             yi += st
 * 
 *             xi = -st             # <<<<<<<<<<<<<<
 *             while xi < Nx_bound:
 *                 xi += st
 */
      __pyx_v_xi = (-__pyx_v_st);

      /* "_marching_cubes_lewiner_cy.pyx":1204
 * 
 *             xi = -st
 *             while xi < Nx_bound:             # <<<<<<<<<<<<<<
 *                 xi += st
 * 
 */
      while (1) {
        __pyx_t_11 = ((__pyx_v_xi < __pyx_v_Nx_bound) != 0);
        if (!__pyx_t_11) break;

        /* "_marching_cubes_lewiner_cy.pyx":1205
 *             xi = -st
 *             while xi < Nx_bound:
 *                 xi += st             # <<<<<<<<<<<<<<
 * 
 *                 z, y, x = zi, yi, xi
 */
        __pyx_v_xi = (__pyx_v_xi + __pyx_v_st);

        /* "_marching_cubes_lewiner_cy.pyx":1207
 *                 xi += st
 * 
 *                 z, y, x = zi, yi, xi             # <<<<<<<<<<<<<<
 * 
 *                 z_st = z+st
 */
        __pyx_t_17 = __pyx_v_zi;
        __pyx_t_18 = __pyx_v_yi;
        __pyx_t_19 = __pyx_v_xi;
        __pyx_v_z = __pyx_t_17;
        __pyx_v_y = __pyx_t_18;
        __pyx_v_x = __pyx_t_19;

        /* "_marching_cubes_lewiner_cy.pyx":1209
 *                 z, y, x = zi, yi, xi
 * 
 *                 z_st = z+st             # <<<<<<<<<<<<<<
 *                 y_st = y+st
 *                 x_st = x+st
 */
        __pyx_v_z_st = (__pyx_v_z + __pyx_v_st);

        /* "_marching_cubes_lewiner_cy.pyx":1210
 * 
 *                 z_st = z+st
 *                 y_st = y+st             # <<<<<<<<<<<<<<
 *                 x_st = x+st
 * 
 */
        __pyx_v_y_st = (__pyx_v_y + __pyx_v_st);

        /* "_marching_cubes_lewiner_cy.pyx":1211
 *                 z_st = z+st
 *                 y_st = y+st
 *                 x_st = x+st             # <<<<<<<<<<<<<<
 * 
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 */
        __pyx_v_x_st = (__pyx_v_x + __pyx_v_st);

        /* "_marching_cubes_lewiner_cy.pyx":1213
 *                 x_st = x+st
 * 
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):             # <<<<<<<<<<<<<<
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
        __pyx_t_20 = __pyx_v_z;
        __pyx_t_21 = __pyx_v_y;
        __pyx_t_22 = __pyx_v_x;
        __pyx_t_23 = (((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_20 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_22 * __pyx_v_visited.strides[2]) ))) == 0) != 0);
        if (__pyx_t_23) {
        } else {
          __pyx_t_11 = __pyx_t_23;
          goto __pyx_L10_bool_binop_done;
        }
        __pyx_t_23 = (__pyx_v_no_mask != 0);
        if (!__pyx_t_23) {
        } else {
          __pyx_t_11 = __pyx_t_23;
          goto __pyx_L10_bool_binop_done;
        }
        __pyx_t_22 = __pyx_v_z_st;
        __pyx_t_21 = __pyx_v_y_st;
        __pyx_t_20 = __pyx_v_x_st;
        __pyx_t_23 = ((*__Pyx_BufPtrStrided3d(npy_bool *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_mask.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_mask.diminfo[1].strides, __pyx_t_20, __pyx_pybuffernd_mask.diminfo[2].strides)) != 0);
        __pyx_t_11 = __pyx_t_23;
        __pyx_L10_bool_binop_done:;
        if (__pyx_t_11) {

          /* "_marching_cubes_lewiner_cy.pyx":1215
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          __pyx_t_20 = __pyx_v_z;
          __pyx_t_21 = __pyx_v_y;
          __pyx_t_22 = __pyx_v_x;
          __pyx_t_24 = __pyx_v_z;
          __pyx_t_25 = __pyx_v_y;
          __pyx_t_26 = __pyx_v_x_st;
          __pyx_t_27 = __pyx_v_z;
          __pyx_t_28 = __pyx_v_y_st;
          __pyx_t_29 = __pyx_v_x_st;
          __pyx_t_30 = __pyx_v_z;
          __pyx_t_31 = __pyx_v_y_st;
          __pyx_t_32 = __pyx_v_x;

          /* "_marching_cubes_lewiner_cy.pyx":1216
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and             # <<<<<<<<<<<<<<
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 */
          __pyx_t_33 = __pyx_v_z_st;
          __pyx_t_34 = __pyx_v_y;
          __pyx_t_35 = __pyx_v_x;
          __pyx_t_36 = __pyx_v_z_st;
          __pyx_t_37 = __pyx_v_y;
          __pyx_t_38 = __pyx_v_x_st;
          __pyx_t_39 = __pyx_v_z_st;
          __pyx_t_40 = __pyx_v_y_st;
          __pyx_t_41 = __pyx_v_x_st;
          __pyx_t_42 = __pyx_v_z_st;
          __pyx_t_43 = __pyx_v_y_st;
          __pyx_t_44 = __pyx_v_x;

          /* "_marching_cubes_lewiner_cy.pyx":1215
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          __pyx_t_23 = ((__pyx_f_26_marching_cubes_lewiner_cy_avg_cube((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_27 * __pyx_v_im.strides[0]) ) + __pyx_t_28 * __pyx_v_im.strides[1]) ) + __pyx_t_29 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_30 * __pyx_v_im.strides[0]) ) + __pyx_t_31 * __pyx_v_im.strides[1]) ) + __pyx_t_32 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_33 * __pyx_v_im.strides[0]) ) + __pyx_t_34 * __pyx_v_im.strides[1]) ) + __pyx_t_35 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_36 * __pyx_v_im.strides[0]) ) + __pyx_t_37 * __pyx_v_im.strides[1]) ) + __pyx_t_38 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_39 * __pyx_v_im.strides[0]) ) + __pyx_t_40 * __pyx_v_im.strides[1]) ) + __pyx_t_41 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_42 * __pyx_v_im.strides[0]) ) + __pyx_t_43 * __pyx_v_im.strides[1]) ) + __pyx_t_44 * __pyx_v_im.strides[2]) )))) < __pyx_v_avg_cube_val_thresh) != 0);
          if (__pyx_t_23) {
          } else {
            __pyx_t_11 = __pyx_t_23;
            goto __pyx_L14_bool_binop_done;
          }

          /* "_marching_cubes_lewiner_cy.pyx":1217
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 */
          __pyx_t_44 = __pyx_v_z;
          __pyx_t_43 = __pyx_v_y;
          __pyx_t_42 = __pyx_v_x;
          __pyx_t_41 = __pyx_v_z;
          __pyx_t_40 = __pyx_v_y;
          __pyx_t_39 = __pyx_v_x_st;
          __pyx_t_38 = __pyx_v_z;
          __pyx_t_37 = __pyx_v_y_st;
          __pyx_t_36 = __pyx_v_x_st;
          __pyx_t_35 = __pyx_v_z;
          __pyx_t_34 = __pyx_v_y_st;
          __pyx_t_33 = __pyx_v_x;

          /* "_marching_cubes_lewiner_cy.pyx":1218
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):             # <<<<<<<<<<<<<<
 * 
 *                         vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 */
          __pyx_t_32 = __pyx_v_z_st;
          __pyx_t_31 = __pyx_v_y;
          __pyx_t_30 = __pyx_v_x;
          __pyx_t_29 = __pyx_v_z_st;
          __pyx_t_28 = __pyx_v_y;
          __pyx_t_27 = __pyx_v_x_st;
          __pyx_t_26 = __pyx_v_z_st;
          __pyx_t_25 = __pyx_v_y_st;
          __pyx_t_24 = __pyx_v_x_st;
          __pyx_t_22 = __pyx_v_z_st;
          __pyx_t_21 = __pyx_v_y_st;
          __pyx_t_20 = __pyx_v_x;

          /* "_marching_cubes_lewiner_cy.pyx":1217
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 */
          __pyx_t_23 = ((__pyx_f_26_marching_cubes_lewiner_cy_max_cube((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_44 * __pyx_v_im.strides[0]) ) + __pyx_t_43 * __pyx_v_im.strides[1]) ) + __pyx_t_42 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_41 * __pyx_v_im.strides[0]) ) + __pyx_t_40 * __pyx_v_im.strides[1]) ) + __pyx_t_39 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_38 * __pyx_v_im.strides[0]) ) + __pyx_t_37 * __pyx_v_im.strides[1]) ) + __pyx_t_36 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_35 * __pyx_v_im.strides[0]) ) + __pyx_t_34 * __pyx_v_im.strides[1]) ) + __pyx_t_33 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_32 * __pyx_v_im.strides[0]) ) + __pyx_t_31 * __pyx_v_im.strides[1]) ) + __pyx_t_30 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_29 * __pyx_v_im.strides[0]) ) + __pyx_t_28 * __pyx_v_im.strides[1]) ) + __pyx_t_27 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_26 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_24 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_22 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_20 * __pyx_v_im.strides[2]) )))) <= __pyx_v_max_cube_val_thresh) != 0);
          __pyx_t_11 = __pyx_t_23;
          __pyx_L14_bool_binop_done:;

          /* "_marching_cubes_lewiner_cy.pyx":1215
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          if (__pyx_t_11) {

            /* "_marching_cubes_lewiner_cy.pyx":1220
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 *                         vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])             # <<<<<<<<<<<<<<
 *                         vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])
 *                         vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])
 */
            __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_45);
            __pyx_t_46 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_47);
            __pyx_t_48 = PyList_New(8); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __Pyx_GIVEREF(__pyx_t_7);
            PyList_SET_ITEM(__pyx_t_48, 0, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_4);
            PyList_SET_ITEM(__pyx_t_48, 1, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_8);
            PyList_SET_ITEM(__pyx_t_48, 2, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_6);
            PyList_SET_ITEM(__pyx_t_48, 3, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            PyList_SET_ITEM(__pyx_t_48, 4, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_45);
            PyList_SET_ITEM(__pyx_t_48, 5, __pyx_t_45);
            __Pyx_GIVEREF(__pyx_t_46);
            PyList_SET_ITEM(__pyx_t_48, 6, __pyx_t_46);
            __Pyx_GIVEREF(__pyx_t_47);
            PyList_SET_ITEM(__pyx_t_48, 7, __pyx_t_47);
            __pyx_t_7 = 0;
            __pyx_t_4 = 0;
            __pyx_t_8 = 0;
            __pyx_t_6 = 0;
            __pyx_t_5 = 0;
            __pyx_t_45 = 0;
            __pyx_t_46 = 0;
            __pyx_t_47 = 0;
            __pyx_t_47 = PyTuple_New(2); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_47);
            __Pyx_INCREF(__pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_n_s_i);
            PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_t_48);
            PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_t_48);
            __pyx_t_48 = 0;
            __pyx_t_48 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_47, NULL); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1220, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;
            __Pyx_XDECREF_SET(__pyx_v_vertex_index_array_z, ((arrayobject *)__pyx_t_48));
            __pyx_t_48 = 0;

            /* "_marching_cubes_lewiner_cy.pyx":1221
 * 
 *                         vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 *                         vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])             # <<<<<<<<<<<<<<
 *                         vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])
 * 
 */
            __pyx_t_48 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_47);
            __pyx_t_46 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_45);
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_7 = PyList_New(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_48);
            PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_48);
            __Pyx_GIVEREF(__pyx_t_47);
            PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_47);
            __Pyx_GIVEREF(__pyx_t_46);
            PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_46);
            __Pyx_GIVEREF(__pyx_t_45);
            PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_45);
            __Pyx_GIVEREF(__pyx_t_5);
            PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_6);
            PyList_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_8);
            PyList_SET_ITEM(__pyx_t_7, 6, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_4);
            PyList_SET_ITEM(__pyx_t_7, 7, __pyx_t_4);
            __pyx_t_48 = 0;
            __pyx_t_47 = 0;
            __pyx_t_46 = 0;
            __pyx_t_45 = 0;
            __pyx_t_5 = 0;
            __pyx_t_6 = 0;
            __pyx_t_8 = 0;
            __pyx_t_4 = 0;
            __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_n_s_i);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
            __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1221, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF_SET(__pyx_v_vertex_index_array_y, ((arrayobject *)__pyx_t_7));
            __pyx_t_7 = 0;

            /* "_marching_cubes_lewiner_cy.pyx":1222
 *                         vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 *                         vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])
 *                         vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])             # <<<<<<<<<<<<<<
 * 
 *                         # The following block follows this pseudocode and lets
 */
            __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_45);
            __pyx_t_46 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_47);
            __pyx_t_48 = PyList_New(8); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __Pyx_GIVEREF(__pyx_t_7);
            PyList_SET_ITEM(__pyx_t_48, 0, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_4);
            PyList_SET_ITEM(__pyx_t_48, 1, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_8);
            PyList_SET_ITEM(__pyx_t_48, 2, __pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_6);
            PyList_SET_ITEM(__pyx_t_48, 3, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5);
            PyList_SET_ITEM(__pyx_t_48, 4, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_45);
            PyList_SET_ITEM(__pyx_t_48, 5, __pyx_t_45);
            __Pyx_GIVEREF(__pyx_t_46);
            PyList_SET_ITEM(__pyx_t_48, 6, __pyx_t_46);
            __Pyx_GIVEREF(__pyx_t_47);
            PyList_SET_ITEM(__pyx_t_48, 7, __pyx_t_47);
            __pyx_t_7 = 0;
            __pyx_t_4 = 0;
            __pyx_t_8 = 0;
            __pyx_t_6 = 0;
            __pyx_t_5 = 0;
            __pyx_t_45 = 0;
            __pyx_t_46 = 0;
            __pyx_t_47 = 0;
            __pyx_t_47 = PyTuple_New(2); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_47);
            __Pyx_INCREF(__pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_n_s_i);
            PyTuple_SET_ITEM(__pyx_t_47, 0, __pyx_n_s_i);
            __Pyx_GIVEREF(__pyx_t_48);
            PyTuple_SET_ITEM(__pyx_t_47, 1, __pyx_t_48);
            __pyx_t_48 = 0;
            __pyx_t_48 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_47, NULL); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1222, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;
            __Pyx_XDECREF_SET(__pyx_v_vertex_index_array_x, ((arrayobject *)__pyx_t_48));
            __pyx_t_48 = 0;

            /* "_marching_cubes_lewiner_cy.pyx":1242
 *                                         #compute edge vote
 * 
 *                         v_index = -1             # <<<<<<<<<<<<<<
 *                         change_cube = False
 *                         while v_index < 7: #from 0 to 7, included
 */
            __pyx_v_v_index = -1;

            /* "_marching_cubes_lewiner_cy.pyx":1243
 * 
 *                         v_index = -1
 *                         change_cube = False             # <<<<<<<<<<<<<<
 *                         while v_index < 7: #from 0 to 7, included
 *                             v_index += 1
 */
            __pyx_v_change_cube = 0;

            /* "_marching_cubes_lewiner_cy.pyx":1244
 *                         v_index = -1
 *                         change_cube = False
 *                         while v_index < 7: #from 0 to 7, included             # <<<<<<<<<<<<<<
 *                             v_index += 1
 * 
 */
            while (1) {
              __pyx_t_11 = ((__pyx_v_v_index < 7) != 0);
              if (!__pyx_t_11) break;

              /* "_marching_cubes_lewiner_cy.pyx":1245
 *                         change_cube = False
 *                         while v_index < 7: #from 0 to 7, included
 *                             v_index += 1             # <<<<<<<<<<<<<<
 * 
 *                             visited_vs[v_index] = 0
 */
              __pyx_v_v_index = (__pyx_v_v_index + 1);

              /* "_marching_cubes_lewiner_cy.pyx":1247
 *                             v_index += 1
 * 
 *                             visited_vs[v_index] = 0             # <<<<<<<<<<<<<<
 * 
 *                             z_i = vertex_index_array_z[v_index]
 */
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1247, __pyx_L1_error)

              /* "_marching_cubes_lewiner_cy.pyx":1249
 *                             visited_vs[v_index] = 0
 * 
 *                             z_i = vertex_index_array_z[v_index]             # <<<<<<<<<<<<<<
 *                             y_i = vertex_index_array_y[v_index]
 *                             x_i = vertex_index_array_x[v_index]
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_z), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1249, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_v_z_i = __pyx_t_19;

              /* "_marching_cubes_lewiner_cy.pyx":1250
 * 
 *                             z_i = vertex_index_array_z[v_index]
 *                             y_i = vertex_index_array_y[v_index]             # <<<<<<<<<<<<<<
 *                             x_i = vertex_index_array_x[v_index]
 * 
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_y), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1250, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1250, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_v_y_i = __pyx_t_19;

              /* "_marching_cubes_lewiner_cy.pyx":1251
 *                             z_i = vertex_index_array_z[v_index]
 *                             y_i = vertex_index_array_y[v_index]
 *                             x_i = vertex_index_array_x[v_index]             # <<<<<<<<<<<<<<
 * 
 *                             sign_vs[v_index] = 0.0
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_x), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1251, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1251, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_v_x_i = __pyx_t_19;

              /* "_marching_cubes_lewiner_cy.pyx":1253
 *                             x_i = vertex_index_array_x[v_index]
 * 
 *                             sign_vs[v_index] = 0.0             # <<<<<<<<<<<<<<
 * 
 *                             #If the vertex value has been previously computed or is zero, skip it
 */
              if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, __pyx_float_0_0, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1253, __pyx_L1_error)

              /* "_marching_cubes_lewiner_cy.pyx":1256
 * 
 *                             #If the vertex value has been previously computed or is zero, skip it
 *                             if signed_im_mask[z_i,y_i,x_i] == True:             # <<<<<<<<<<<<<<
 *                                 visited_vs[v_index] = 1
 *                                 sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 */
              __pyx_t_20 = __pyx_v_z_i;
              __pyx_t_21 = __pyx_v_y_i;
              __pyx_t_22 = __pyx_v_x_i;
              __pyx_t_11 = (((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) ))) == 1) != 0);
              if (__pyx_t_11) {

                /* "_marching_cubes_lewiner_cy.pyx":1257
 *                             #If the vertex value has been previously computed or is zero, skip it
 *                             if signed_im_mask[z_i,y_i,x_i] == True:
 *                                 visited_vs[v_index] = 1             # <<<<<<<<<<<<<<
 *                                 sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 *                                 continue
 */
                if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1257, __pyx_L1_error)

                /* "_marching_cubes_lewiner_cy.pyx":1258
 *                             if signed_im_mask[z_i,y_i,x_i] == True:
 *                                 visited_vs[v_index] = 1
 *                                 sign_vs[v_index] = signed_im[z_i,y_i,x_i]             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                __pyx_t_22 = __pyx_v_z_i;
                __pyx_t_21 = __pyx_v_y_i;
                __pyx_t_20 = __pyx_v_x_i;
                __pyx_t_48 = PyFloat_FromDouble((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )))); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1258, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_48);
                if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, __pyx_t_48, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1258, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;

                /* "_marching_cubes_lewiner_cy.pyx":1259
 *                                 visited_vs[v_index] = 1
 *                                 sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             if im[z_i,y_i,x_i] == 0.0:
 */
                goto __pyx_L16_continue;

                /* "_marching_cubes_lewiner_cy.pyx":1256
 * 
 *                             #If the vertex value has been previously computed or is zero, skip it
 *                             if signed_im_mask[z_i,y_i,x_i] == True:             # <<<<<<<<<<<<<<
 *                                 visited_vs[v_index] = 1
 *                                 sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1261
 *                                 continue
 * 
 *                             if im[z_i,y_i,x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                 visited_vs[v_index] = 1
 *                                 continue
 */
              __pyx_t_20 = __pyx_v_z_i;
              __pyx_t_21 = __pyx_v_y_i;
              __pyx_t_22 = __pyx_v_x_i;
              __pyx_t_11 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))) == 0.0) != 0);
              if (__pyx_t_11) {

                /* "_marching_cubes_lewiner_cy.pyx":1262
 * 
 *                             if im[z_i,y_i,x_i] == 0.0:
 *                                 visited_vs[v_index] = 1             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1262, __pyx_L1_error)

                /* "_marching_cubes_lewiner_cy.pyx":1263
 *                             if im[z_i,y_i,x_i] == 0.0:
 *                                 visited_vs[v_index] = 1
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             dir_index = -1
 */
                goto __pyx_L16_continue;

                /* "_marching_cubes_lewiner_cy.pyx":1261
 *                                 continue
 * 
 *                             if im[z_i,y_i,x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                 visited_vs[v_index] = 1
 *                                 continue
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1265
 *                                 continue
 * 
 *                             dir_index = -1             # <<<<<<<<<<<<<<
 *                             while dir_index < 5: #from 0 to 5, included
 *                                 dir_index += 1
 */
              __pyx_v_dir_index = -1;

              /* "_marching_cubes_lewiner_cy.pyx":1266
 * 
 *                             dir_index = -1
 *                             while dir_index < 5: #from 0 to 5, included             # <<<<<<<<<<<<<<
 *                                 dir_index += 1
 * 
 */
              while (1) {
                __pyx_t_11 = ((__pyx_v_dir_index < 5) != 0);
                if (!__pyx_t_11) break;

                /* "_marching_cubes_lewiner_cy.pyx":1267
 *                             dir_index = -1
 *                             while dir_index < 5: #from 0 to 5, included
 *                                 dir_index += 1             # <<<<<<<<<<<<<<
 * 
 *                                 dir_z = directions_z[dir_index]
 */
                __pyx_v_dir_index = (__pyx_v_dir_index + 1);

                /* "_marching_cubes_lewiner_cy.pyx":1269
 *                                 dir_index += 1
 * 
 *                                 dir_z = directions_z[dir_index]             # <<<<<<<<<<<<<<
 *                                 dir_y = directions_y[dir_index]
 *                                 dir_x = directions_x[dir_index]
 */
                __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_z), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1269, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_48);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1269, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
                __pyx_v_dir_z = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1270
 * 
 *                                 dir_z = directions_z[dir_index]
 *                                 dir_y = directions_y[dir_index]             # <<<<<<<<<<<<<<
 *                                 dir_x = directions_x[dir_index]
 * 
 */
                __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_y), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1270, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_48);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1270, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
                __pyx_v_dir_y = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1271
 *                                 dir_z = directions_z[dir_index]
 *                                 dir_y = directions_y[dir_index]
 *                                 dir_x = directions_x[dir_index]             # <<<<<<<<<<<<<<
 * 
 *                                 i = 0
 */
                __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_x), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1271, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_48);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_48); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
                __pyx_v_dir_x = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1273
 *                                 dir_x = directions_x[dir_index]
 * 
 *                                 i = 0             # <<<<<<<<<<<<<<
 *                                 max_distance_temp = max_distance
 *                                 while i < max_distance_temp: #from 1 to max_distance, included
 */
                __pyx_v_i = 0;

                /* "_marching_cubes_lewiner_cy.pyx":1274
 * 
 *                                 i = 0
 *                                 max_distance_temp = max_distance             # <<<<<<<<<<<<<<
 *                                 while i < max_distance_temp: #from 1 to max_distance, included
 *                                     i += 1
 */
                __pyx_v_max_distance_temp = __pyx_v_max_distance;

                /* "_marching_cubes_lewiner_cy.pyx":1275
 *                                 i = 0
 *                                 max_distance_temp = max_distance
 *                                 while i < max_distance_temp: #from 1 to max_distance, included             # <<<<<<<<<<<<<<
 *                                     i += 1
 * 
 */
                while (1) {
                  __pyx_t_11 = ((__pyx_v_i < __pyx_v_max_distance_temp) != 0);
                  if (!__pyx_t_11) break;

                  /* "_marching_cubes_lewiner_cy.pyx":1276
 *                                 max_distance_temp = max_distance
 *                                 while i < max_distance_temp: #from 1 to max_distance, included
 *                                     i += 1             # <<<<<<<<<<<<<<
 * 
 *                                     cur_z_i = z_i + i*dir_z
 */
                  __pyx_v_i = (__pyx_v_i + 1);

                  /* "_marching_cubes_lewiner_cy.pyx":1278
 *                                     i += 1
 * 
 *                                     cur_z_i = z_i + i*dir_z             # <<<<<<<<<<<<<<
 *                                     cur_y_i = y_i + i*dir_y
 *                                     cur_x_i = x_i + i*dir_x
 */
                  __pyx_v_cur_z_i = (__pyx_v_z_i + (__pyx_v_i * __pyx_v_dir_z));

                  /* "_marching_cubes_lewiner_cy.pyx":1279
 * 
 *                                     cur_z_i = z_i + i*dir_z
 *                                     cur_y_i = y_i + i*dir_y             # <<<<<<<<<<<<<<
 *                                     cur_x_i = x_i + i*dir_x
 * 
 */
                  __pyx_v_cur_y_i = (__pyx_v_y_i + (__pyx_v_i * __pyx_v_dir_y));

                  /* "_marching_cubes_lewiner_cy.pyx":1280
 *                                     cur_z_i = z_i + i*dir_z
 *                                     cur_y_i = y_i + i*dir_y
 *                                     cur_x_i = x_i + i*dir_x             # <<<<<<<<<<<<<<
 * 
 *                                     #If out of bounds, search on another direction
 */
                  __pyx_v_cur_x_i = (__pyx_v_x_i + (__pyx_v_i * __pyx_v_dir_x));

                  /* "_marching_cubes_lewiner_cy.pyx":1283
 * 
 *                                     #If out of bounds, search on another direction
 *                                     if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):
 */
                  __pyx_t_23 = ((__pyx_v_cur_z_i > __pyx_v_Nz_bound) != 0);
                  if (!__pyx_t_23) {
                  } else {
                    __pyx_t_11 = __pyx_t_23;
                    goto __pyx_L25_bool_binop_done;
                  }
                  __pyx_t_23 = ((__pyx_v_cur_z_i < 0) != 0);
                  if (!__pyx_t_23) {
                  } else {
                    __pyx_t_11 = __pyx_t_23;
                    goto __pyx_L25_bool_binop_done;
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1284
 *                                     #If out of bounds, search on another direction
 *                                     if (cur_z_i > Nz_bound or cur_z_i < 0 or
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or             # <<<<<<<<<<<<<<
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):
 *                                         break
 */
                  __pyx_t_23 = ((__pyx_v_cur_y_i > __pyx_v_Ny_bound) != 0);
                  if (!__pyx_t_23) {
                  } else {
                    __pyx_t_11 = __pyx_t_23;
                    goto __pyx_L25_bool_binop_done;
                  }
                  __pyx_t_23 = ((__pyx_v_cur_y_i < 0) != 0);
                  if (!__pyx_t_23) {
                  } else {
                    __pyx_t_11 = __pyx_t_23;
                    goto __pyx_L25_bool_binop_done;
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1285
 *                                     if (cur_z_i > Nz_bound or cur_z_i < 0 or
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):             # <<<<<<<<<<<<<<
 *                                         break
 * 
 */
                  __pyx_t_23 = ((__pyx_v_cur_x_i > __pyx_v_Nx_bound) != 0);
                  if (!__pyx_t_23) {
                  } else {
                    __pyx_t_11 = __pyx_t_23;
                    goto __pyx_L25_bool_binop_done;
                  }
                  __pyx_t_23 = ((__pyx_v_cur_x_i < 0) != 0);
                  __pyx_t_11 = __pyx_t_23;
                  __pyx_L25_bool_binop_done:;

                  /* "_marching_cubes_lewiner_cy.pyx":1283
 * 
 *                                     #If out of bounds, search on another direction
 *                                     if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):
 */
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1286
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):
 *                                         break             # <<<<<<<<<<<<<<
 * 
 *                                     # If the vertex value is zero, continue to check what's beyond
 */
                    goto __pyx_L23_break;

                    /* "_marching_cubes_lewiner_cy.pyx":1283
 * 
 *                                     #If out of bounds, search on another direction
 *                                     if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                         cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                         cur_x_i > Nx_bound or cur_x_i < 0):
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1289
 * 
 *                                     # If the vertex value is zero, continue to check what's beyond
 *                                     if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                         if i < max_distance_temp:
 *                                             continue
 */
                  __pyx_t_22 = __pyx_v_cur_z_i;
                  __pyx_t_21 = __pyx_v_cur_y_i;
                  __pyx_t_20 = __pyx_v_cur_x_i;
                  __pyx_t_11 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_22 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_20 * __pyx_v_im.strides[2]) ))) == 0.0) != 0);
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1290
 *                                     # If the vertex value is zero, continue to check what's beyond
 *                                     if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                         if i < max_distance_temp:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         else:
 */
                    __pyx_t_11 = ((__pyx_v_i < __pyx_v_max_distance_temp) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1291
 *                                     if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                         if i < max_distance_temp:
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             max_distance_temp = max_distance_temp + 1 #Check one vertex further away
 */
                      goto __pyx_L22_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1290
 *                                     # If the vertex value is zero, continue to check what's beyond
 *                                     if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                         if i < max_distance_temp:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         else:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1293
 *                                             continue
 *                                         else:
 *                                             max_distance_temp = max_distance_temp + 1 #Check one vertex further away             # <<<<<<<<<<<<<<
 *                                             continue
 * 
 */
                    /*else*/ {
                      __pyx_v_max_distance_temp = (__pyx_v_max_distance_temp + 1);

                      /* "_marching_cubes_lewiner_cy.pyx":1294
 *                                         else:
 *                                             max_distance_temp = max_distance_temp + 1 #Check one vertex further away
 *                                             continue             # <<<<<<<<<<<<<<
 * 
 *                                     # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 */
                      goto __pyx_L22_continue;
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1289
 * 
 *                                     # If the vertex value is zero, continue to check what's beyond
 *                                     if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                         if i < max_distance_temp:
 *                                             continue
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1297
 * 
 *                                     # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                     if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                  __pyx_t_20 = __pyx_v_cur_z_i;
                  __pyx_t_21 = __pyx_v_cur_y_i;
                  __pyx_t_22 = __pyx_v_cur_x_i;
                  __pyx_t_11 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))) == 0.0) != 0);
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1298
 *                                     # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                     if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                         continue             # <<<<<<<<<<<<<<
 * 
 *                                     # Normal case
 */
                    goto __pyx_L22_continue;

                    /* "_marching_cubes_lewiner_cy.pyx":1297
 * 
 *                                     # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                     if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1301
 * 
 *                                     # Normal case
 *                                     visited_vs[v_index] += 1             # <<<<<<<<<<<<<<
 *                                     sign_vs[v_index] += signed_im[cur_z_i, cur_y_i, cur_x_i] * compute_edge_vote(grads[z_i,y_i,x_i], grads[cur_z_i, cur_y_i, cur_x_i], dir_z, dir_y, dir_x)
 * 
 */
                  __pyx_t_19 = __pyx_v_v_index;
                  __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_t_19, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1301, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_48);
                  __pyx_t_47 = __Pyx_PyInt_AddObjC(__pyx_t_48, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1301, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_47);
                  __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
                  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_t_19, __pyx_t_47, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1301, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;

                  /* "_marching_cubes_lewiner_cy.pyx":1302
 *                                     # Normal case
 *                                     visited_vs[v_index] += 1
 *                                     sign_vs[v_index] += signed_im[cur_z_i, cur_y_i, cur_x_i] * compute_edge_vote(grads[z_i,y_i,x_i], grads[cur_z_i, cur_y_i, cur_x_i], dir_z, dir_y, dir_x)             # <<<<<<<<<<<<<<
 * 
 *                             # Set the vertex. This value is used to compute adjacent vertices, but is not considered as precomputed, so it will be computed again
 */
                  __pyx_t_19 = __pyx_v_v_index;
                  __pyx_t_47 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_t_19, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1302, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_47);
                  __pyx_t_22 = __pyx_v_cur_z_i;
                  __pyx_t_21 = __pyx_v_cur_y_i;
                  __pyx_t_20 = __pyx_v_cur_x_i;
                  __pyx_t_15.data = __pyx_v_grads.data;
                  __pyx_t_15.memview = __pyx_v_grads.memview;
                  __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                  {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_49.data = __pyx_v_grads.data;
                  __pyx_t_49.memview = __pyx_v_grads.memview;
                  __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                  {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_z_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_y_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_x_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_48 = PyFloat_FromDouble(((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * __pyx_f_26_marching_cubes_lewiner_cy_compute_edge_vote(__pyx_t_15, __pyx_t_49, __pyx_v_dir_z, __pyx_v_dir_y, __pyx_v_dir_x))); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1302, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_48);
                  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                  __pyx_t_15.memview = NULL;
                  __pyx_t_15.data = NULL;
                  __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                  __pyx_t_49.memview = NULL;
                  __pyx_t_49.data = NULL;
                  __pyx_t_46 = PyNumber_InPlaceAdd(__pyx_t_47, __pyx_t_48); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1302, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_46);
                  __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;
                  __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
                  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_t_19, __pyx_t_46, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1302, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
                  __pyx_L22_continue:;
                }
                __pyx_L23_break:;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1305
 * 
 *                             # Set the vertex. This value is used to compute adjacent vertices, but is not considered as precomputed, so it will be computed again
 *                             signed_im[z_i, y_i, x_i] = my_sign(sign_vs[v_index])             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1305, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_46); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1305, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              __pyx_t_20 = __pyx_v_z_i;
              __pyx_t_21 = __pyx_v_y_i;
              __pyx_t_22 = __pyx_v_x_i;
              *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);
              __pyx_L16_continue:;
            }

            /* "_marching_cubes_lewiner_cy.pyx":1311
 * 
 *                         # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                         if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):             # <<<<<<<<<<<<<<
 *                             anchor_sign = 1.
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 */
            __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_48 = PyObject_RichCompare(__pyx_t_46, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_48); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __pyx_t_46 = PyObject_RichCompare(__pyx_t_48, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_46); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_48 = PyObject_RichCompare(__pyx_t_46, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_48); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __pyx_t_46 = PyObject_RichCompare(__pyx_t_48, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_46); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_48 = PyObject_RichCompare(__pyx_t_46, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_48); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __pyx_t_46 = PyObject_RichCompare(__pyx_t_48, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_46); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_46);
            __pyx_t_48 = PyObject_RichCompare(__pyx_t_46, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_48); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            if (__pyx_t_23) {
            } else {
              __pyx_t_11 = __pyx_t_23;
              goto __pyx_L35_bool_binop_done;
            }
            __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_48);
            __pyx_t_46 = PyObject_RichCompare(__pyx_t_48, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_46); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
            __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
            __pyx_t_11 = __pyx_t_23;
            __pyx_L35_bool_binop_done:;
            __pyx_t_23 = ((!__pyx_t_11) != 0);
            if (__pyx_t_23) {

              /* "_marching_cubes_lewiner_cy.pyx":1312
 *                         # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                         if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                             anchor_sign = 1.             # <<<<<<<<<<<<<<
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 */
              __pyx_v_anchor_sign = 1.;

              /* "_marching_cubes_lewiner_cy.pyx":1313
 *                         if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                             anchor_sign = 1.
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 */
              __pyx_t_22 = __pyx_v_z;
              __pyx_t_21 = __pyx_v_y;
              __pyx_t_20 = __pyx_v_x;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L44_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L44_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1314
 *                             anchor_sign = 1.
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 anchor_sign = my_sign(signed_im[z,y,x])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1315
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1313
 *                         if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                             anchor_sign = 1.
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1316
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
              __pyx_t_24 = __pyx_v_z;
              __pyx_t_20 = __pyx_v_y;
              __pyx_t_21 = __pyx_v_x_st;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L46_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L46_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1317
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
                __pyx_t_21 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1318
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1316
 *                                 anchor_sign = my_sign(signed_im[z,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1319
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
              __pyx_t_22 = __pyx_v_z;
              __pyx_t_21 = __pyx_v_y_st;
              __pyx_t_20 = __pyx_v_x;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L48_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L48_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1320
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1321
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1319
 *                                 anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1322
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
              __pyx_t_24 = __pyx_v_z;
              __pyx_t_20 = __pyx_v_y_st;
              __pyx_t_21 = __pyx_v_x_st;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L50_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L50_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1323
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
                __pyx_t_21 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1324
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1322
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1325
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
              __pyx_t_22 = __pyx_v_z_st;
              __pyx_t_21 = __pyx_v_y;
              __pyx_t_20 = __pyx_v_x;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L52_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L52_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1326
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1327
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1325
 *                                 anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1328
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
              __pyx_t_24 = __pyx_v_z_st;
              __pyx_t_20 = __pyx_v_y;
              __pyx_t_21 = __pyx_v_x_st;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L54_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L54_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1329
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
                __pyx_t_21 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1330
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1328
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1331
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
              __pyx_t_22 = __pyx_v_z_st;
              __pyx_t_21 = __pyx_v_y_st;
              __pyx_t_20 = __pyx_v_x;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L56_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L56_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1332
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1333
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]             # <<<<<<<<<<<<<<
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1331
 *                                 anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1334
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
              __pyx_t_24 = __pyx_v_z_st;
              __pyx_t_20 = __pyx_v_y_st;
              __pyx_t_21 = __pyx_v_x_st;
              __pyx_t_11 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L58_bool_binop_done;
              }
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L58_bool_binop_done:;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1335
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x_st])             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 */
                __pyx_t_21 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1336
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]             # <<<<<<<<<<<<<<
 * 
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1334
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                 anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1338
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1339
 * 
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1338
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1340
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1341
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1340
 *                             elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1342
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1343
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1342
 *                             elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1344
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1345
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1344
 *                             elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1346
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1347
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1346
 *                             elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1348
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1349
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1348
 *                             elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1350
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1351
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]             # <<<<<<<<<<<<<<
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 0;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x;
                __pyx_t_22 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = 2;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                __pyx_t_24 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_24 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                /* "_marching_cubes_lewiner_cy.pyx":1350
 *                             elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1352
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                             else:
 */
              __pyx_t_49.data = __pyx_v_grads.data;
              __pyx_t_49.memview = __pyx_v_grads.memview;
              __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
              {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_49) == 0) != 0)) != 0);
              __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
              __pyx_t_49.memview = NULL;
              __pyx_t_49.data = NULL;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1353
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 print('all 0 vec...')
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 0;
                __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = 1;
                __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_22 = 2;
                __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                /* "_marching_cubes_lewiner_cy.pyx":1352
 *                             elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                             elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                             else:
 */
                goto __pyx_L43;
              }

              /* "_marching_cubes_lewiner_cy.pyx":1355
 *                                 base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                             else:
 *                                 print('all 0 vec...')             # <<<<<<<<<<<<<<
 * 
 *                             base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]
 */
              /*else*/ {
                if (__Pyx_PrintOne(0, __pyx_kp_s_all_0_vec) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
              }
              __pyx_L43:;

              /* "_marching_cubes_lewiner_cy.pyx":1357
 *                                 print('all 0 vec...')
 * 
 *                             base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]             # <<<<<<<<<<<<<<
 * 
 *                             if visited_vs[0] == 0:
 */
              __pyx_t_22 = 0;
              __pyx_t_52 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
              __pyx_t_22 = 1;
              __pyx_t_53 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
              __pyx_t_22 = 2;
              __pyx_t_54 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
              __pyx_t_22 = 0;
              *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_52;
              __pyx_t_22 = 1;
              *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_53;
              __pyx_t_22 = 2;
              *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_54;

              /* "_marching_cubes_lewiner_cy.pyx":1359
 *                             base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]
 * 
 *                             if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                             if visited_vs[1] == 0:
 */
              __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1359, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_EqObjC(__pyx_t_46, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1359, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1359, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1360
 * 
 *                             if visited_vs[0] == 0:
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[1] == 0:
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1359
 *                             base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]
 * 
 *                             if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                             if visited_vs[1] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1361
 *                             if visited_vs[0] == 0:
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                             if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                             if visited_vs[2] == 0:
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1361, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_46 = __Pyx_PyInt_EqObjC(__pyx_t_48, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1361, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1361, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1362
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                             if visited_vs[1] == 0:
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[2] == 0:
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1361
 *                             if visited_vs[0] == 0:
 *                                 signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                             if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                             if visited_vs[2] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1363
 *                             if visited_vs[1] == 0:
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                             if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                             if visited_vs[3] == 0:
 */
              __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1363, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_EqObjC(__pyx_t_46, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1363, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1363, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1364
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                             if visited_vs[2] == 0:
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[3] == 0:
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1363
 *                             if visited_vs[1] == 0:
 *                                 signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                             if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                             if visited_vs[3] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1365
 *                             if visited_vs[2] == 0:
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                             if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                             if visited_vs[4] == 0:
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1365, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_46 = __Pyx_PyInt_EqObjC(__pyx_t_48, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1365, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1365, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1366
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                             if visited_vs[3] == 0:
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[4] == 0:
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1365
 *                             if visited_vs[2] == 0:
 *                                 signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                             if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                             if visited_vs[4] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1367
 *                             if visited_vs[3] == 0:
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                             if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                             if visited_vs[5] == 0:
 */
              __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1367, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_EqObjC(__pyx_t_46, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1367, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1367, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1368
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                             if visited_vs[4] == 0:
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[5] == 0:
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1367
 *                             if visited_vs[3] == 0:
 *                                 signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                             if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                             if visited_vs[5] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1369
 *                             if visited_vs[4] == 0:
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                             if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                             if visited_vs[6] == 0:
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_46 = __Pyx_PyInt_EqObjC(__pyx_t_48, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1369, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1369, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1370
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                             if visited_vs[5] == 0:
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[6] == 0:
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1369
 *                             if visited_vs[4] == 0:
 *                                 signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                             if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                             if visited_vs[6] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1371
 *                             if visited_vs[5] == 0:
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                             if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                             if visited_vs[7] == 0:
 */
              __pyx_t_46 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_EqObjC(__pyx_t_46, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1371, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_48); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1371, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1372
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                             if visited_vs[6] == 0:
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))             # <<<<<<<<<<<<<<
 *                             if visited_vs[7] == 0:
 *                                 signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1371
 *                             if visited_vs[5] == 0:
 *                                 signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                             if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                             if visited_vs[7] == 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1373
 *                             if visited_vs[6] == 0:
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                             if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 * 
 */
              __pyx_t_48 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_46 = __Pyx_PyInt_EqObjC(__pyx_t_48, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1373, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_46); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 1373, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_46); __pyx_t_46 = 0;
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1374
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                             if visited_vs[7] == 0:
 *                                 signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_t_49.data = __pyx_v_grads.data;
                __pyx_t_49.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_49));
                __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                __pyx_t_49.memview = NULL;
                __pyx_t_49.data = NULL;

                /* "_marching_cubes_lewiner_cy.pyx":1373
 *                             if visited_vs[6] == 0:
 *                                 signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                             if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                 signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 * 
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1311
 * 
 *                         # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                         if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):             # <<<<<<<<<<<<<<
 *                             anchor_sign = 1.
 *                             if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 */
            }

            /* "_marching_cubes_lewiner_cy.pyx":1377
 * 
 * 
 *                         v0 = signed_im[z,y,x] * im[z   ,y, x]             # <<<<<<<<<<<<<<
 *                         v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                         v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 */
            __pyx_t_22 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_20 = __pyx_v_x;
            __pyx_t_24 = __pyx_v_z;
            __pyx_t_25 = __pyx_v_y;
            __pyx_t_26 = __pyx_v_x;
            __pyx_v_v0 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1378
 * 
 *                         v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                         v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]             # <<<<<<<<<<<<<<
 *                         v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                         v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 */
            __pyx_t_26 = __pyx_v_z;
            __pyx_t_25 = __pyx_v_y;
            __pyx_t_24 = __pyx_v_x_st;
            __pyx_t_20 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_22 = __pyx_v_x_st;
            __pyx_v_v1 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1379
 *                         v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                         v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                         v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]             # <<<<<<<<<<<<<<
 *                         v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                         v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 */
            __pyx_t_22 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_20 = __pyx_v_x_st;
            __pyx_t_24 = __pyx_v_z;
            __pyx_t_25 = __pyx_v_y_st;
            __pyx_t_26 = __pyx_v_x_st;
            __pyx_v_v2 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1380
 *                         v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                         v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                         v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]             # <<<<<<<<<<<<<<
 *                         v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                         v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 */
            __pyx_t_26 = __pyx_v_z;
            __pyx_t_25 = __pyx_v_y_st;
            __pyx_t_24 = __pyx_v_x;
            __pyx_t_20 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_22 = __pyx_v_x;
            __pyx_v_v3 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1381
 *                         v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                         v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                         v4 = signed_im[z_st,y,x] * im[z_st,y, x]             # <<<<<<<<<<<<<<
 *                         v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                         v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 */
            __pyx_t_22 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_20 = __pyx_v_x;
            __pyx_t_24 = __pyx_v_z_st;
            __pyx_t_25 = __pyx_v_y;
            __pyx_t_26 = __pyx_v_x;
            __pyx_v_v4 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1382
 *                         v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                         v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                         v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]             # <<<<<<<<<<<<<<
 *                         v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 *                         v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 */
            __pyx_t_26 = __pyx_v_z_st;
            __pyx_t_25 = __pyx_v_y;
            __pyx_t_24 = __pyx_v_x_st;
            __pyx_t_20 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_22 = __pyx_v_x_st;
            __pyx_v_v5 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1383
 *                         v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                         v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                         v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]             # <<<<<<<<<<<<<<
 *                         v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 * 
 */
            __pyx_t_22 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_20 = __pyx_v_x_st;
            __pyx_t_24 = __pyx_v_z_st;
            __pyx_t_25 = __pyx_v_y_st;
            __pyx_t_26 = __pyx_v_x_st;
            __pyx_v_v6 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1384
 *                         v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                         v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 *                         v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]             # <<<<<<<<<<<<<<
 * 
 *                         cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)
 */
            __pyx_t_26 = __pyx_v_z_st;
            __pyx_t_25 = __pyx_v_y_st;
            __pyx_t_24 = __pyx_v_x;
            __pyx_t_20 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_22 = __pyx_v_x;
            __pyx_v_v7 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

            /* "_marching_cubes_lewiner_cy.pyx":1386
 *                         v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 * 
 *                         cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)             # <<<<<<<<<<<<<<
 * 
 *                         signed_im_mask[z,y,x] = True
 */
            ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->set_cube(__pyx_v_cell, 0.0, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_st, __pyx_v_v0, __pyx_v_v1, __pyx_v_v2, __pyx_v_v3, __pyx_v_v4, __pyx_v_v5, __pyx_v_v6, __pyx_v_v7);

            /* "_marching_cubes_lewiner_cy.pyx":1388
 *                         cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)
 * 
 *                         signed_im_mask[z,y,x] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z,y,x_st] = True
 *                         signed_im_mask[z,y_st,x_st] = True
 */
            __pyx_t_22 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_20 = __pyx_v_x;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1389
 * 
 *                         signed_im_mask[z,y,x] = True
 *                         signed_im_mask[z,y,x_st] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z,y_st,x_st] = True
 *                         signed_im_mask[z,y_st,x] = True
 */
            __pyx_t_20 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_22 = __pyx_v_x_st;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1390
 *                         signed_im_mask[z,y,x] = True
 *                         signed_im_mask[z,y,x_st] = True
 *                         signed_im_mask[z,y_st,x_st] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z,y_st,x] = True
 *                         signed_im_mask[z_st,y,x] = True
 */
            __pyx_t_22 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_20 = __pyx_v_x_st;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1391
 *                         signed_im_mask[z,y,x_st] = True
 *                         signed_im_mask[z,y_st,x_st] = True
 *                         signed_im_mask[z,y_st,x] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z_st,y,x] = True
 *                         signed_im_mask[z_st,y,x_st] = True
 */
            __pyx_t_20 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_22 = __pyx_v_x;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1392
 *                         signed_im_mask[z,y_st,x_st] = True
 *                         signed_im_mask[z,y_st,x] = True
 *                         signed_im_mask[z_st,y,x] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z_st,y,x_st] = True
 *                         signed_im_mask[z_st,y_st,x_st] = True
 */
            __pyx_t_22 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_20 = __pyx_v_x;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1393
 *                         signed_im_mask[z,y_st,x] = True
 *                         signed_im_mask[z_st,y,x] = True
 *                         signed_im_mask[z_st,y,x_st] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z_st,y_st,x_st] = True
 *                         signed_im_mask[z_st,y_st,x] = True
 */
            __pyx_t_20 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_22 = __pyx_v_x_st;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1394
 *                         signed_im_mask[z_st,y,x] = True
 *                         signed_im_mask[z_st,y,x_st] = True
 *                         signed_im_mask[z_st,y_st,x_st] = True             # <<<<<<<<<<<<<<
 *                         signed_im_mask[z_st,y_st,x] = True
 * 
 */
            __pyx_t_22 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_20 = __pyx_v_x_st;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1395
 *                         signed_im_mask[z_st,y,x_st] = True
 *                         signed_im_mask[z_st,y_st,x_st] = True
 *                         signed_im_mask[z_st,y_st,x] = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_t_20 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_22 = __pyx_v_x;
            *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

            /* "_marching_cubes_lewiner_cy.pyx":1399
 * 
 *                         # Get case, if non-nul, enter the big switch
 *                         case = luts.CASES.get2(cell.index, 0)             # <<<<<<<<<<<<<<
 *                         if case > 0:
 * 
 */
            __pyx_v_case = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->CASES->__pyx_vtab)->get2(__pyx_v_luts->CASES, __pyx_v_cell->index, 0);

            /* "_marching_cubes_lewiner_cy.pyx":1400
 *                         # Get case, if non-nul, enter the big switch
 *                         case = luts.CASES.get2(cell.index, 0)
 *                         if case > 0:             # <<<<<<<<<<<<<<
 * 
 *                             config = luts.CASES.get2(cell.index, 1)
 */
            __pyx_t_23 = ((__pyx_v_case > 0) != 0);
            if (__pyx_t_23) {

              /* "_marching_cubes_lewiner_cy.pyx":1402
 *                         if case > 0:
 * 
 *                             config = luts.CASES.get2(cell.index, 1)             # <<<<<<<<<<<<<<
 *                             visited[z,y,x] = True
 * 
 */
              __pyx_v_config = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->CASES->__pyx_vtab)->get2(__pyx_v_luts->CASES, __pyx_v_cell->index, 1);

              /* "_marching_cubes_lewiner_cy.pyx":1403
 * 
 *                             config = luts.CASES.get2(cell.index, 1)
 *                             visited[z,y,x] = True             # <<<<<<<<<<<<<<
 * 
 *                             the_big_switch(luts, cell, case, config)
 */
              __pyx_t_22 = __pyx_v_z;
              __pyx_t_21 = __pyx_v_y;
              __pyx_t_20 = __pyx_v_x;
              *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_22 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_20 * __pyx_v_visited.strides[2]) )) = 1;

              /* "_marching_cubes_lewiner_cy.pyx":1405
 *                             visited[z,y,x] = True
 * 
 *                             the_big_switch(luts, cell, case, config)             # <<<<<<<<<<<<<<
 * 
 *                             if x_st < Nx_bound:
 */
              (void)(__pyx_f_26_marching_cubes_lewiner_cy_the_big_switch(__pyx_v_luts, __pyx_v_cell, __pyx_v_case, __pyx_v_config));

              /* "_marching_cubes_lewiner_cy.pyx":1407
 *                             the_big_switch(luts, cell, case, config)
 * 
 *                             if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y,x_st))
 *                             if y_st < Ny_bound:
 */
              __pyx_t_23 = ((__pyx_v_x_st < __pyx_v_Nx_bound) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1408
 * 
 *                             if x_st < Nx_bound:
 *                                 queue.push_back((z,y,x_st))             # <<<<<<<<<<<<<<
 *                             if y_st < Ny_bound:
 *                                 queue.push_back((z,y_st,x))
 */
                __pyx_t_55.f0 = __pyx_v_z;
                __pyx_t_55.f1 = __pyx_v_y;
                __pyx_t_55.f2 = __pyx_v_x_st;
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1407
 *                             the_big_switch(luts, cell, case, config)
 * 
 *                             if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y,x_st))
 *                             if y_st < Ny_bound:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1409
 *                             if x_st < Nx_bound:
 *                                 queue.push_back((z,y,x_st))
 *                             if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y_st,x))
 *                             if x-st >= 0:
 */
              __pyx_t_23 = ((__pyx_v_y_st < __pyx_v_Ny_bound) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1410
 *                                 queue.push_back((z,y,x_st))
 *                             if y_st < Ny_bound:
 *                                 queue.push_back((z,y_st,x))             # <<<<<<<<<<<<<<
 *                             if x-st >= 0:
 *                                 queue.push_back((z,y,x-st))
 */
                __pyx_t_55.f0 = __pyx_v_z;
                __pyx_t_55.f1 = __pyx_v_y_st;
                __pyx_t_55.f2 = __pyx_v_x;
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1409
 *                             if x_st < Nx_bound:
 *                                 queue.push_back((z,y,x_st))
 *                             if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y_st,x))
 *                             if x-st >= 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1411
 *                             if y_st < Ny_bound:
 *                                 queue.push_back((z,y_st,x))
 *                             if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y,x-st))
 *                             if y-st >= 0:
 */
              __pyx_t_23 = (((__pyx_v_x - __pyx_v_st) >= 0) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1412
 *                                 queue.push_back((z,y_st,x))
 *                             if x-st >= 0:
 *                                 queue.push_back((z,y,x-st))             # <<<<<<<<<<<<<<
 *                             if y-st >= 0:
 *                                 queue.push_back((z,y-st,x))
 */
                __pyx_t_55.f0 = __pyx_v_z;
                __pyx_t_55.f1 = __pyx_v_y;
                __pyx_t_55.f2 = (__pyx_v_x - __pyx_v_st);
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1411
 *                             if y_st < Ny_bound:
 *                                 queue.push_back((z,y_st,x))
 *                             if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y,x-st))
 *                             if y-st >= 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1413
 *                             if x-st >= 0:
 *                                 queue.push_back((z,y,x-st))
 *                             if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y-st,x))
 *                             if z-st >= 0:
 */
              __pyx_t_23 = (((__pyx_v_y - __pyx_v_st) >= 0) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1414
 *                                 queue.push_back((z,y,x-st))
 *                             if y-st >= 0:
 *                                 queue.push_back((z,y-st,x))             # <<<<<<<<<<<<<<
 *                             if z-st >= 0:
 *                                 queue.push_back((z-st,y,x))
 */
                __pyx_t_55.f0 = __pyx_v_z;
                __pyx_t_55.f1 = (__pyx_v_y - __pyx_v_st);
                __pyx_t_55.f2 = __pyx_v_x;
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1413
 *                             if x-st >= 0:
 *                                 queue.push_back((z,y,x-st))
 *                             if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z,y-st,x))
 *                             if z-st >= 0:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1415
 *                             if y-st >= 0:
 *                                 queue.push_back((z,y-st,x))
 *                             if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z-st,y,x))
 *                             if z_st < Nz_bound:
 */
              __pyx_t_23 = (((__pyx_v_z - __pyx_v_st) >= 0) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1416
 *                                 queue.push_back((z,y-st,x))
 *                             if z-st >= 0:
 *                                 queue.push_back((z-st,y,x))             # <<<<<<<<<<<<<<
 *                             if z_st < Nz_bound:
 *                                 queue.push_back((z_st,y,x))
 */
                __pyx_t_55.f0 = (__pyx_v_z - __pyx_v_st);
                __pyx_t_55.f1 = __pyx_v_y;
                __pyx_t_55.f2 = __pyx_v_x;
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1415
 *                             if y-st >= 0:
 *                                 queue.push_back((z,y-st,x))
 *                             if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z-st,y,x))
 *                             if z_st < Nz_bound:
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1417
 *                             if z-st >= 0:
 *                                 queue.push_back((z-st,y,x))
 *                             if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z_st,y,x))
 * 
 */
              __pyx_t_23 = ((__pyx_v_z_st < __pyx_v_Nz_bound) != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1418
 *                                 queue.push_back((z-st,y,x))
 *                             if z_st < Nz_bound:
 *                                 queue.push_back((z_st,y,x))             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_t_55.f0 = __pyx_v_z_st;
                __pyx_t_55.f1 = __pyx_v_y;
                __pyx_t_55.f2 = __pyx_v_x;
                __pyx_v_queue.push_back(__pyx_t_55);

                /* "_marching_cubes_lewiner_cy.pyx":1417
 *                             if z-st >= 0:
 *                                 queue.push_back((z-st,y,x))
 *                             if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                 queue.push_back((z_st,y,x))
 * 
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1400
 *                         # Get case, if non-nul, enter the big switch
 *                         case = luts.CASES.get2(cell.index, 0)
 *                         if case > 0:             # <<<<<<<<<<<<<<
 * 
 *                             config = luts.CASES.get2(cell.index, 1)
 */
              goto __pyx_L68;
            }

            /* "_marching_cubes_lewiner_cy.pyx":1422
 * 
 *                         else:
 *                             visited[z,y,x] = True             # <<<<<<<<<<<<<<
 *                             continue
 *                     else:
 */
            /*else*/ {
              __pyx_t_20 = __pyx_v_z;
              __pyx_t_21 = __pyx_v_y;
              __pyx_t_22 = __pyx_v_x;
              *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_20 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_22 * __pyx_v_visited.strides[2]) )) = 1;

              /* "_marching_cubes_lewiner_cy.pyx":1423
 *                         else:
 *                             visited[z,y,x] = True
 *                             continue             # <<<<<<<<<<<<<<
 *                     else:
 *                         continue
 */
              goto __pyx_L7_continue;
            }
            __pyx_L68:;

            /* "_marching_cubes_lewiner_cy.pyx":1215
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                     im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                         max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
            goto __pyx_L13;
          }

          /* "_marching_cubes_lewiner_cy.pyx":1425
 *                             continue
 *                     else:
 *                         continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     continue
 */
          /*else*/ {
            goto __pyx_L7_continue;
          }
          __pyx_L13:;

          /* "_marching_cubes_lewiner_cy.pyx":1213
 *                 x_st = x+st
 * 
 *                 if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):             # <<<<<<<<<<<<<<
 * 
 *                     if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          goto __pyx_L9;
        }

        /* "_marching_cubes_lewiner_cy.pyx":1427
 *                         continue
 *                 else:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          goto __pyx_L7_continue;
        }
        __pyx_L9:;

        /* "_marching_cubes_lewiner_cy.pyx":1433
 *                 # We now use this cube as the starting point and start the breadth-first exploration.
 * 
 *                 unsure_cases_visit_neighbours = True             # <<<<<<<<<<<<<<
 *                 while queue.empty() == False or unsure_cases_queue.empty() == False or non_trivial_mc_cases_queue.empty() == False:
 * 
 */
        __pyx_v_unsure_cases_visit_neighbours = 1;

        /* "_marching_cubes_lewiner_cy.pyx":1434
 * 
 *                 unsure_cases_visit_neighbours = True
 *                 while queue.empty() == False or unsure_cases_queue.empty() == False or non_trivial_mc_cases_queue.empty() == False:             # <<<<<<<<<<<<<<
 * 
 *                     if queue.empty():
 */
        while (1) {
          __pyx_t_11 = ((__pyx_v_queue.empty() == 0) != 0);
          if (!__pyx_t_11) {
          } else {
            __pyx_t_23 = __pyx_t_11;
            goto __pyx_L77_bool_binop_done;
          }
          __pyx_t_11 = ((__pyx_v_unsure_cases_queue.empty() == 0) != 0);
          if (!__pyx_t_11) {
          } else {
            __pyx_t_23 = __pyx_t_11;
            goto __pyx_L77_bool_binop_done;
          }
          __pyx_t_11 = ((__pyx_v_non_trivial_mc_cases_queue.empty() == 0) != 0);
          __pyx_t_23 = __pyx_t_11;
          __pyx_L77_bool_binop_done:;
          if (!__pyx_t_23) break;

          /* "_marching_cubes_lewiner_cy.pyx":1436
 *                 while queue.empty() == False or unsure_cases_queue.empty() == False or non_trivial_mc_cases_queue.empty() == False:
 * 
 *                     if queue.empty():             # <<<<<<<<<<<<<<
 *                         if unsure_cases_queue.empty():
 *                             current_tuple = non_trivial_mc_cases_queue.front()
 */
          __pyx_t_23 = (__pyx_v_queue.empty() != 0);
          if (__pyx_t_23) {

            /* "_marching_cubes_lewiner_cy.pyx":1437
 * 
 *                     if queue.empty():
 *                         if unsure_cases_queue.empty():             # <<<<<<<<<<<<<<
 *                             current_tuple = non_trivial_mc_cases_queue.front()
 *                             non_trivial_mc_cases_queue.pop_front()
 */
            __pyx_t_23 = (__pyx_v_unsure_cases_queue.empty() != 0);
            if (__pyx_t_23) {

              /* "_marching_cubes_lewiner_cy.pyx":1438
 *                     if queue.empty():
 *                         if unsure_cases_queue.empty():
 *                             current_tuple = non_trivial_mc_cases_queue.front()             # <<<<<<<<<<<<<<
 *                             non_trivial_mc_cases_queue.pop_front()
 *                         else:
 */
              __pyx_v_current_tuple = __pyx_v_non_trivial_mc_cases_queue.front();

              /* "_marching_cubes_lewiner_cy.pyx":1439
 *                         if unsure_cases_queue.empty():
 *                             current_tuple = non_trivial_mc_cases_queue.front()
 *                             non_trivial_mc_cases_queue.pop_front()             # <<<<<<<<<<<<<<
 *                         else:
 *                             current_tuple = unsure_cases_queue.front()
 */
              __pyx_v_non_trivial_mc_cases_queue.pop_front();

              /* "_marching_cubes_lewiner_cy.pyx":1437
 * 
 *                     if queue.empty():
 *                         if unsure_cases_queue.empty():             # <<<<<<<<<<<<<<
 *                             current_tuple = non_trivial_mc_cases_queue.front()
 *                             non_trivial_mc_cases_queue.pop_front()
 */
              goto __pyx_L81;
            }

            /* "_marching_cubes_lewiner_cy.pyx":1441
 *                             non_trivial_mc_cases_queue.pop_front()
 *                         else:
 *                             current_tuple = unsure_cases_queue.front()             # <<<<<<<<<<<<<<
 * 
 *                             # If a cube is taken from the queue with low threshold cases, compute first its neighbors then the cube itself
 */
            /*else*/ {
              __pyx_v_current_tuple = __pyx_v_unsure_cases_queue.front();

              /* "_marching_cubes_lewiner_cy.pyx":1448
 *                             # (Note: they could still be part of the search and thus produce faces if they are visited again during the normal exploration)
 *                             # After visiting such cubes, we re-visit the unsure case that requested them to increase its reliability.
 *                             if unsure_cases_visit_neighbours:             # <<<<<<<<<<<<<<
 * 
 *                                 z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]
 */
              __pyx_t_23 = (__pyx_v_unsure_cases_visit_neighbours != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1450
 *                             if unsure_cases_visit_neighbours:
 * 
 *                                 z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]             # <<<<<<<<<<<<<<
 * 
 *                                 if visited[z,y,x] == True:
 */
                __pyx_t_19 = __pyx_v_current_tuple.f0;
                __pyx_t_18 = __pyx_v_current_tuple.f1;
                __pyx_t_17 = __pyx_v_current_tuple.f2;
                __pyx_v_z = __pyx_t_19;
                __pyx_v_y = __pyx_t_18;
                __pyx_v_x = __pyx_t_17;

                /* "_marching_cubes_lewiner_cy.pyx":1452
 *                                 z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]
 * 
 *                                 if visited[z,y,x] == True:             # <<<<<<<<<<<<<<
 *                                     unsure_cases_queue.pop_front()
 *                                     continue
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_23 = (((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_22 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_20 * __pyx_v_visited.strides[2]) ))) == 1) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1453
 * 
 *                                 if visited[z,y,x] == True:
 *                                     unsure_cases_queue.pop_front()             # <<<<<<<<<<<<<<
 *                                     continue
 * 
 */
                  __pyx_v_unsure_cases_queue.pop_front();

                  /* "_marching_cubes_lewiner_cy.pyx":1454
 *                                 if visited[z,y,x] == True:
 *                                     unsure_cases_queue.pop_front()
 *                                     continue             # <<<<<<<<<<<<<<
 * 
 *                                 z_st = z+st
 */
                  goto __pyx_L75_continue;

                  /* "_marching_cubes_lewiner_cy.pyx":1452
 *                                 z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]
 * 
 *                                 if visited[z,y,x] == True:             # <<<<<<<<<<<<<<
 *                                     unsure_cases_queue.pop_front()
 *                                     continue
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1456
 *                                     continue
 * 
 *                                 z_st = z+st             # <<<<<<<<<<<<<<
 *                                 y_st = y+st
 *                                 x_st = x+st
 */
                __pyx_v_z_st = (__pyx_v_z + __pyx_v_st);

                /* "_marching_cubes_lewiner_cy.pyx":1457
 * 
 *                                 z_st = z+st
 *                                 y_st = y+st             # <<<<<<<<<<<<<<
 *                                 x_st = x+st
 * 
 */
                __pyx_v_y_st = (__pyx_v_y + __pyx_v_st);

                /* "_marching_cubes_lewiner_cy.pyx":1458
 *                                 z_st = z+st
 *                                 y_st = y+st
 *                                 x_st = x+st             # <<<<<<<<<<<<<<
 * 
 *                                 if x_st < Nx_bound:
 */
                __pyx_v_x_st = (__pyx_v_x + __pyx_v_st);

                /* "_marching_cubes_lewiner_cy.pyx":1460
 *                                 x_st = x+st
 * 
 *                                 if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y,x_st))
 *                                 if y_st < Ny_bound:
 */
                __pyx_t_23 = ((__pyx_v_x_st < __pyx_v_Nx_bound) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1461
 * 
 *                                 if x_st < Nx_bound:
 *                                     queue.push_back((z,y,x_st))             # <<<<<<<<<<<<<<
 *                                 if y_st < Ny_bound:
 *                                     queue.push_back((z,y_st,x))
 */
                  __pyx_t_55.f0 = __pyx_v_z;
                  __pyx_t_55.f1 = __pyx_v_y;
                  __pyx_t_55.f2 = __pyx_v_x_st;
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1460
 *                                 x_st = x+st
 * 
 *                                 if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y,x_st))
 *                                 if y_st < Ny_bound:
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1462
 *                                 if x_st < Nx_bound:
 *                                     queue.push_back((z,y,x_st))
 *                                 if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y_st,x))
 *                                 if x-st >= 0:
 */
                __pyx_t_23 = ((__pyx_v_y_st < __pyx_v_Ny_bound) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1463
 *                                     queue.push_back((z,y,x_st))
 *                                 if y_st < Ny_bound:
 *                                     queue.push_back((z,y_st,x))             # <<<<<<<<<<<<<<
 *                                 if x-st >= 0:
 *                                     queue.push_back((z,y,x-st))
 */
                  __pyx_t_55.f0 = __pyx_v_z;
                  __pyx_t_55.f1 = __pyx_v_y_st;
                  __pyx_t_55.f2 = __pyx_v_x;
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1462
 *                                 if x_st < Nx_bound:
 *                                     queue.push_back((z,y,x_st))
 *                                 if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y_st,x))
 *                                 if x-st >= 0:
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1464
 *                                 if y_st < Ny_bound:
 *                                     queue.push_back((z,y_st,x))
 *                                 if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y,x-st))
 *                                 if y-st >= 0:
 */
                __pyx_t_23 = (((__pyx_v_x - __pyx_v_st) >= 0) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1465
 *                                     queue.push_back((z,y_st,x))
 *                                 if x-st >= 0:
 *                                     queue.push_back((z,y,x-st))             # <<<<<<<<<<<<<<
 *                                 if y-st >= 0:
 *                                     queue.push_back((z,y-st,x))
 */
                  __pyx_t_55.f0 = __pyx_v_z;
                  __pyx_t_55.f1 = __pyx_v_y;
                  __pyx_t_55.f2 = (__pyx_v_x - __pyx_v_st);
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1464
 *                                 if y_st < Ny_bound:
 *                                     queue.push_back((z,y_st,x))
 *                                 if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y,x-st))
 *                                 if y-st >= 0:
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1466
 *                                 if x-st >= 0:
 *                                     queue.push_back((z,y,x-st))
 *                                 if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y-st,x))
 *                                 if z-st >= 0:
 */
                __pyx_t_23 = (((__pyx_v_y - __pyx_v_st) >= 0) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1467
 *                                     queue.push_back((z,y,x-st))
 *                                 if y-st >= 0:
 *                                     queue.push_back((z,y-st,x))             # <<<<<<<<<<<<<<
 *                                 if z-st >= 0:
 *                                     queue.push_back((z-st,y,x))
 */
                  __pyx_t_55.f0 = __pyx_v_z;
                  __pyx_t_55.f1 = (__pyx_v_y - __pyx_v_st);
                  __pyx_t_55.f2 = __pyx_v_x;
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1466
 *                                 if x-st >= 0:
 *                                     queue.push_back((z,y,x-st))
 *                                 if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z,y-st,x))
 *                                 if z-st >= 0:
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1468
 *                                 if y-st >= 0:
 *                                     queue.push_back((z,y-st,x))
 *                                 if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z-st,y,x))
 *                                 if z_st < Nz_bound:
 */
                __pyx_t_23 = (((__pyx_v_z - __pyx_v_st) >= 0) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1469
 *                                     queue.push_back((z,y-st,x))
 *                                 if z-st >= 0:
 *                                     queue.push_back((z-st,y,x))             # <<<<<<<<<<<<<<
 *                                 if z_st < Nz_bound:
 *                                     queue.push_back((z_st,y,x))
 */
                  __pyx_t_55.f0 = (__pyx_v_z - __pyx_v_st);
                  __pyx_t_55.f1 = __pyx_v_y;
                  __pyx_t_55.f2 = __pyx_v_x;
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1468
 *                                 if y-st >= 0:
 *                                     queue.push_back((z,y-st,x))
 *                                 if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z-st,y,x))
 *                                 if z_st < Nz_bound:
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1470
 *                                 if z-st >= 0:
 *                                     queue.push_back((z-st,y,x))
 *                                 if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z_st,y,x))
 * 
 */
                __pyx_t_23 = ((__pyx_v_z_st < __pyx_v_Nz_bound) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1471
 *                                     queue.push_back((z-st,y,x))
 *                                 if z_st < Nz_bound:
 *                                     queue.push_back((z_st,y,x))             # <<<<<<<<<<<<<<
 * 
 *                                 unsure_cases_visit_neighbours = False
 */
                  __pyx_t_55.f0 = __pyx_v_z_st;
                  __pyx_t_55.f1 = __pyx_v_y;
                  __pyx_t_55.f2 = __pyx_v_x;
                  __pyx_v_queue.push_back(__pyx_t_55);

                  /* "_marching_cubes_lewiner_cy.pyx":1470
 *                                 if z-st >= 0:
 *                                     queue.push_back((z-st,y,x))
 *                                 if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                     queue.push_back((z_st,y,x))
 * 
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1473
 *                                     queue.push_back((z_st,y,x))
 * 
 *                                 unsure_cases_visit_neighbours = False             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                __pyx_v_unsure_cases_visit_neighbours = 0;

                /* "_marching_cubes_lewiner_cy.pyx":1474
 * 
 *                                 unsure_cases_visit_neighbours = False
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             else:
 */
                goto __pyx_L75_continue;

                /* "_marching_cubes_lewiner_cy.pyx":1448
 *                             # (Note: they could still be part of the search and thus produce faces if they are visited again during the normal exploration)
 *                             # After visiting such cubes, we re-visit the unsure case that requested them to increase its reliability.
 *                             if unsure_cases_visit_neighbours:             # <<<<<<<<<<<<<<
 * 
 *                                 z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1477
 * 
 *                             else:
 *                                 unsure_cases_queue.pop_front()             # <<<<<<<<<<<<<<
 *                                 unsure_cases_visit_neighbours = True
 * 
 */
              /*else*/ {
                __pyx_v_unsure_cases_queue.pop_front();

                /* "_marching_cubes_lewiner_cy.pyx":1478
 *                             else:
 *                                 unsure_cases_queue.pop_front()
 *                                 unsure_cases_visit_neighbours = True             # <<<<<<<<<<<<<<
 * 
 *                     else:
 */
                __pyx_v_unsure_cases_visit_neighbours = 1;
              }
            }
            __pyx_L81:;

            /* "_marching_cubes_lewiner_cy.pyx":1436
 *                 while queue.empty() == False or unsure_cases_queue.empty() == False or non_trivial_mc_cases_queue.empty() == False:
 * 
 *                     if queue.empty():             # <<<<<<<<<<<<<<
 *                         if unsure_cases_queue.empty():
 *                             current_tuple = non_trivial_mc_cases_queue.front()
 */
            goto __pyx_L80;
          }

          /* "_marching_cubes_lewiner_cy.pyx":1481
 * 
 *                     else:
 *                         current_tuple = queue.front()             # <<<<<<<<<<<<<<
 *                         queue.pop_front()
 * 
 */
          /*else*/ {
            __pyx_v_current_tuple = __pyx_v_queue.front();

            /* "_marching_cubes_lewiner_cy.pyx":1482
 *                     else:
 *                         current_tuple = queue.front()
 *                         queue.pop_front()             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_v_queue.pop_front();
          }
          __pyx_L80:;

          /* "_marching_cubes_lewiner_cy.pyx":1485
 * 
 * 
 *                     z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]             # <<<<<<<<<<<<<<
 * 
 *                     z_st = z+st
 */
          __pyx_t_17 = __pyx_v_current_tuple.f0;
          __pyx_t_18 = __pyx_v_current_tuple.f1;
          __pyx_t_19 = __pyx_v_current_tuple.f2;
          __pyx_v_z = __pyx_t_17;
          __pyx_v_y = __pyx_t_18;
          __pyx_v_x = __pyx_t_19;

          /* "_marching_cubes_lewiner_cy.pyx":1487
 *                     z, y, x = current_tuple[0], current_tuple[1], current_tuple[2]
 * 
 *                     z_st = z+st             # <<<<<<<<<<<<<<
 *                     y_st = y+st
 *                     x_st = x+st
 */
          __pyx_v_z_st = (__pyx_v_z + __pyx_v_st);

          /* "_marching_cubes_lewiner_cy.pyx":1488
 * 
 *                     z_st = z+st
 *                     y_st = y+st             # <<<<<<<<<<<<<<
 *                     x_st = x+st
 * 
 */
          __pyx_v_y_st = (__pyx_v_y + __pyx_v_st);

          /* "_marching_cubes_lewiner_cy.pyx":1489
 *                     z_st = z+st
 *                     y_st = y+st
 *                     x_st = x+st             # <<<<<<<<<<<<<<
 * 
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 */
          __pyx_v_x_st = (__pyx_v_x + __pyx_v_st);

          /* "_marching_cubes_lewiner_cy.pyx":1491
 *                     x_st = x+st
 * 
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):             # <<<<<<<<<<<<<<
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          __pyx_t_20 = __pyx_v_z;
          __pyx_t_21 = __pyx_v_y;
          __pyx_t_22 = __pyx_v_x;
          __pyx_t_11 = (((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_20 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_22 * __pyx_v_visited.strides[2]) ))) == 0) != 0);
          if (__pyx_t_11) {
          } else {
            __pyx_t_23 = __pyx_t_11;
            goto __pyx_L91_bool_binop_done;
          }
          __pyx_t_11 = (__pyx_v_no_mask != 0);
          if (!__pyx_t_11) {
          } else {
            __pyx_t_23 = __pyx_t_11;
            goto __pyx_L91_bool_binop_done;
          }
          __pyx_t_22 = __pyx_v_z_st;
          __pyx_t_21 = __pyx_v_y_st;
          __pyx_t_20 = __pyx_v_x_st;
          __pyx_t_11 = ((*__Pyx_BufPtrStrided3d(npy_bool *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_mask.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_mask.diminfo[1].strides, __pyx_t_20, __pyx_pybuffernd_mask.diminfo[2].strides)) != 0);
          __pyx_t_23 = __pyx_t_11;
          __pyx_L91_bool_binop_done:;
          if (__pyx_t_23) {

            /* "_marching_cubes_lewiner_cy.pyx":1493
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
            __pyx_t_20 = __pyx_v_z;
            __pyx_t_21 = __pyx_v_y;
            __pyx_t_22 = __pyx_v_x;
            __pyx_t_24 = __pyx_v_z;
            __pyx_t_25 = __pyx_v_y;
            __pyx_t_26 = __pyx_v_x_st;
            __pyx_t_27 = __pyx_v_z;
            __pyx_t_28 = __pyx_v_y_st;
            __pyx_t_29 = __pyx_v_x_st;
            __pyx_t_30 = __pyx_v_z;
            __pyx_t_31 = __pyx_v_y_st;
            __pyx_t_32 = __pyx_v_x;

            /* "_marching_cubes_lewiner_cy.pyx":1494
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and             # <<<<<<<<<<<<<<
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 */
            __pyx_t_33 = __pyx_v_z_st;
            __pyx_t_34 = __pyx_v_y;
            __pyx_t_35 = __pyx_v_x;
            __pyx_t_36 = __pyx_v_z_st;
            __pyx_t_37 = __pyx_v_y;
            __pyx_t_38 = __pyx_v_x_st;
            __pyx_t_39 = __pyx_v_z_st;
            __pyx_t_40 = __pyx_v_y_st;
            __pyx_t_41 = __pyx_v_x_st;
            __pyx_t_42 = __pyx_v_z_st;
            __pyx_t_43 = __pyx_v_y_st;
            __pyx_t_44 = __pyx_v_x;

            /* "_marching_cubes_lewiner_cy.pyx":1493
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
            __pyx_t_11 = ((__pyx_f_26_marching_cubes_lewiner_cy_avg_cube((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_27 * __pyx_v_im.strides[0]) ) + __pyx_t_28 * __pyx_v_im.strides[1]) ) + __pyx_t_29 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_30 * __pyx_v_im.strides[0]) ) + __pyx_t_31 * __pyx_v_im.strides[1]) ) + __pyx_t_32 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_33 * __pyx_v_im.strides[0]) ) + __pyx_t_34 * __pyx_v_im.strides[1]) ) + __pyx_t_35 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_36 * __pyx_v_im.strides[0]) ) + __pyx_t_37 * __pyx_v_im.strides[1]) ) + __pyx_t_38 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_39 * __pyx_v_im.strides[0]) ) + __pyx_t_40 * __pyx_v_im.strides[1]) ) + __pyx_t_41 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_42 * __pyx_v_im.strides[0]) ) + __pyx_t_43 * __pyx_v_im.strides[1]) ) + __pyx_t_44 * __pyx_v_im.strides[2]) )))) < __pyx_v_avg_cube_val_thresh) != 0);
            if (__pyx_t_11) {
            } else {
              __pyx_t_23 = __pyx_t_11;
              goto __pyx_L95_bool_binop_done;
            }

            /* "_marching_cubes_lewiner_cy.pyx":1495
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 */
            __pyx_t_44 = __pyx_v_z;
            __pyx_t_43 = __pyx_v_y;
            __pyx_t_42 = __pyx_v_x;
            __pyx_t_41 = __pyx_v_z;
            __pyx_t_40 = __pyx_v_y;
            __pyx_t_39 = __pyx_v_x_st;
            __pyx_t_38 = __pyx_v_z;
            __pyx_t_37 = __pyx_v_y_st;
            __pyx_t_36 = __pyx_v_x_st;
            __pyx_t_35 = __pyx_v_z;
            __pyx_t_34 = __pyx_v_y_st;
            __pyx_t_33 = __pyx_v_x;

            /* "_marching_cubes_lewiner_cy.pyx":1496
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):             # <<<<<<<<<<<<<<
 * 
 *                             vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 */
            __pyx_t_32 = __pyx_v_z_st;
            __pyx_t_31 = __pyx_v_y;
            __pyx_t_30 = __pyx_v_x;
            __pyx_t_29 = __pyx_v_z_st;
            __pyx_t_28 = __pyx_v_y;
            __pyx_t_27 = __pyx_v_x_st;
            __pyx_t_26 = __pyx_v_z_st;
            __pyx_t_25 = __pyx_v_y_st;
            __pyx_t_24 = __pyx_v_x_st;
            __pyx_t_22 = __pyx_v_z_st;
            __pyx_t_21 = __pyx_v_y_st;
            __pyx_t_20 = __pyx_v_x;

            /* "_marching_cubes_lewiner_cy.pyx":1495
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 */
            __pyx_t_11 = ((__pyx_f_26_marching_cubes_lewiner_cy_max_cube((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_44 * __pyx_v_im.strides[0]) ) + __pyx_t_43 * __pyx_v_im.strides[1]) ) + __pyx_t_42 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_41 * __pyx_v_im.strides[0]) ) + __pyx_t_40 * __pyx_v_im.strides[1]) ) + __pyx_t_39 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_38 * __pyx_v_im.strides[0]) ) + __pyx_t_37 * __pyx_v_im.strides[1]) ) + __pyx_t_36 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_35 * __pyx_v_im.strides[0]) ) + __pyx_t_34 * __pyx_v_im.strides[1]) ) + __pyx_t_33 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_32 * __pyx_v_im.strides[0]) ) + __pyx_t_31 * __pyx_v_im.strides[1]) ) + __pyx_t_30 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_29 * __pyx_v_im.strides[0]) ) + __pyx_t_28 * __pyx_v_im.strides[1]) ) + __pyx_t_27 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_26 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_24 * __pyx_v_im.strides[2]) ))), (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_22 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_20 * __pyx_v_im.strides[2]) )))) <= __pyx_v_max_cube_val_thresh) != 0);
            __pyx_t_23 = __pyx_t_11;
            __pyx_L95_bool_binop_done:;

            /* "_marching_cubes_lewiner_cy.pyx":1493
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
            if (__pyx_t_23) {

              /* "_marching_cubes_lewiner_cy.pyx":1498
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) <= max_cube_val_thresh):
 * 
 *                             vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])             # <<<<<<<<<<<<<<
 *                             vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])
 *                             vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])
 */
              __pyx_t_46 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_47);
              __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_z); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_45);
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_z_st); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_7 = PyList_New(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_46);
              PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_46);
              __Pyx_GIVEREF(__pyx_t_48);
              PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_48);
              __Pyx_GIVEREF(__pyx_t_47);
              PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_47);
              __Pyx_GIVEREF(__pyx_t_45);
              PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_45);
              __Pyx_GIVEREF(__pyx_t_5);
              PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              PyList_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_8);
              PyList_SET_ITEM(__pyx_t_7, 6, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_4);
              PyList_SET_ITEM(__pyx_t_7, 7, __pyx_t_4);
              __pyx_t_46 = 0;
              __pyx_t_48 = 0;
              __pyx_t_47 = 0;
              __pyx_t_45 = 0;
              __pyx_t_5 = 0;
              __pyx_t_6 = 0;
              __pyx_t_8 = 0;
              __pyx_t_4 = 0;
              __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_INCREF(__pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_n_s_i);
              PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_t_7);
              PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
              __pyx_t_7 = 0;
              __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1498, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF_SET(__pyx_v_vertex_index_array_z, ((arrayobject *)__pyx_t_7));
              __pyx_t_7 = 0;

              /* "_marching_cubes_lewiner_cy.pyx":1499
 * 
 *                             vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 *                             vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])             # <<<<<<<<<<<<<<
 *                             vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])
 * 
 */
              __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_y); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_45);
              __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_47);
              __pyx_t_48 = __Pyx_PyInt_From_int(__pyx_v_y_st); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_46 = PyList_New(8); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_GIVEREF(__pyx_t_7);
              PyList_SET_ITEM(__pyx_t_46, 0, __pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_4);
              PyList_SET_ITEM(__pyx_t_46, 1, __pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_8);
              PyList_SET_ITEM(__pyx_t_46, 2, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_6);
              PyList_SET_ITEM(__pyx_t_46, 3, __pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_5);
              PyList_SET_ITEM(__pyx_t_46, 4, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_45);
              PyList_SET_ITEM(__pyx_t_46, 5, __pyx_t_45);
              __Pyx_GIVEREF(__pyx_t_47);
              PyList_SET_ITEM(__pyx_t_46, 6, __pyx_t_47);
              __Pyx_GIVEREF(__pyx_t_48);
              PyList_SET_ITEM(__pyx_t_46, 7, __pyx_t_48);
              __pyx_t_7 = 0;
              __pyx_t_4 = 0;
              __pyx_t_8 = 0;
              __pyx_t_6 = 0;
              __pyx_t_5 = 0;
              __pyx_t_45 = 0;
              __pyx_t_47 = 0;
              __pyx_t_48 = 0;
              __pyx_t_48 = PyTuple_New(2); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __Pyx_INCREF(__pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_n_s_i);
              PyTuple_SET_ITEM(__pyx_t_48, 0, __pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_t_46);
              PyTuple_SET_ITEM(__pyx_t_48, 1, __pyx_t_46);
              __pyx_t_46 = 0;
              __pyx_t_46 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_48, NULL); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1499, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
              __Pyx_DECREF_SET(__pyx_v_vertex_index_array_y, ((arrayobject *)__pyx_t_46));
              __pyx_t_46 = 0;

              /* "_marching_cubes_lewiner_cy.pyx":1500
 *                             vertex_index_array_z = array.array('i', [z, z,    z,    z,    z_st, z_st, z_st, z_st])
 *                             vertex_index_array_y = array.array('i', [y, y,    y_st, y_st, y,    y,    y_st, y_st])
 *                             vertex_index_array_x = array.array('i', [x, x_st, x_st, x,    x,    x_st, x_st, x])             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __pyx_t_46 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_46)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_46);
              __pyx_t_48 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_48)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_48);
              __pyx_t_47 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_47)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_47);
              __pyx_t_45 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_45);
              __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_x_st); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_7 = PyList_New(8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_46);
              PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_46);
              __Pyx_GIVEREF(__pyx_t_48);
              PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_48);
              __Pyx_GIVEREF(__pyx_t_47);
              PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_47);
              __Pyx_GIVEREF(__pyx_t_45);
              PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_45);
              __Pyx_GIVEREF(__pyx_t_5);
              PyList_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_6);
              PyList_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_8);
              PyList_SET_ITEM(__pyx_t_7, 6, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_4);
              PyList_SET_ITEM(__pyx_t_7, 7, __pyx_t_4);
              __pyx_t_46 = 0;
              __pyx_t_48 = 0;
              __pyx_t_47 = 0;
              __pyx_t_45 = 0;
              __pyx_t_5 = 0;
              __pyx_t_6 = 0;
              __pyx_t_8 = 0;
              __pyx_t_4 = 0;
              __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_INCREF(__pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_n_s_i);
              PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_i);
              __Pyx_GIVEREF(__pyx_t_7);
              PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
              __pyx_t_7 = 0;
              __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cpython_5array_array), __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF_SET(__pyx_v_vertex_index_array_x, ((arrayobject *)__pyx_t_7));
              __pyx_t_7 = 0;

              /* "_marching_cubes_lewiner_cy.pyx":1521
 *                                             #compute edge vote
 * 
 *                             v_index = -1             # <<<<<<<<<<<<<<
 *                             change_cube = False
 *                             while v_index < 7: #from 0 to 7, included
 */
              __pyx_v_v_index = -1;

              /* "_marching_cubes_lewiner_cy.pyx":1522
 * 
 *                             v_index = -1
 *                             change_cube = False             # <<<<<<<<<<<<<<
 *                             while v_index < 7: #from 0 to 7, included
 *                                 v_index += 1
 */
              __pyx_v_change_cube = 0;

              /* "_marching_cubes_lewiner_cy.pyx":1523
 *                             v_index = -1
 *                             change_cube = False
 *                             while v_index < 7: #from 0 to 7, included             # <<<<<<<<<<<<<<
 *                                 v_index += 1
 * 
 */
              while (1) {
                __pyx_t_23 = ((__pyx_v_v_index < 7) != 0);
                if (!__pyx_t_23) break;

                /* "_marching_cubes_lewiner_cy.pyx":1524
 *                             change_cube = False
 *                             while v_index < 7: #from 0 to 7, included
 *                                 v_index += 1             # <<<<<<<<<<<<<<
 * 
 *                                 visited_vs[v_index] = 0
 */
                __pyx_v_v_index = (__pyx_v_v_index + 1);

                /* "_marching_cubes_lewiner_cy.pyx":1526
 *                                 v_index += 1
 * 
 *                                 visited_vs[v_index] = 0             # <<<<<<<<<<<<<<
 * 
 *                                 z_i = vertex_index_array_z[v_index]
 */
                if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1526, __pyx_L1_error)

                /* "_marching_cubes_lewiner_cy.pyx":1528
 *                                 visited_vs[v_index] = 0
 * 
 *                                 z_i = vertex_index_array_z[v_index]             # <<<<<<<<<<<<<<
 *                                 y_i = vertex_index_array_y[v_index]
 *                                 x_i = vertex_index_array_x[v_index]
 */
                __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_z), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1528, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1528, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_v_z_i = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1529
 * 
 *                                 z_i = vertex_index_array_z[v_index]
 *                                 y_i = vertex_index_array_y[v_index]             # <<<<<<<<<<<<<<
 *                                 x_i = vertex_index_array_x[v_index]
 * 
 */
                __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_y), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1529, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_v_y_i = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1530
 *                                 z_i = vertex_index_array_z[v_index]
 *                                 y_i = vertex_index_array_y[v_index]
 *                                 x_i = vertex_index_array_x[v_index]             # <<<<<<<<<<<<<<
 * 
 *                                 sign_vs[v_index] = 0.0
 */
                __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_vertex_index_array_x), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1530, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1530, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_v_x_i = __pyx_t_19;

                /* "_marching_cubes_lewiner_cy.pyx":1532
 *                                 x_i = vertex_index_array_x[v_index]
 * 
 *                                 sign_vs[v_index] = 0.0             # <<<<<<<<<<<<<<
 * 
 *                                 #If the vertex value has been previously computed or is zero, skip it
 */
                if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, __pyx_float_0_0, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1532, __pyx_L1_error)

                /* "_marching_cubes_lewiner_cy.pyx":1535
 * 
 *                                 #If the vertex value has been previously computed or is zero, skip it
 *                                 if signed_im_mask[z_i,y_i,x_i] == True:             # <<<<<<<<<<<<<<
 *                                     visited_vs[v_index] = 1
 *                                     sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 */
                __pyx_t_20 = __pyx_v_z_i;
                __pyx_t_21 = __pyx_v_y_i;
                __pyx_t_22 = __pyx_v_x_i;
                __pyx_t_23 = (((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) ))) == 1) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1536
 *                                 #If the vertex value has been previously computed or is zero, skip it
 *                                 if signed_im_mask[z_i,y_i,x_i] == True:
 *                                     visited_vs[v_index] = 1             # <<<<<<<<<<<<<<
 *                                     sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 *                                     continue
 */
                  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1536, __pyx_L1_error)

                  /* "_marching_cubes_lewiner_cy.pyx":1537
 *                                 if signed_im_mask[z_i,y_i,x_i] == True:
 *                                     visited_vs[v_index] = 1
 *                                     sign_vs[v_index] = signed_im[z_i,y_i,x_i]             # <<<<<<<<<<<<<<
 *                                     continue
 * 
 */
                  __pyx_t_22 = __pyx_v_z_i;
                  __pyx_t_21 = __pyx_v_y_i;
                  __pyx_t_20 = __pyx_v_x_i;
                  __pyx_t_7 = PyFloat_FromDouble((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1537, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                  /* "_marching_cubes_lewiner_cy.pyx":1538
 *                                     visited_vs[v_index] = 1
 *                                     sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 *                                     continue             # <<<<<<<<<<<<<<
 * 
 *                                 if im[z_i,y_i,x_i] == 0.0:
 */
                  goto __pyx_L97_continue;

                  /* "_marching_cubes_lewiner_cy.pyx":1535
 * 
 *                                 #If the vertex value has been previously computed or is zero, skip it
 *                                 if signed_im_mask[z_i,y_i,x_i] == True:             # <<<<<<<<<<<<<<
 *                                     visited_vs[v_index] = 1
 *                                     sign_vs[v_index] = signed_im[z_i,y_i,x_i]
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1540
 *                                     continue
 * 
 *                                 if im[z_i,y_i,x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                     visited_vs[v_index] = 1
 *                                     continue
 */
                __pyx_t_20 = __pyx_v_z_i;
                __pyx_t_21 = __pyx_v_y_i;
                __pyx_t_22 = __pyx_v_x_i;
                __pyx_t_23 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))) == 0.0) != 0);
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1541
 * 
 *                                 if im[z_i,y_i,x_i] == 0.0:
 *                                     visited_vs[v_index] = 1             # <<<<<<<<<<<<<<
 *                                     continue
 * 
 */
                  if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1541, __pyx_L1_error)

                  /* "_marching_cubes_lewiner_cy.pyx":1542
 *                                 if im[z_i,y_i,x_i] == 0.0:
 *                                     visited_vs[v_index] = 1
 *                                     continue             # <<<<<<<<<<<<<<
 * 
 *                                 dir_index = -1
 */
                  goto __pyx_L97_continue;

                  /* "_marching_cubes_lewiner_cy.pyx":1540
 *                                     continue
 * 
 *                                 if im[z_i,y_i,x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                     visited_vs[v_index] = 1
 *                                     continue
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1544
 *                                     continue
 * 
 *                                 dir_index = -1             # <<<<<<<<<<<<<<
 *                                 while dir_index < 5: #from 0 to 5, included
 *                                     dir_index += 1
 */
                __pyx_v_dir_index = -1;

                /* "_marching_cubes_lewiner_cy.pyx":1545
 * 
 *                                 dir_index = -1
 *                                 while dir_index < 5: #from 0 to 5, included             # <<<<<<<<<<<<<<
 *                                     dir_index += 1
 * 
 */
                while (1) {
                  __pyx_t_23 = ((__pyx_v_dir_index < 5) != 0);
                  if (!__pyx_t_23) break;

                  /* "_marching_cubes_lewiner_cy.pyx":1546
 *                                 dir_index = -1
 *                                 while dir_index < 5: #from 0 to 5, included
 *                                     dir_index += 1             # <<<<<<<<<<<<<<
 * 
 *                                     dir_z = directions_z[dir_index]
 */
                  __pyx_v_dir_index = (__pyx_v_dir_index + 1);

                  /* "_marching_cubes_lewiner_cy.pyx":1548
 *                                     dir_index += 1
 * 
 *                                     dir_z = directions_z[dir_index]             # <<<<<<<<<<<<<<
 *                                     dir_y = directions_y[dir_index]
 *                                     dir_x = directions_x[dir_index]
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_z), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1548, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1548, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_v_dir_z = __pyx_t_19;

                  /* "_marching_cubes_lewiner_cy.pyx":1549
 * 
 *                                     dir_z = directions_z[dir_index]
 *                                     dir_y = directions_y[dir_index]             # <<<<<<<<<<<<<<
 *                                     dir_x = directions_x[dir_index]
 * 
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_y), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1549, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1549, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_v_dir_y = __pyx_t_19;

                  /* "_marching_cubes_lewiner_cy.pyx":1550
 *                                     dir_z = directions_z[dir_index]
 *                                     dir_y = directions_y[dir_index]
 *                                     dir_x = directions_x[dir_index]             # <<<<<<<<<<<<<<
 * 
 *                                     i = 0
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions_x), __pyx_v_dir_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1550, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1550, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_v_dir_x = __pyx_t_19;

                  /* "_marching_cubes_lewiner_cy.pyx":1552
 *                                     dir_x = directions_x[dir_index]
 * 
 *                                     i = 0             # <<<<<<<<<<<<<<
 *                                     max_distance_temp = max_distance
 *                                     while i < max_distance_temp: #from 1 to max_distance, included
 */
                  __pyx_v_i = 0;

                  /* "_marching_cubes_lewiner_cy.pyx":1553
 * 
 *                                     i = 0
 *                                     max_distance_temp = max_distance             # <<<<<<<<<<<<<<
 *                                     while i < max_distance_temp: #from 1 to max_distance, included
 *                                         i += 1
 */
                  __pyx_v_max_distance_temp = __pyx_v_max_distance;

                  /* "_marching_cubes_lewiner_cy.pyx":1554
 *                                     i = 0
 *                                     max_distance_temp = max_distance
 *                                     while i < max_distance_temp: #from 1 to max_distance, included             # <<<<<<<<<<<<<<
 *                                         i += 1
 * 
 */
                  while (1) {
                    __pyx_t_23 = ((__pyx_v_i < __pyx_v_max_distance_temp) != 0);
                    if (!__pyx_t_23) break;

                    /* "_marching_cubes_lewiner_cy.pyx":1555
 *                                     max_distance_temp = max_distance
 *                                     while i < max_distance_temp: #from 1 to max_distance, included
 *                                         i += 1             # <<<<<<<<<<<<<<
 * 
 *                                         cur_z_i = z_i + i*dir_z
 */
                    __pyx_v_i = (__pyx_v_i + 1);

                    /* "_marching_cubes_lewiner_cy.pyx":1557
 *                                         i += 1
 * 
 *                                         cur_z_i = z_i + i*dir_z             # <<<<<<<<<<<<<<
 *                                         cur_y_i = y_i + i*dir_y
 *                                         cur_x_i = x_i + i*dir_x
 */
                    __pyx_v_cur_z_i = (__pyx_v_z_i + (__pyx_v_i * __pyx_v_dir_z));

                    /* "_marching_cubes_lewiner_cy.pyx":1558
 * 
 *                                         cur_z_i = z_i + i*dir_z
 *                                         cur_y_i = y_i + i*dir_y             # <<<<<<<<<<<<<<
 *                                         cur_x_i = x_i + i*dir_x
 * 
 */
                    __pyx_v_cur_y_i = (__pyx_v_y_i + (__pyx_v_i * __pyx_v_dir_y));

                    /* "_marching_cubes_lewiner_cy.pyx":1559
 *                                         cur_z_i = z_i + i*dir_z
 *                                         cur_y_i = y_i + i*dir_y
 *                                         cur_x_i = x_i + i*dir_x             # <<<<<<<<<<<<<<
 * 
 *                                         #If out of bounds, search on another direction
 */
                    __pyx_v_cur_x_i = (__pyx_v_x_i + (__pyx_v_i * __pyx_v_dir_x));

                    /* "_marching_cubes_lewiner_cy.pyx":1562
 * 
 *                                         #If out of bounds, search on another direction
 *                                         if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):
 */
                    __pyx_t_11 = ((__pyx_v_cur_z_i > __pyx_v_Nz_bound) != 0);
                    if (!__pyx_t_11) {
                    } else {
                      __pyx_t_23 = __pyx_t_11;
                      goto __pyx_L106_bool_binop_done;
                    }
                    __pyx_t_11 = ((__pyx_v_cur_z_i < 0) != 0);
                    if (!__pyx_t_11) {
                    } else {
                      __pyx_t_23 = __pyx_t_11;
                      goto __pyx_L106_bool_binop_done;
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1563
 *                                         #If out of bounds, search on another direction
 *                                         if (cur_z_i > Nz_bound or cur_z_i < 0 or
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or             # <<<<<<<<<<<<<<
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):
 *                                             break
 */
                    __pyx_t_11 = ((__pyx_v_cur_y_i > __pyx_v_Ny_bound) != 0);
                    if (!__pyx_t_11) {
                    } else {
                      __pyx_t_23 = __pyx_t_11;
                      goto __pyx_L106_bool_binop_done;
                    }
                    __pyx_t_11 = ((__pyx_v_cur_y_i < 0) != 0);
                    if (!__pyx_t_11) {
                    } else {
                      __pyx_t_23 = __pyx_t_11;
                      goto __pyx_L106_bool_binop_done;
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1564
 *                                         if (cur_z_i > Nz_bound or cur_z_i < 0 or
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):             # <<<<<<<<<<<<<<
 *                                             break
 * 
 */
                    __pyx_t_11 = ((__pyx_v_cur_x_i > __pyx_v_Nx_bound) != 0);
                    if (!__pyx_t_11) {
                    } else {
                      __pyx_t_23 = __pyx_t_11;
                      goto __pyx_L106_bool_binop_done;
                    }
                    __pyx_t_11 = ((__pyx_v_cur_x_i < 0) != 0);
                    __pyx_t_23 = __pyx_t_11;
                    __pyx_L106_bool_binop_done:;

                    /* "_marching_cubes_lewiner_cy.pyx":1562
 * 
 *                                         #If out of bounds, search on another direction
 *                                         if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):
 */
                    if (__pyx_t_23) {

                      /* "_marching_cubes_lewiner_cy.pyx":1565
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):
 *                                             break             # <<<<<<<<<<<<<<
 * 
 *                                         # If the vertex value is zero, continue to check what's beyond
 */
                      goto __pyx_L104_break;

                      /* "_marching_cubes_lewiner_cy.pyx":1562
 * 
 *                                         #If out of bounds, search on another direction
 *                                         if (cur_z_i > Nz_bound or cur_z_i < 0 or             # <<<<<<<<<<<<<<
 *                                             cur_y_i > Ny_bound or cur_y_i < 0 or
 *                                             cur_x_i > Nx_bound or cur_x_i < 0):
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1568
 * 
 *                                         # If the vertex value is zero, continue to check what's beyond
 *                                         if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                             if i < max_distance_temp:
 *                                                 continue
 */
                    __pyx_t_22 = __pyx_v_cur_z_i;
                    __pyx_t_21 = __pyx_v_cur_y_i;
                    __pyx_t_20 = __pyx_v_cur_x_i;
                    __pyx_t_23 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_22 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_20 * __pyx_v_im.strides[2]) ))) == 0.0) != 0);
                    if (__pyx_t_23) {

                      /* "_marching_cubes_lewiner_cy.pyx":1569
 *                                         # If the vertex value is zero, continue to check what's beyond
 *                                         if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                             if i < max_distance_temp:             # <<<<<<<<<<<<<<
 *                                                 continue
 *                                             else:
 */
                      __pyx_t_23 = ((__pyx_v_i < __pyx_v_max_distance_temp) != 0);
                      if (__pyx_t_23) {

                        /* "_marching_cubes_lewiner_cy.pyx":1570
 *                                         if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                             if i < max_distance_temp:
 *                                                 continue             # <<<<<<<<<<<<<<
 *                                             else:
 *                                                 max_distance_temp = max_distance_temp + 1 #Check one vertex further away
 */
                        goto __pyx_L103_continue;

                        /* "_marching_cubes_lewiner_cy.pyx":1569
 *                                         # If the vertex value is zero, continue to check what's beyond
 *                                         if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                             if i < max_distance_temp:             # <<<<<<<<<<<<<<
 *                                                 continue
 *                                             else:
 */
                      }

                      /* "_marching_cubes_lewiner_cy.pyx":1572
 *                                                 continue
 *                                             else:
 *                                                 max_distance_temp = max_distance_temp + 1 #Check one vertex further away             # <<<<<<<<<<<<<<
 *                                                 continue
 * 
 */
                      /*else*/ {
                        __pyx_v_max_distance_temp = (__pyx_v_max_distance_temp + 1);

                        /* "_marching_cubes_lewiner_cy.pyx":1573
 *                                             else:
 *                                                 max_distance_temp = max_distance_temp + 1 #Check one vertex further away
 *                                                 continue             # <<<<<<<<<<<<<<
 * 
 *                                         # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 */
                        goto __pyx_L103_continue;
                      }

                      /* "_marching_cubes_lewiner_cy.pyx":1568
 * 
 *                                         # If the vertex value is zero, continue to check what's beyond
 *                                         if im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                             if i < max_distance_temp:
 *                                                 continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1576
 * 
 *                                         # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                         if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                             continue
 * 
 */
                    __pyx_t_20 = __pyx_v_cur_z_i;
                    __pyx_t_21 = __pyx_v_cur_y_i;
                    __pyx_t_22 = __pyx_v_cur_x_i;
                    __pyx_t_23 = (((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))) == 0.0) != 0);
                    if (__pyx_t_23) {

                      /* "_marching_cubes_lewiner_cy.pyx":1577
 *                                         # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                         if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:
 *                                             continue             # <<<<<<<<<<<<<<
 * 
 *                                         # Normal case
 */
                      goto __pyx_L103_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1576
 * 
 *                                         # 1.3: If not computed during previous cubes AND not already computed during this cube, skip it
 *                                         if signed_im[cur_z_i, cur_y_i, cur_x_i] == 0.0:             # <<<<<<<<<<<<<<
 *                                             continue
 * 
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1580
 * 
 *                                         # Normal case
 *                                         visited_vs[v_index] += 1             # <<<<<<<<<<<<<<
 *                                         sign_vs[v_index] += signed_im[cur_z_i, cur_y_i, cur_x_i] * compute_edge_vote(grads[z_i,y_i,x_i], grads[cur_z_i, cur_y_i, cur_x_i], dir_z, dir_y, dir_x)
 * 
 */
                    __pyx_t_19 = __pyx_v_v_index;
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_t_19, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1580, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_t_19, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1580, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1581
 *                                         # Normal case
 *                                         visited_vs[v_index] += 1
 *                                         sign_vs[v_index] += signed_im[cur_z_i, cur_y_i, cur_x_i] * compute_edge_vote(grads[z_i,y_i,x_i], grads[cur_z_i, cur_y_i, cur_x_i], dir_z, dir_y, dir_x)             # <<<<<<<<<<<<<<
 * 
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue to be computed later.
 */
                    __pyx_t_19 = __pyx_v_v_index;
                    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_t_19, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1581, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_22 = __pyx_v_cur_z_i;
                    __pyx_t_21 = __pyx_v_cur_y_i;
                    __pyx_t_20 = __pyx_v_cur_x_i;
                    __pyx_t_49.data = __pyx_v_grads.data;
                    __pyx_t_49.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_49, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_49.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_49.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_49.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_49.suboffsets[0] = -1;

__pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_z_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_y_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_cur_x_i;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * __pyx_f_26_marching_cubes_lewiner_cy_compute_edge_vote(__pyx_t_49, __pyx_t_15, __pyx_v_dir_z, __pyx_v_dir_y, __pyx_v_dir_x))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1581, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
                    __pyx_t_49.memview = NULL;
                    __pyx_t_49.data = NULL;
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1581, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_t_19, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(0, 1581, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __pyx_L103_continue:;
                  }
                  __pyx_L104_break:;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1584
 * 
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue to be computed later.
 *                                 if visited_vs[v_index] >= 1 and abs(sign_vs[v_index]) / visited_vs[v_index] < unsure_cases_thresh and (queue.empty() == False):             # <<<<<<<<<<<<<<
 *                                     if unsure_cases_visit_neighbours == True:
 *                                         unsure_cases_queue.push_back((z,y,x))
 */
                __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                if (__pyx_t_11) {
                } else {
                  __pyx_t_23 = __pyx_t_11;
                  goto __pyx_L116_bool_binop_done;
                }
                __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1584, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                if (__pyx_t_11) {
                } else {
                  __pyx_t_23 = __pyx_t_11;
                  goto __pyx_L116_bool_binop_done;
                }
                __pyx_t_11 = ((__pyx_v_queue.empty() == 0) != 0);
                __pyx_t_23 = __pyx_t_11;
                __pyx_L116_bool_binop_done:;
                if (__pyx_t_23) {

                  /* "_marching_cubes_lewiner_cy.pyx":1585
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue to be computed later.
 *                                 if visited_vs[v_index] >= 1 and abs(sign_vs[v_index]) / visited_vs[v_index] < unsure_cases_thresh and (queue.empty() == False):
 *                                     if unsure_cases_visit_neighbours == True:             # <<<<<<<<<<<<<<
 *                                         unsure_cases_queue.push_back((z,y,x))
 *                                     change_cube = True
 */
                  __pyx_t_23 = ((__pyx_v_unsure_cases_visit_neighbours == 1) != 0);
                  if (__pyx_t_23) {

                    /* "_marching_cubes_lewiner_cy.pyx":1586
 *                                 if visited_vs[v_index] >= 1 and abs(sign_vs[v_index]) / visited_vs[v_index] < unsure_cases_thresh and (queue.empty() == False):
 *                                     if unsure_cases_visit_neighbours == True:
 *                                         unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                     change_cube = True
 *                                     break
 */
                    __pyx_t_55.f0 = __pyx_v_z;
                    __pyx_t_55.f1 = __pyx_v_y;
                    __pyx_t_55.f2 = __pyx_v_x;
                    __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                    /* "_marching_cubes_lewiner_cy.pyx":1585
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue to be computed later.
 *                                 if visited_vs[v_index] >= 1 and abs(sign_vs[v_index]) / visited_vs[v_index] < unsure_cases_thresh and (queue.empty() == False):
 *                                     if unsure_cases_visit_neighbours == True:             # <<<<<<<<<<<<<<
 *                                         unsure_cases_queue.push_back((z,y,x))
 *                                     change_cube = True
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1587
 *                                     if unsure_cases_visit_neighbours == True:
 *                                         unsure_cases_queue.push_back((z,y,x))
 *                                     change_cube = True             # <<<<<<<<<<<<<<
 *                                     break
 * 
 */
                  __pyx_v_change_cube = 1;

                  /* "_marching_cubes_lewiner_cy.pyx":1588
 *                                         unsure_cases_queue.push_back((z,y,x))
 *                                     change_cube = True
 *                                     break             # <<<<<<<<<<<<<<
 * 
 *                                 # Set the vertex. This value is used to compute adjacent vertices, but is not considered as precomputed, so it will be computed again
 */
                  goto __pyx_L98_break;

                  /* "_marching_cubes_lewiner_cy.pyx":1584
 * 
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue to be computed later.
 *                                 if visited_vs[v_index] >= 1 and abs(sign_vs[v_index]) / visited_vs[v_index] < unsure_cases_thresh and (queue.empty() == False):             # <<<<<<<<<<<<<<
 *                                     if unsure_cases_visit_neighbours == True:
 *                                         unsure_cases_queue.push_back((z,y,x))
 */
                }

                /* "_marching_cubes_lewiner_cy.pyx":1591
 * 
 *                                 # Set the vertex. This value is used to compute adjacent vertices, but is not considered as precomputed, so it will be computed again
 *                                 signed_im[z_i, y_i, x_i] = my_sign(sign_vs[v_index])             # <<<<<<<<<<<<<<
 * 
 *                             if change_cube:
 */
                __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), __pyx_v_v_index, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1591, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_20 = __pyx_v_z_i;
                __pyx_t_21 = __pyx_v_y_i;
                __pyx_t_22 = __pyx_v_x_i;
                *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);
                __pyx_L97_continue:;
              }
              __pyx_L98_break:;

              /* "_marching_cubes_lewiner_cy.pyx":1593
 *                                 signed_im[z_i, y_i, x_i] = my_sign(sign_vs[v_index])
 * 
 *                             if change_cube:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
              __pyx_t_23 = (__pyx_v_change_cube != 0);
              if (__pyx_t_23) {

                /* "_marching_cubes_lewiner_cy.pyx":1594
 * 
 *                             if change_cube:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 * 
 */
                goto __pyx_L75_continue;

                /* "_marching_cubes_lewiner_cy.pyx":1593
 *                                 signed_im[z_i, y_i, x_i] = my_sign(sign_vs[v_index])
 * 
 *                             if change_cube:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1598
 * 
 *                             # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                             if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):             # <<<<<<<<<<<<<<
 *                                 anchor_sign = 1.
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 */
              __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PyObject_RichCompare(__pyx_t_8, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              if (__pyx_t_11) {
              } else {
                __pyx_t_23 = __pyx_t_11;
                goto __pyx_L122_bool_binop_done;
              }
              __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1598, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_23 = __pyx_t_11;
              __pyx_L122_bool_binop_done:;
              __pyx_t_11 = ((!__pyx_t_23) != 0);
              if (__pyx_t_11) {

                /* "_marching_cubes_lewiner_cy.pyx":1599
 *                             # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                             if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                                 anchor_sign = 1.             # <<<<<<<<<<<<<<
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 */
                __pyx_v_anchor_sign = 1.;

                /* "_marching_cubes_lewiner_cy.pyx":1600
 *                             if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                                 anchor_sign = 1.
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L131_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L131_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1601
 *                                 anchor_sign = 1.
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     anchor_sign = my_sign(signed_im[z,y,x])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
                  __pyx_t_20 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_22 = __pyx_v_x;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1602
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 */
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1600
 *                             if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):
 *                                 anchor_sign = 1.
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1603
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L133_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L133_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1604
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
                  __pyx_t_21 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_24 = __pyx_v_x_st;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1605
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 */
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1603
 *                                     anchor_sign = my_sign(signed_im[z,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif signed_im_mask[z,y,x_st] and not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1606
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L135_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L135_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1607
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
                  __pyx_t_20 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_22 = __pyx_v_x;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1608
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 */
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1606
 *                                     anchor_sign = my_sign(signed_im[z,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif signed_im_mask[z,y_st,x] and not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1609
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L137_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L137_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1610
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
                  __pyx_t_21 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_24 = __pyx_v_x_st;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1611
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 */
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1609
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif signed_im_mask[z,y_st,x_st] and not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1612
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L139_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L139_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1613
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
                  __pyx_t_20 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_22 = __pyx_v_x;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1614
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 */
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1612
 *                                     anchor_sign = my_sign(signed_im[z,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif signed_im_mask[z_st,y,x] and not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1615
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L141_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L141_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1616
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
                  __pyx_t_21 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_24 = __pyx_v_x_st;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1617
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 */
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1615
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif signed_im_mask[z_st,y,x_st] and not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1618
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L143_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L143_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1619
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
                  __pyx_t_20 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_22 = __pyx_v_x;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1620
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]             # <<<<<<<<<<<<<<
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 */
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1618
 *                                     anchor_sign = my_sign(signed_im[z_st,y,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif signed_im_mask[z_st,y_st,x] and not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1621
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_20 = __pyx_v_y_st;
                __pyx_t_21 = __pyx_v_x_st;
                __pyx_t_23 = ((*((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_24 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[2]) ))) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L145_bool_binop_done;
                }
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_23 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                __pyx_t_11 = __pyx_t_23;
                __pyx_L145_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1622
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x_st])             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 */
                  __pyx_t_21 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_24 = __pyx_v_x_st;
                  __pyx_v_anchor_sign = __pyx_f_26_marching_cubes_lewiner_cy_my_sign((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_21 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))));

                  /* "_marching_cubes_lewiner_cy.pyx":1623
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]             # <<<<<<<<<<<<<<
 * 
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1
 */
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1621
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif signed_im_mask[z_st,y_st,x_st] and not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                     anchor_sign = my_sign(signed_im[z_st,y_st,x_st])
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1625
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1626
 * 
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 */
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1625
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 * 
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1627
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1628
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 */
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1627
 *                                 elif not non_zero_norm(grads[z,y,x]) == 0: #1
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x][0], grads[z,y,x][1], grads[z,y,x][2]
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1629
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1630
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 */
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1629
 *                                 elif not non_zero_norm(grads[z,y,x_st]) == 0: #2
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y,x_st][0], grads[z,y,x_st][1], grads[z,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1631
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1632
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 */
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1631
 *                                 elif not non_zero_norm(grads[z,y_st,x]) == 0: #4
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x][0], grads[z,y_st,x][1], grads[z,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1633
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1634
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 */
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1633
 *                                 elif not non_zero_norm(grads[z,y_st,x_st]) == 0: #3
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z,y_st,x_st][0], grads[z,y_st,x_st][1], grads[z,y_st,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1635
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1636
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 */
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1635
 *                                 elif not non_zero_norm(grads[z_st,y,x]) == 0: #5
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x][0], grads[z_st,y,x][1], grads[z_st,y,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1637
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1638
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]             # <<<<<<<<<<<<<<
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 */
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 0;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x;
                  __pyx_t_22 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x;
                  __pyx_t_24 = 2;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;
                  __pyx_t_24 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_24 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_24 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;

                  /* "_marching_cubes_lewiner_cy.pyx":1637
 *                                 elif not non_zero_norm(grads[z_st,y,x_st]) == 0: #6
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y,x_st][0], grads[z_st,y,x_st][1], grads[z_st,y,x_st][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1639
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                                 else:
 */
                __pyx_t_15.data = __pyx_v_grads.data;
                __pyx_t_15.memview = __pyx_v_grads.memview;
                __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_11 = ((!((__pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__pyx_t_15) == 0) != 0)) != 0);
                __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                __pyx_t_15.memview = NULL;
                __pyx_t_15.data = NULL;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1640
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     print('all 0 vec...')
 */
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 0;
                  __pyx_t_51 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = __pyx_v_z_st;
                  __pyx_t_21 = __pyx_v_y_st;
                  __pyx_t_20 = __pyx_v_x_st;
                  __pyx_t_24 = 1;
                  __pyx_t_50 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_22 * __pyx_v_grads.strides[0]) ) + __pyx_t_21 * __pyx_v_grads.strides[1]) ) + __pyx_t_20 * __pyx_v_grads.strides[2]) ) + __pyx_t_24 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_24 = __pyx_v_z_st;
                  __pyx_t_20 = __pyx_v_y_st;
                  __pyx_t_21 = __pyx_v_x_st;
                  __pyx_t_22 = 2;
                  __pyx_t_16 = (*((float *) ( /* dim=3 */ (( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_grads.data + __pyx_t_24 * __pyx_v_grads.strides[0]) ) + __pyx_t_20 * __pyx_v_grads.strides[1]) ) + __pyx_t_21 * __pyx_v_grads.strides[2]) ) + __pyx_t_22 * __pyx_v_grads.strides[3]) )));
                  __pyx_t_22 = 0;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_51;
                  __pyx_t_22 = 1;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_50;
                  __pyx_t_22 = 2;
                  *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_16;

                  /* "_marching_cubes_lewiner_cy.pyx":1639
 *                                 elif not non_zero_norm(grads[z_st,y_st,x]) == 0: #8
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x][0], grads[z_st,y_st,x][1], grads[z_st,y_st,x][2]
 *                                 elif not non_zero_norm(grads[z_st,y_st,x_st]) == 0: #7             # <<<<<<<<<<<<<<
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                                 else:
 */
                  goto __pyx_L130;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1642
 *                                     base_vec[0], base_vec[1], base_vec[2] = grads[z_st,y_st,x_st][0], grads[z_st,y_st,x_st][1], grads[z_st,y_st,x_st][2]
 *                                 else:
 *                                     print('all 0 vec...')             # <<<<<<<<<<<<<<
 * 
 *                                 base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]
 */
                /*else*/ {
                  if (__Pyx_PrintOne(0, __pyx_kp_s_all_0_vec) < 0) __PYX_ERR(0, 1642, __pyx_L1_error)
                }
                __pyx_L130:;

                /* "_marching_cubes_lewiner_cy.pyx":1644
 *                                     print('all 0 vec...')
 * 
 *                                 base_vec[0], base_vec[1], base_vec[2] = anchor_sign * base_vec[0], anchor_sign * base_vec[1], anchor_sign * base_vec[2]             # <<<<<<<<<<<<<<
 * 
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue of unsure cases to be computed later.
 */
                __pyx_t_22 = 0;
                __pyx_t_54 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
                __pyx_t_22 = 1;
                __pyx_t_53 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
                __pyx_t_22 = 2;
                __pyx_t_52 = (__pyx_v_anchor_sign * (*((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) ))));
                __pyx_t_22 = 0;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_54;
                __pyx_t_22 = 1;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_53;
                __pyx_t_22 = 2;
                *((float *) ( /* dim=0 */ (__pyx_v_base_vec.data + __pyx_t_22 * __pyx_v_base_vec.strides[0]) )) = __pyx_t_52;

                /* "_marching_cubes_lewiner_cy.pyx":1648
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue of unsure cases to be computed later.
 *                                 # This behaviour is not applied to the neighbours of unsure cases
 *                                 if unsure_cases_visit_neighbours == True and queue.empty() == False:             # <<<<<<<<<<<<<<
 *                                     if visited_vs[0] == 0:
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 */
                __pyx_t_23 = ((__pyx_v_unsure_cases_visit_neighbours == 1) != 0);
                if (__pyx_t_23) {
                } else {
                  __pyx_t_11 = __pyx_t_23;
                  goto __pyx_L148_bool_binop_done;
                }
                __pyx_t_23 = ((__pyx_v_queue.empty() == 0) != 0);
                __pyx_t_11 = __pyx_t_23;
                __pyx_L148_bool_binop_done:;
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1649
 *                                 # This behaviour is not applied to the neighbours of unsure cases
 *                                 if unsure_cases_visit_neighbours == True and queue.empty() == False:
 *                                     if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1649, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1649, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1649, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1650
 *                                 if unsure_cases_visit_neighbours == True and queue.empty() == False:
 *                                     if visited_vs[0] == 0:
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1650, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 0, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1650, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1651
 *                                     if visited_vs[0] == 0:
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1651, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1651, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1651, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1651, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1651, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1652
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1653
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])
 *                                     if visited_vs[1] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1651
 *                                     if visited_vs[0] == 0:
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1654
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[1] == 0:
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 */
                    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1654, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1654, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_22 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_20 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1649
 *                                 # This behaviour is not applied to the neighbours of unsure cases
 *                                 if unsure_cases_visit_neighbours == True and queue.empty() == False:
 *                                     if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 *                                         if abs(sign_vs[0]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1655
 *                                             continue
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])
 *                                     if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:
 */
                  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1655, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1655, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1656
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])
 *                                     if visited_vs[1] == 0:
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1656, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 1, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1656, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1657
 *                                     if visited_vs[1] == 0:
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1657, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1657, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1657, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1657, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1657, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1658
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1659
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])
 *                                     if visited_vs[2] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1657
 *                                     if visited_vs[1] == 0:
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1660
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[2] == 0:
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 */
                    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1660, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1660, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __pyx_t_20 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_22 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1655
 *                                             continue
 *                                         signed_im[z,y,x] = my_sign(sign_vs[0])
 *                                     if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[1] = dot3(base_vec, grads[z   ,y, x_st])
 *                                         if abs(sign_vs[1]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1661
 *                                             continue
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])
 *                                     if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1661, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1661, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1661, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1662
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])
 *                                     if visited_vs[2] == 0:
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1662, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 2, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1662, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1663
 *                                     if visited_vs[2] == 0:
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1663, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1663, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1663, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1663, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1663, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1664
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1665
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])
 *                                     if visited_vs[3] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1663
 *                                     if visited_vs[2] == 0:
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1666
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[3] == 0:
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 */
                    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1666, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1666, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_22 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_20 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1661
 *                                             continue
 *                                         signed_im[z,y,x_st] = my_sign(sign_vs[1])
 *                                     if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[2] = dot3(base_vec, grads[z   ,y_st, x_st])
 *                                         if abs(sign_vs[2]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1667
 *                                             continue
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])
 *                                     if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:
 */
                  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1667, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1667, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1667, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1668
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])
 *                                     if visited_vs[3] == 0:
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1668, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 3, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1668, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1669
 *                                     if visited_vs[3] == 0:
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1669, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1669, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1669, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1669, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1669, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1670
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1671
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])
 *                                     if visited_vs[4] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1669
 *                                     if visited_vs[3] == 0:
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1672
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[4] == 0:
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 */
                    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1672, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1672, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __pyx_t_20 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_22 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1667
 *                                             continue
 *                                         signed_im[z,y_st,x_st] = my_sign(sign_vs[2])
 *                                     if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[3] = dot3(base_vec, grads[z   ,y_st, x])
 *                                         if abs(sign_vs[3]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1673
 *                                             continue
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])
 *                                     if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1673, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1673, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1673, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1674
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])
 *                                     if visited_vs[4] == 0:
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1674, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 4, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1674, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1675
 *                                     if visited_vs[4] == 0:
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1675, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1675, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1676
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1677
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])
 *                                     if visited_vs[5] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1675
 *                                     if visited_vs[4] == 0:
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1678
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[5] == 0:
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 */
                    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1678, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_22 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_20 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1673
 *                                             continue
 *                                         signed_im[z,y_st,x] = my_sign(sign_vs[3])
 *                                     if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[4] = dot3(base_vec, grads[z_st,y, x])
 *                                         if abs(sign_vs[4]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1679
 *                                             continue
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])
 *                                     if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:
 */
                  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1679, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1679, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1679, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1680
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])
 *                                     if visited_vs[5] == 0:
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1680, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 5, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1680, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1681
 *                                     if visited_vs[5] == 0:
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1681, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1681, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1681, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1681, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1681, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1682
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1683
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])
 *                                     if visited_vs[6] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1681
 *                                     if visited_vs[5] == 0:
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1684
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[6] == 0:
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 */
                    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1684, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1684, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __pyx_t_20 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_22 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1679
 *                                             continue
 *                                         signed_im[z_st,y,x] = my_sign(sign_vs[4])
 *                                     if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[5] = dot3(base_vec, grads[z_st,y, x_st])
 *                                         if abs(sign_vs[5]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1685
 *                                             continue
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])
 *                                     if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1685, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1685, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1685, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1686
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])
 *                                     if visited_vs[6] == 0:
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1686, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 6, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1686, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1687
 *                                     if visited_vs[6] == 0:
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1687, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1687, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1687, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1687, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1688
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1689
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])
 *                                     if visited_vs[7] == 0:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1687
 *                                     if visited_vs[6] == 0:
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1690
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])             # <<<<<<<<<<<<<<
 *                                     if visited_vs[7] == 0:
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 */
                    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1690, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1690, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_22 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_20 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1685
 *                                             continue
 *                                         signed_im[z_st,y,x_st] = my_sign(sign_vs[5])
 *                                     if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[6] = dot3(base_vec, grads[z_st,y_st, x_st])
 *                                         if abs(sign_vs[6]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1691
 *                                             continue
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])
 *                                     if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:
 */
                  __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1691, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1692
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])
 *                                     if visited_vs[7] == 0:
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])             # <<<<<<<<<<<<<<
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_7 = PyFloat_FromDouble(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1692, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;
                    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_sign_vs), 7, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 1692, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

                    /* "_marching_cubes_lewiner_cy.pyx":1693
 *                                     if visited_vs[7] == 0:
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1693, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1693, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_unsure_cases_thresh); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1693, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_7);
                    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1693, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1693, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1694
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         signed_im[z_st,y_st,x] = my_sign(sign_vs[7])
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_unsure_cases_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1695
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x] = my_sign(sign_vs[7])
 *                                 else:
 */
                      goto __pyx_L75_continue;

                      /* "_marching_cubes_lewiner_cy.pyx":1693
 *                                     if visited_vs[7] == 0:
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:             # <<<<<<<<<<<<<<
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1696
 *                                             unsure_cases_queue.push_back((z,y,x))
 *                                             continue
 *                                         signed_im[z_st,y_st,x] = my_sign(sign_vs[7])             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     if visited_vs[0] == 0:
 */
                    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_sign_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1696, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1696, __pyx_L1_error)
                    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    __pyx_t_20 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_22 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_t_16);

                    /* "_marching_cubes_lewiner_cy.pyx":1691
 *                                             continue
 *                                         signed_im[z_st,y_st,x_st] = my_sign(sign_vs[6])
 *                                     if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                         sign_vs[7] = dot3(base_vec, grads[z_st,y_st, x])
 *                                         if abs(sign_vs[7]) < unsure_cases_thresh:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1648
 *                                 # If the sign of one vertex is not sure enough, put the current cube into a lower priority queue of unsure cases to be computed later.
 *                                 # This behaviour is not applied to the neighbours of unsure cases
 *                                 if unsure_cases_visit_neighbours == True and queue.empty() == False:             # <<<<<<<<<<<<<<
 *                                     if visited_vs[0] == 0:
 *                                         sign_vs[0] = dot3(base_vec, grads[z   ,y, x])
 */
                  goto __pyx_L147;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1698
 *                                         signed_im[z_st,y_st,x] = my_sign(sign_vs[7])
 *                                 else:
 *                                     if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                                     if visited_vs[1] == 0:
 */
                /*else*/ {
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1698, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1698, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1698, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1699
 *                                 else:
 *                                     if visited_vs[0] == 0:
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[1] == 0:
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_20 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1698
 *                                         signed_im[z_st,y_st,x] = my_sign(sign_vs[7])
 *                                 else:
 *                                     if visited_vs[0] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                                     if visited_vs[1] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1700
 *                                     if visited_vs[0] == 0:
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                                     if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                                     if visited_vs[2] == 0:
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1700, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1700, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1700, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1701
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                                     if visited_vs[1] == 0:
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[2] == 0:
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_22 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1700
 *                                     if visited_vs[0] == 0:
 *                                         signed_im[z,y,x] = my_sign(dot3(base_vec, grads[z   ,y, x]))
 *                                     if visited_vs[1] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                                     if visited_vs[2] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1702
 *                                     if visited_vs[1] == 0:
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                                     if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                                     if visited_vs[3] == 0:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1702, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1702, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1702, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1703
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                                     if visited_vs[2] == 0:
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[3] == 0:
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_20 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1702
 *                                     if visited_vs[1] == 0:
 *                                         signed_im[z,y,x_st] = my_sign(dot3(base_vec, grads[z   ,y, x_st]))
 *                                     if visited_vs[2] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                                     if visited_vs[3] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1704
 *                                     if visited_vs[2] == 0:
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                                     if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                                     if visited_vs[4] == 0:
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1704, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1704, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1704, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1705
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                                     if visited_vs[3] == 0:
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[4] == 0:
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_22 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1704
 *                                     if visited_vs[2] == 0:
 *                                         signed_im[z,y_st,x_st] = my_sign(dot3(base_vec, grads[z   ,y_st, x_st]))
 *                                     if visited_vs[3] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                                     if visited_vs[4] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1706
 *                                     if visited_vs[3] == 0:
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                                     if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                                     if visited_vs[5] == 0:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1706, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1706, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1706, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1707
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                                     if visited_vs[4] == 0:
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[5] == 0:
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_20 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1706
 *                                     if visited_vs[3] == 0:
 *                                         signed_im[z,y_st,x] = my_sign(dot3(base_vec, grads[z   ,y_st, x]))
 *                                     if visited_vs[4] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                                     if visited_vs[5] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1708
 *                                     if visited_vs[4] == 0:
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                                     if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                                     if visited_vs[6] == 0:
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1708, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1708, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1708, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1709
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                                     if visited_vs[5] == 0:
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[6] == 0:
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_22 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1708
 *                                     if visited_vs[4] == 0:
 *                                         signed_im[z_st,y,x] = my_sign(dot3(base_vec, grads[z_st,y, x]))
 *                                     if visited_vs[5] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                                     if visited_vs[6] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1710
 *                                     if visited_vs[5] == 0:
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                                     if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                                     if visited_vs[7] == 0:
 */
                  __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1710, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_8, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1710, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1710, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1711
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                                     if visited_vs[6] == 0:
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))             # <<<<<<<<<<<<<<
 *                                     if visited_vs[7] == 0:
 *                                         signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_22 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_20 = __pyx_v_x_st;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1710
 *                                     if visited_vs[5] == 0:
 *                                         signed_im[z_st,y,x_st] = my_sign(dot3(base_vec, grads[z_st,y, x_st]))
 *                                     if visited_vs[6] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                                     if visited_vs[7] == 0:
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1712
 *                                     if visited_vs[6] == 0:
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                                     if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 * 
 */
                  __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_visited_vs), 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1712, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_8 = __Pyx_PyInt_EqObjC(__pyx_t_7, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1712, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1712, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1713
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                                     if visited_vs[7] == 0:
 *                                         signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))             # <<<<<<<<<<<<<<
 * 
 * 
 */
                    __pyx_t_15.data = __pyx_v_grads.data;
                    __pyx_t_15.memview = __pyx_v_grads.memview;
                    __PYX_INC_MEMVIEW(&__pyx_t_15, 0);
                    {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_z_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[0];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_y_st;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[1];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_x;
    Py_ssize_t __pyx_tmp_stride = __pyx_v_grads.strides[2];
        __pyx_t_15.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_15.shape[0] = __pyx_v_grads.shape[3];
__pyx_t_15.strides[0] = __pyx_v_grads.strides[3];
    __pyx_t_15.suboffsets[0] = -1;

__pyx_t_20 = __pyx_v_z_st;
                    __pyx_t_21 = __pyx_v_y_st;
                    __pyx_t_22 = __pyx_v_x;
                    *((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_20 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im.strides[2]) )) = __pyx_f_26_marching_cubes_lewiner_cy_my_sign(__pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_base_vec, __pyx_t_15));
                    __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
                    __pyx_t_15.memview = NULL;
                    __pyx_t_15.data = NULL;

                    /* "_marching_cubes_lewiner_cy.pyx":1712
 *                                     if visited_vs[6] == 0:
 *                                         signed_im[z_st,y_st,x_st] = my_sign(dot3(base_vec, grads[z_st,y_st, x_st]))
 *                                     if visited_vs[7] == 0:             # <<<<<<<<<<<<<<
 *                                         signed_im[z_st,y_st,x] = my_sign(dot3(base_vec, grads[z_st,y_st, x]))
 * 
 */
                  }
                }
                __pyx_L147:;

                /* "_marching_cubes_lewiner_cy.pyx":1598
 * 
 *                             # Compute and use anchor gradient only when needed (when some vertices have no votes)
 *                             if not (visited_vs[0] >= 1 and visited_vs[1] >= 1 and visited_vs[2] >= 1 and visited_vs[3] >= 1 and visited_vs[4] >= 1 and visited_vs[5] >= 1 and visited_vs[6] >= 1 and visited_vs[7] >= 1):             # <<<<<<<<<<<<<<
 *                                 anchor_sign = 1.
 *                                 if signed_im_mask[z,y,x] and not non_zero_norm(grads[z,y,x]) == 0: #1
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1717
 * 
 * 
 *                             if unsure_cases_visit_neighbours == True:             # <<<<<<<<<<<<<<
 *                                 v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 */
              __pyx_t_11 = ((__pyx_v_unsure_cases_visit_neighbours == 1) != 0);
              if (__pyx_t_11) {

                /* "_marching_cubes_lewiner_cy.pyx":1718
 * 
 *                             if unsure_cases_visit_neighbours == True:
 *                                 v0 = signed_im[z,y,x] * im[z   ,y, x]             # <<<<<<<<<<<<<<
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                                 v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_25 = __pyx_v_y;
                __pyx_t_26 = __pyx_v_x;
                __pyx_v_v0 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1719
 *                             if unsure_cases_visit_neighbours == True:
 *                                 v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]             # <<<<<<<<<<<<<<
 *                                 v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                                 v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 */
                __pyx_t_26 = __pyx_v_z;
                __pyx_t_25 = __pyx_v_y;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                __pyx_v_v1 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1720
 *                                 v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                                 v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]             # <<<<<<<<<<<<<<
 *                                 v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                                 v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = __pyx_v_z;
                __pyx_t_25 = __pyx_v_y_st;
                __pyx_t_26 = __pyx_v_x_st;
                __pyx_v_v2 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1721
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 *                                 v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                                 v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]             # <<<<<<<<<<<<<<
 *                                 v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                                 v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 */
                __pyx_t_26 = __pyx_v_z;
                __pyx_t_25 = __pyx_v_y_st;
                __pyx_t_24 = __pyx_v_x;
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_v3 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1722
 *                                 v2 = signed_im[z,y_st,x_st] * im[z   ,y_st, x_st]
 *                                 v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                                 v4 = signed_im[z_st,y,x] * im[z_st,y, x]             # <<<<<<<<<<<<<<
 *                                 v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                                 v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_25 = __pyx_v_y;
                __pyx_t_26 = __pyx_v_x;
                __pyx_v_v4 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1723
 *                                 v3 = signed_im[z,y_st,x] * im[z   ,y_st, x]
 *                                 v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                                 v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]             # <<<<<<<<<<<<<<
 *                                 v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 *                                 v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 */
                __pyx_t_26 = __pyx_v_z_st;
                __pyx_t_25 = __pyx_v_y;
                __pyx_t_24 = __pyx_v_x_st;
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                __pyx_v_v5 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1724
 *                                 v4 = signed_im[z_st,y,x] * im[z_st,y, x]
 *                                 v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                                 v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]             # <<<<<<<<<<<<<<
 *                                 v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 * 
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                __pyx_t_24 = __pyx_v_z_st;
                __pyx_t_25 = __pyx_v_y_st;
                __pyx_t_26 = __pyx_v_x_st;
                __pyx_v_v6 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_22 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_24 * __pyx_v_im.strides[0]) ) + __pyx_t_25 * __pyx_v_im.strides[1]) ) + __pyx_t_26 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1725
 *                                 v5 = signed_im[z_st,y,x_st] * im[z_st,y, x_st]
 *                                 v6 = signed_im[z_st,y_st,x_st] * im[z_st,y_st, x_st]
 *                                 v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]             # <<<<<<<<<<<<<<
 * 
 *                                 cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)
 */
                __pyx_t_26 = __pyx_v_z_st;
                __pyx_t_25 = __pyx_v_y_st;
                __pyx_t_24 = __pyx_v_x;
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                __pyx_v_v7 = ((*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im.data + __pyx_t_26 * __pyx_v_signed_im.strides[0]) ) + __pyx_t_25 * __pyx_v_signed_im.strides[1]) ) + __pyx_t_24 * __pyx_v_signed_im.strides[2]) ))) * (*((float *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_im.data + __pyx_t_20 * __pyx_v_im.strides[0]) ) + __pyx_t_21 * __pyx_v_im.strides[1]) ) + __pyx_t_22 * __pyx_v_im.strides[2]) ))));

                /* "_marching_cubes_lewiner_cy.pyx":1727
 *                                 v7 = signed_im[z_st,y_st,x] * im[z_st,y_st, x]
 * 
 *                                 cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)             # <<<<<<<<<<<<<<
 * 
 *                                 signed_im_mask[z,y,x] = True
 */
                ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->set_cube(__pyx_v_cell, 0.0, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_st, __pyx_v_v0, __pyx_v_v1, __pyx_v_v2, __pyx_v_v3, __pyx_v_v4, __pyx_v_v5, __pyx_v_v6, __pyx_v_v7);

                /* "_marching_cubes_lewiner_cy.pyx":1729
 *                                 cell.set_cube(0.0, x, y, z, st, v0, v1, v2, v3, v4, v5, v6, v7)
 * 
 *                                 signed_im_mask[z,y,x] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z,y,x_st] = True
 *                                 signed_im_mask[z,y_st,x_st] = True
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1730
 * 
 *                                 signed_im_mask[z,y,x] = True
 *                                 signed_im_mask[z,y,x_st] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z,y_st,x_st] = True
 *                                 signed_im_mask[z,y_st,x] = True
 */
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1731
 *                                 signed_im_mask[z,y,x] = True
 *                                 signed_im_mask[z,y,x_st] = True
 *                                 signed_im_mask[z,y_st,x_st] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z,y_st,x] = True
 *                                 signed_im_mask[z_st,y,x] = True
 */
                __pyx_t_22 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1732
 *                                 signed_im_mask[z,y,x_st] = True
 *                                 signed_im_mask[z,y_st,x_st] = True
 *                                 signed_im_mask[z,y_st,x] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z_st,y,x] = True
 *                                 signed_im_mask[z_st,y,x_st] = True
 */
                __pyx_t_20 = __pyx_v_z;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1733
 *                                 signed_im_mask[z,y_st,x_st] = True
 *                                 signed_im_mask[z,y_st,x] = True
 *                                 signed_im_mask[z_st,y,x] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z_st,y,x_st] = True
 *                                 signed_im_mask[z_st,y_st,x_st] = True
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_20 = __pyx_v_x;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1734
 *                                 signed_im_mask[z,y_st,x] = True
 *                                 signed_im_mask[z_st,y,x] = True
 *                                 signed_im_mask[z_st,y,x_st] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z_st,y_st,x_st] = True
 *                                 signed_im_mask[z_st,y_st,x] = True
 */
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y;
                __pyx_t_22 = __pyx_v_x_st;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1735
 *                                 signed_im_mask[z_st,y,x] = True
 *                                 signed_im_mask[z_st,y,x_st] = True
 *                                 signed_im_mask[z_st,y_st,x_st] = True             # <<<<<<<<<<<<<<
 *                                 signed_im_mask[z_st,y_st,x] = True
 * 
 */
                __pyx_t_22 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_20 = __pyx_v_x_st;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_22 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_20 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1736
 *                                 signed_im_mask[z_st,y,x_st] = True
 *                                 signed_im_mask[z_st,y_st,x_st] = True
 *                                 signed_im_mask[z_st,y_st,x] = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_t_20 = __pyx_v_z_st;
                __pyx_t_21 = __pyx_v_y_st;
                __pyx_t_22 = __pyx_v_x;
                *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_signed_im_mask.data + __pyx_t_20 * __pyx_v_signed_im_mask.strides[0]) ) + __pyx_t_21 * __pyx_v_signed_im_mask.strides[1]) ) + __pyx_t_22 * __pyx_v_signed_im_mask.strides[2]) )) = 1;

                /* "_marching_cubes_lewiner_cy.pyx":1740
 * 
 *                                 # Get case, if non-nul, enter the big switch
 *                                 case = luts.CASES.get2(cell.index, 0)             # <<<<<<<<<<<<<<
 *                                 # If the current cube is being visited to increase the reliability of an unsure case,
 *                                 # no faces are created and no further neighbours are visited
 */
                __pyx_v_case = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->CASES->__pyx_vtab)->get2(__pyx_v_luts->CASES, __pyx_v_cell->index, 0);

                /* "_marching_cubes_lewiner_cy.pyx":1743
 *                                 # If the current cube is being visited to increase the reliability of an unsure case,
 *                                 # no faces are created and no further neighbours are visited
 *                                 if case > 0:             # <<<<<<<<<<<<<<
 * 
 *                                     # If the current cube is producing a non-trivial Marching Cubes configuration,
 */
                __pyx_t_11 = ((__pyx_v_case > 0) != 0);
                if (__pyx_t_11) {

                  /* "_marching_cubes_lewiner_cy.pyx":1747
 *                                     # If the current cube is producing a non-trivial Marching Cubes configuration,
 *                                     # we leave it for later. It could otherwise produce unwanted inversions in face orientations.
 *                                     if (not case in [1,2,5,8,9]) and (queue.empty() == False or unsure_cases_queue.empty() == False):             # <<<<<<<<<<<<<<
 *                                         non_trivial_mc_cases_queue.push_back((z,y,x))
 *                                         continue
 */
                  switch (__pyx_v_case) {
                    case 1:
                    case 2:
                    case 5:
                    case 8:
                    case 9:
                    __pyx_t_23 = 0;
                    break;
                    default:
                    __pyx_t_23 = 1;
                    break;
                  }
                  __pyx_t_56 = (__pyx_t_23 != 0);
                  if (__pyx_t_56) {
                  } else {
                    __pyx_t_11 = __pyx_t_56;
                    goto __pyx_L177_bool_binop_done;
                  }
                  __pyx_t_56 = ((__pyx_v_queue.empty() == 0) != 0);
                  if (!__pyx_t_56) {
                  } else {
                    __pyx_t_11 = __pyx_t_56;
                    goto __pyx_L177_bool_binop_done;
                  }
                  __pyx_t_56 = ((__pyx_v_unsure_cases_queue.empty() == 0) != 0);
                  __pyx_t_11 = __pyx_t_56;
                  __pyx_L177_bool_binop_done:;
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1748
 *                                     # we leave it for later. It could otherwise produce unwanted inversions in face orientations.
 *                                     if (not case in [1,2,5,8,9]) and (queue.empty() == False or unsure_cases_queue.empty() == False):
 *                                         non_trivial_mc_cases_queue.push_back((z,y,x))             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                    __pyx_t_55.f0 = __pyx_v_z;
                    __pyx_t_55.f1 = __pyx_v_y;
                    __pyx_t_55.f2 = __pyx_v_x;
                    __pyx_v_non_trivial_mc_cases_queue.push_back(__pyx_t_55);

                    /* "_marching_cubes_lewiner_cy.pyx":1749
 *                                     if (not case in [1,2,5,8,9]) and (queue.empty() == False or unsure_cases_queue.empty() == False):
 *                                         non_trivial_mc_cases_queue.push_back((z,y,x))
 *                                         continue             # <<<<<<<<<<<<<<
 * 
 *                                     config = luts.CASES.get2(cell.index, 1)
 */
                    goto __pyx_L75_continue;

                    /* "_marching_cubes_lewiner_cy.pyx":1747
 *                                     # If the current cube is producing a non-trivial Marching Cubes configuration,
 *                                     # we leave it for later. It could otherwise produce unwanted inversions in face orientations.
 *                                     if (not case in [1,2,5,8,9]) and (queue.empty() == False or unsure_cases_queue.empty() == False):             # <<<<<<<<<<<<<<
 *                                         non_trivial_mc_cases_queue.push_back((z,y,x))
 *                                         continue
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1751
 *                                         continue
 * 
 *                                     config = luts.CASES.get2(cell.index, 1)             # <<<<<<<<<<<<<<
 *                                     if check_the_big_switch(luts, cell, case, config) >= 2:
 *                                         visited[z,y,x] = True
 */
                  __pyx_v_config = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->CASES->__pyx_vtab)->get2(__pyx_v_luts->CASES, __pyx_v_cell->index, 1);

                  /* "_marching_cubes_lewiner_cy.pyx":1752
 * 
 *                                     config = luts.CASES.get2(cell.index, 1)
 *                                     if check_the_big_switch(luts, cell, case, config) >= 2:             # <<<<<<<<<<<<<<
 *                                         visited[z,y,x] = True
 * 
 */
                  __pyx_t_11 = ((__pyx_f_26_marching_cubes_lewiner_cy_check_the_big_switch(__pyx_v_luts, __pyx_v_cell, __pyx_v_case, __pyx_v_config) >= 2) != 0);
                  if (__pyx_t_11) {

                    /* "_marching_cubes_lewiner_cy.pyx":1753
 *                                     config = luts.CASES.get2(cell.index, 1)
 *                                     if check_the_big_switch(luts, cell, case, config) >= 2:
 *                                         visited[z,y,x] = True             # <<<<<<<<<<<<<<
 * 
 *                                         the_big_switch(luts, cell, case, config)
 */
                    __pyx_t_22 = __pyx_v_z;
                    __pyx_t_21 = __pyx_v_y;
                    __pyx_t_20 = __pyx_v_x;
                    *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_22 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_20 * __pyx_v_visited.strides[2]) )) = 1;

                    /* "_marching_cubes_lewiner_cy.pyx":1755
 *                                         visited[z,y,x] = True
 * 
 *                                         the_big_switch(luts, cell, case, config)             # <<<<<<<<<<<<<<
 * 
 *                                         if x_st < Nx_bound:
 */
                    (void)(__pyx_f_26_marching_cubes_lewiner_cy_the_big_switch(__pyx_v_luts, __pyx_v_cell, __pyx_v_case, __pyx_v_config));

                    /* "_marching_cubes_lewiner_cy.pyx":1757
 *                                         the_big_switch(luts, cell, case, config)
 * 
 *                                         if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y,x_st))
 *                                         if y_st < Ny_bound:
 */
                    __pyx_t_11 = ((__pyx_v_x_st < __pyx_v_Nx_bound) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1758
 * 
 *                                         if x_st < Nx_bound:
 *                                             queue.push_back((z,y,x_st))             # <<<<<<<<<<<<<<
 *                                         if y_st < Ny_bound:
 *                                             queue.push_back((z,y_st,x))
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x_st;
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1757
 *                                         the_big_switch(luts, cell, case, config)
 * 
 *                                         if x_st < Nx_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y,x_st))
 *                                         if y_st < Ny_bound:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1759
 *                                         if x_st < Nx_bound:
 *                                             queue.push_back((z,y,x_st))
 *                                         if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y_st,x))
 *                                         if x-st >= 0:
 */
                    __pyx_t_11 = ((__pyx_v_y_st < __pyx_v_Ny_bound) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1760
 *                                             queue.push_back((z,y,x_st))
 *                                         if y_st < Ny_bound:
 *                                             queue.push_back((z,y_st,x))             # <<<<<<<<<<<<<<
 *                                         if x-st >= 0:
 *                                             queue.push_back((z,y,x-st))
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y_st;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1759
 *                                         if x_st < Nx_bound:
 *                                             queue.push_back((z,y,x_st))
 *                                         if y_st < Ny_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y_st,x))
 *                                         if x-st >= 0:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1761
 *                                         if y_st < Ny_bound:
 *                                             queue.push_back((z,y_st,x))
 *                                         if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y,x-st))
 *                                         if y-st >= 0:
 */
                    __pyx_t_11 = (((__pyx_v_x - __pyx_v_st) >= 0) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1762
 *                                             queue.push_back((z,y_st,x))
 *                                         if x-st >= 0:
 *                                             queue.push_back((z,y,x-st))             # <<<<<<<<<<<<<<
 *                                         if y-st >= 0:
 *                                             queue.push_back((z,y-st,x))
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = (__pyx_v_x - __pyx_v_st);
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1761
 *                                         if y_st < Ny_bound:
 *                                             queue.push_back((z,y_st,x))
 *                                         if x-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y,x-st))
 *                                         if y-st >= 0:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1763
 *                                         if x-st >= 0:
 *                                             queue.push_back((z,y,x-st))
 *                                         if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y-st,x))
 *                                         if z-st >= 0:
 */
                    __pyx_t_11 = (((__pyx_v_y - __pyx_v_st) >= 0) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1764
 *                                             queue.push_back((z,y,x-st))
 *                                         if y-st >= 0:
 *                                             queue.push_back((z,y-st,x))             # <<<<<<<<<<<<<<
 *                                         if z-st >= 0:
 *                                             queue.push_back((z-st,y,x))
 */
                      __pyx_t_55.f0 = __pyx_v_z;
                      __pyx_t_55.f1 = (__pyx_v_y - __pyx_v_st);
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1763
 *                                         if x-st >= 0:
 *                                             queue.push_back((z,y,x-st))
 *                                         if y-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z,y-st,x))
 *                                         if z-st >= 0:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1765
 *                                         if y-st >= 0:
 *                                             queue.push_back((z,y-st,x))
 *                                         if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z-st,y,x))
 *                                         if z_st < Nz_bound:
 */
                    __pyx_t_11 = (((__pyx_v_z - __pyx_v_st) >= 0) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1766
 *                                             queue.push_back((z,y-st,x))
 *                                         if z-st >= 0:
 *                                             queue.push_back((z-st,y,x))             # <<<<<<<<<<<<<<
 *                                         if z_st < Nz_bound:
 *                                             queue.push_back((z_st,y,x))
 */
                      __pyx_t_55.f0 = (__pyx_v_z - __pyx_v_st);
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1765
 *                                         if y-st >= 0:
 *                                             queue.push_back((z,y-st,x))
 *                                         if z-st >= 0:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z-st,y,x))
 *                                         if z_st < Nz_bound:
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1767
 *                                         if z-st >= 0:
 *                                             queue.push_back((z-st,y,x))
 *                                         if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z_st,y,x))
 * 
 */
                    __pyx_t_11 = ((__pyx_v_z_st < __pyx_v_Nz_bound) != 0);
                    if (__pyx_t_11) {

                      /* "_marching_cubes_lewiner_cy.pyx":1768
 *                                             queue.push_back((z-st,y,x))
 *                                         if z_st < Nz_bound:
 *                                             queue.push_back((z_st,y,x))             # <<<<<<<<<<<<<<
 * 
 *                                 else:
 */
                      __pyx_t_55.f0 = __pyx_v_z_st;
                      __pyx_t_55.f1 = __pyx_v_y;
                      __pyx_t_55.f2 = __pyx_v_x;
                      __pyx_v_queue.push_back(__pyx_t_55);

                      /* "_marching_cubes_lewiner_cy.pyx":1767
 *                                         if z-st >= 0:
 *                                             queue.push_back((z-st,y,x))
 *                                         if z_st < Nz_bound:             # <<<<<<<<<<<<<<
 *                                             queue.push_back((z_st,y,x))
 * 
 */
                    }

                    /* "_marching_cubes_lewiner_cy.pyx":1752
 * 
 *                                     config = luts.CASES.get2(cell.index, 1)
 *                                     if check_the_big_switch(luts, cell, case, config) >= 2:             # <<<<<<<<<<<<<<
 *                                         visited[z,y,x] = True
 * 
 */
                  }

                  /* "_marching_cubes_lewiner_cy.pyx":1743
 *                                 # If the current cube is being visited to increase the reliability of an unsure case,
 *                                 # no faces are created and no further neighbours are visited
 *                                 if case > 0:             # <<<<<<<<<<<<<<
 * 
 *                                     # If the current cube is producing a non-trivial Marching Cubes configuration,
 */
                  goto __pyx_L175;
                }

                /* "_marching_cubes_lewiner_cy.pyx":1771
 * 
 *                                 else:
 *                                     visited[z,y,x] = True             # <<<<<<<<<<<<<<
 * 
 *     return cell.get_vertices(), cell.get_faces(), cell.get_normals(), cell.get_values()
 */
                /*else*/ {
                  __pyx_t_20 = __pyx_v_z;
                  __pyx_t_21 = __pyx_v_y;
                  __pyx_t_22 = __pyx_v_x;
                  *((int *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_visited.data + __pyx_t_20 * __pyx_v_visited.strides[0]) ) + __pyx_t_21 * __pyx_v_visited.strides[1]) ) + __pyx_t_22 * __pyx_v_visited.strides[2]) )) = 1;
                }
                __pyx_L175:;

                /* "_marching_cubes_lewiner_cy.pyx":1717
 * 
 * 
 *                             if unsure_cases_visit_neighbours == True:             # <<<<<<<<<<<<<<
 *                                 v0 = signed_im[z,y,x] * im[z   ,y, x]
 *                                 v1 = signed_im[z,y,x_st] * im[z   ,y, x_st]
 */
              }

              /* "_marching_cubes_lewiner_cy.pyx":1493
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],             # <<<<<<<<<<<<<<
 *                                         im[z_st,y, x], im[z_st,y, x_st], im[z_st,y_st, x_st], im[z_st,y_st, x]) < avg_cube_val_thresh and
 *                             max_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
            }

            /* "_marching_cubes_lewiner_cy.pyx":1491
 *                     x_st = x+st
 * 
 *                     if visited[z,y,x] == False and (no_mask or mask[z_st, y_st, x_st]):             # <<<<<<<<<<<<<<
 * 
 *                         if (avg_cube( im[z   ,y, x], im[z   ,y, x_st], im[z   ,y_st, x_st], im[z   ,y_st, x],
 */
          }
          __pyx_L75_continue:;
        }
        __pyx_L7_continue:;
      }
    }
  }

  /* "_marching_cubes_lewiner_cy.pyx":1773
 *                                     visited[z,y,x] = True
 * 
 *     return cell.get_vertices(), cell.get_faces(), cell.get_normals(), cell.get_values()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cell), __pyx_n_s_get_vertices); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cell), __pyx_n_s_get_faces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_7 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cell), __pyx_n_s_get_normals); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cell), __pyx_n_s_get_values); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_45 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_45 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_45)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_45);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_6 = (__pyx_t_45) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_45) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_45); __pyx_t_45 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
  __pyx_t_8 = 0;
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1115
 * 
 * 
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,             # <<<<<<<<<<<<<<
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_15, 1);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_XDECREF(__pyx_t_46);
  __Pyx_XDECREF(__pyx_t_47);
  __Pyx_XDECREF(__pyx_t_48);
  __PYX_XDEC_MEMVIEW(&__pyx_t_49, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.marching_cubes_udf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_voxel_size);
  __Pyx_XDECREF((PyObject *)__pyx_v_cell);
  __PYX_XDEC_MEMVIEW(&__pyx_v_signed_im, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_signed_im_mask, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_base_vec, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_visited, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_sign_vs);
  __Pyx_XDECREF((PyObject *)__pyx_v_visited_vs);
  __Pyx_XDECREF((PyObject *)__pyx_v_vertex_index_array_z);
  __Pyx_XDECREF((PyObject *)__pyx_v_vertex_index_array_y);
  __Pyx_XDECREF((PyObject *)__pyx_v_vertex_index_array_x);
  __Pyx_XDECREF((PyObject *)__pyx_v_directions_z);
  __Pyx_XDECREF((PyObject *)__pyx_v_directions_y);
  __Pyx_XDECREF((PyObject *)__pyx_v_directions_x);
  __PYX_XDEC_MEMVIEW(&__pyx_v_im, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_grads, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1776
 * 
 * 
 * cdef float compute_edge_vote(float[:] g1, float[:] g2, float dir_z, float dir_y, float dir_x):             # <<<<<<<<<<<<<<
 *     """ Computes the edge vote
 *         Assumes that one and only one among dir_z, dir_y and dir_x is not zero
 */

static float __pyx_f_26_marching_cubes_lewiner_cy_compute_edge_vote(__Pyx_memviewslice __pyx_v_g1, __Pyx_memviewslice __pyx_v_g2, float __pyx_v_dir_z, float __pyx_v_dir_y, float __pyx_v_dir_x) {
  float __pyx_v_result;
  float __pyx_v_dir_sum;
  float __pyx_v_proj_g1;
  float __pyx_v_proj_g2;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("compute_edge_vote", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1780
 *         Assumes that one and only one among dir_z, dir_y and dir_x is not zero
 *     """
 *     cdef float result = 0.0             # <<<<<<<<<<<<<<
 *     cdef float dir_sum = dir_z + dir_y + dir_x
 *     cdef float proj_g1
 */
  __pyx_v_result = 0.0;

  /* "_marching_cubes_lewiner_cy.pyx":1781
 *     """
 *     cdef float result = 0.0
 *     cdef float dir_sum = dir_z + dir_y + dir_x             # <<<<<<<<<<<<<<
 *     cdef float proj_g1
 *     cdef float proj_g2
 */
  __pyx_v_dir_sum = ((__pyx_v_dir_z + __pyx_v_dir_y) + __pyx_v_dir_x);

  /* "_marching_cubes_lewiner_cy.pyx":1785
 *     cdef float proj_g2
 * 
 *     if dir_z != 0:             # <<<<<<<<<<<<<<
 *         proj_g1 = g1[0]
 *         proj_g2 = g2[0]
 */
  __pyx_t_1 = ((__pyx_v_dir_z != 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1786
 * 
 *     if dir_z != 0:
 *         proj_g1 = g1[0]             # <<<<<<<<<<<<<<
 *         proj_g2 = g2[0]
 *     elif dir_y != 0:
 */
    __pyx_t_2 = 0;
    __pyx_v_proj_g1 = (*((float *) ( /* dim=0 */ (__pyx_v_g1.data + __pyx_t_2 * __pyx_v_g1.strides[0]) )));

    /* "_marching_cubes_lewiner_cy.pyx":1787
 *     if dir_z != 0:
 *         proj_g1 = g1[0]
 *         proj_g2 = g2[0]             # <<<<<<<<<<<<<<
 *     elif dir_y != 0:
 *         proj_g1 = g1[1]
 */
    __pyx_t_2 = 0;
    __pyx_v_proj_g2 = (*((float *) ( /* dim=0 */ (__pyx_v_g2.data + __pyx_t_2 * __pyx_v_g2.strides[0]) )));

    /* "_marching_cubes_lewiner_cy.pyx":1785
 *     cdef float proj_g2
 * 
 *     if dir_z != 0:             # <<<<<<<<<<<<<<
 *         proj_g1 = g1[0]
 *         proj_g2 = g2[0]
 */
    goto __pyx_L3;
  }

  /* "_marching_cubes_lewiner_cy.pyx":1788
 *         proj_g1 = g1[0]
 *         proj_g2 = g2[0]
 *     elif dir_y != 0:             # <<<<<<<<<<<<<<
 *         proj_g1 = g1[1]
 *         proj_g2 = g2[1]
 */
  __pyx_t_1 = ((__pyx_v_dir_y != 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1789
 *         proj_g2 = g2[0]
 *     elif dir_y != 0:
 *         proj_g1 = g1[1]             # <<<<<<<<<<<<<<
 *         proj_g2 = g2[1]
 *     else:
 */
    __pyx_t_2 = 1;
    __pyx_v_proj_g1 = (*((float *) ( /* dim=0 */ (__pyx_v_g1.data + __pyx_t_2 * __pyx_v_g1.strides[0]) )));

    /* "_marching_cubes_lewiner_cy.pyx":1790
 *     elif dir_y != 0:
 *         proj_g1 = g1[1]
 *         proj_g2 = g2[1]             # <<<<<<<<<<<<<<
 *     else:
 *         proj_g1 = g1[2]
 */
    __pyx_t_2 = 1;
    __pyx_v_proj_g2 = (*((float *) ( /* dim=0 */ (__pyx_v_g2.data + __pyx_t_2 * __pyx_v_g2.strides[0]) )));

    /* "_marching_cubes_lewiner_cy.pyx":1788
 *         proj_g1 = g1[0]
 *         proj_g2 = g2[0]
 *     elif dir_y != 0:             # <<<<<<<<<<<<<<
 *         proj_g1 = g1[1]
 *         proj_g2 = g2[1]
 */
    goto __pyx_L3;
  }

  /* "_marching_cubes_lewiner_cy.pyx":1792
 *         proj_g2 = g2[1]
 *     else:
 *         proj_g1 = g1[2]             # <<<<<<<<<<<<<<
 *         proj_g2 = g2[2]
 * 
 */
  /*else*/ {
    __pyx_t_2 = 2;
    __pyx_v_proj_g1 = (*((float *) ( /* dim=0 */ (__pyx_v_g1.data + __pyx_t_2 * __pyx_v_g1.strides[0]) )));

    /* "_marching_cubes_lewiner_cy.pyx":1793
 *     else:
 *         proj_g1 = g1[2]
 *         proj_g2 = g2[2]             # <<<<<<<<<<<<<<
 * 
 *     if dir_sum > 0:
 */
    __pyx_t_2 = 2;
    __pyx_v_proj_g2 = (*((float *) ( /* dim=0 */ (__pyx_v_g2.data + __pyx_t_2 * __pyx_v_g2.strides[0]) )));
  }
  __pyx_L3:;

  /* "_marching_cubes_lewiner_cy.pyx":1795
 *         proj_g2 = g2[2]
 * 
 *     if dir_sum > 0:             # <<<<<<<<<<<<<<
 *         if proj_g2 > 0 and proj_g1 < 0:
 *             result = 1.0
 */
  __pyx_t_1 = ((__pyx_v_dir_sum > 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1796
 * 
 *     if dir_sum > 0:
 *         if proj_g2 > 0 and proj_g1 < 0:             # <<<<<<<<<<<<<<
 *             result = 1.0
 *         else:
 */
    __pyx_t_3 = ((__pyx_v_proj_g2 > 0.0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_proj_g1 < 0.0) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":1797
 *     if dir_sum > 0:
 *         if proj_g2 > 0 and proj_g1 < 0:
 *             result = 1.0             # <<<<<<<<<<<<<<
 *         else:
 *             result = dot3(g1, g2)
 */
      __pyx_v_result = 1.0;

      /* "_marching_cubes_lewiner_cy.pyx":1796
 * 
 *     if dir_sum > 0:
 *         if proj_g2 > 0 and proj_g1 < 0:             # <<<<<<<<<<<<<<
 *             result = 1.0
 *         else:
 */
      goto __pyx_L5;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1799
 *             result = 1.0
 *         else:
 *             result = dot3(g1, g2)             # <<<<<<<<<<<<<<
 *     else:
 *         if proj_g2 < 0 and proj_g1 > 0:
 */
    /*else*/ {
      __pyx_v_result = __pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_g1, __pyx_v_g2);
    }
    __pyx_L5:;

    /* "_marching_cubes_lewiner_cy.pyx":1795
 *         proj_g2 = g2[2]
 * 
 *     if dir_sum > 0:             # <<<<<<<<<<<<<<
 *         if proj_g2 > 0 and proj_g1 < 0:
 *             result = 1.0
 */
    goto __pyx_L4;
  }

  /* "_marching_cubes_lewiner_cy.pyx":1801
 *             result = dot3(g1, g2)
 *     else:
 *         if proj_g2 < 0 and proj_g1 > 0:             # <<<<<<<<<<<<<<
 *             result = 1.0
 *         else:
 */
  /*else*/ {
    __pyx_t_3 = ((__pyx_v_proj_g2 < 0.0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_proj_g1 > 0.0) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "_marching_cubes_lewiner_cy.pyx":1802
 *     else:
 *         if proj_g2 < 0 and proj_g1 > 0:
 *             result = 1.0             # <<<<<<<<<<<<<<
 *         else:
 *             result = dot3(g1, g2)
 */
      __pyx_v_result = 1.0;

      /* "_marching_cubes_lewiner_cy.pyx":1801
 *             result = dot3(g1, g2)
 *     else:
 *         if proj_g2 < 0 and proj_g1 > 0:             # <<<<<<<<<<<<<<
 *             result = 1.0
 *         else:
 */
      goto __pyx_L8;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1804
 *             result = 1.0
 *         else:
 *             result = dot3(g1, g2)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    /*else*/ {
      __pyx_v_result = __pyx_f_26_marching_cubes_lewiner_cy_dot3(__pyx_v_g1, __pyx_v_g2);
    }
    __pyx_L8:;
  }
  __pyx_L4:;

  /* "_marching_cubes_lewiner_cy.pyx":1806
 *             result = dot3(g1, g2)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1776
 * 
 * 
 * cdef float compute_edge_vote(float[:] g1, float[:] g2, float dir_z, float dir_y, float dir_x):             # <<<<<<<<<<<<<<
 *     """ Computes the edge vote
 *         Assumes that one and only one among dir_z, dir_y and dir_x is not zero
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1809
 * 
 * 
 * cdef float my_sign(float a):             # <<<<<<<<<<<<<<
 *     if a > 0:
 *         return 1.
 */

static float __pyx_f_26_marching_cubes_lewiner_cy_my_sign(float __pyx_v_a) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("my_sign", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1810
 * 
 * cdef float my_sign(float a):
 *     if a > 0:             # <<<<<<<<<<<<<<
 *         return 1.
 *     if a < 0:
 */
  __pyx_t_1 = ((__pyx_v_a > 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1811
 * cdef float my_sign(float a):
 *     if a > 0:
 *         return 1.             # <<<<<<<<<<<<<<
 *     if a < 0:
 *         return -1.
 */
    __pyx_r = 1.;
    goto __pyx_L0;

    /* "_marching_cubes_lewiner_cy.pyx":1810
 * 
 * cdef float my_sign(float a):
 *     if a > 0:             # <<<<<<<<<<<<<<
 *         return 1.
 *     if a < 0:
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":1812
 *     if a > 0:
 *         return 1.
 *     if a < 0:             # <<<<<<<<<<<<<<
 *         return -1.
 *     if a == 0:
 */
  __pyx_t_1 = ((__pyx_v_a < 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1813
 *         return 1.
 *     if a < 0:
 *         return -1.             # <<<<<<<<<<<<<<
 *     if a == 0:
 *         return 0.
 */
    __pyx_r = -1.;
    goto __pyx_L0;

    /* "_marching_cubes_lewiner_cy.pyx":1812
 *     if a > 0:
 *         return 1.
 *     if a < 0:             # <<<<<<<<<<<<<<
 *         return -1.
 *     if a == 0:
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":1814
 *     if a < 0:
 *         return -1.
 *     if a == 0:             # <<<<<<<<<<<<<<
 *         return 0.
 * 
 */
  __pyx_t_1 = ((__pyx_v_a == 0.0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":1815
 *         return -1.
 *     if a == 0:
 *         return 0.             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0.;
    goto __pyx_L0;

    /* "_marching_cubes_lewiner_cy.pyx":1814
 *     if a < 0:
 *         return -1.
 *     if a == 0:             # <<<<<<<<<<<<<<
 *         return 0.
 * 
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":1809
 * 
 * 
 * cdef float my_sign(float a):             # <<<<<<<<<<<<<<
 *     if a > 0:
 *         return 1.
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1818
 * 
 * 
 * cdef int non_zero_norm(float[:] a):             # <<<<<<<<<<<<<<
 *     """ Returns True if the sum of absolute values > 0
 *     """
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_non_zero_norm(__Pyx_memviewslice __pyx_v_a) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("non_zero_norm", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1821
 *     """ Returns True if the sum of absolute values > 0
 *     """
 *     return (abs(a[0]) + abs(a[1]) + abs(a[2])) > 0             # <<<<<<<<<<<<<<
 *     # return abs(a[0]) > 0 or abs(a[1]) > 0 or abs(a[2]) > 0 #faster?
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = 1;
  __pyx_t_3 = 2;
  __pyx_r = (((fabsf((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_1 * __pyx_v_a.strides[0]) )))) + fabsf((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_2 * __pyx_v_a.strides[0]) ))))) + fabsf((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_3 * __pyx_v_a.strides[0]) ))))) > 0.0);
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1818
 * 
 * 
 * cdef int non_zero_norm(float[:] a):             # <<<<<<<<<<<<<<
 *     """ Returns True if the sum of absolute values > 0
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1825
 * 
 * 
 * cdef float avg_cube(float v1, float v2, float v3, float v4,             # <<<<<<<<<<<<<<
 *                     float v5, float v6, float v7, float v8):
 *     """ Return the average value of v_i's
 */

static float __pyx_f_26_marching_cubes_lewiner_cy_avg_cube(float __pyx_v_v1, float __pyx_v_v2, float __pyx_v_v3, float __pyx_v_v4, float __pyx_v_v5, float __pyx_v_v6, float __pyx_v_v7, float __pyx_v_v8) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("avg_cube", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1829
 *     """ Return the average value of v_i's
 *     """
 *     return 0.125 * (v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8)             # <<<<<<<<<<<<<<
 * 
 * cdef float max_cube(float v1, float v2, float v3, float v4,
 */
  __pyx_r = (0.125 * (((((((__pyx_v_v1 + __pyx_v_v2) + __pyx_v_v3) + __pyx_v_v4) + __pyx_v_v5) + __pyx_v_v6) + __pyx_v_v7) + __pyx_v_v8));
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1825
 * 
 * 
 * cdef float avg_cube(float v1, float v2, float v3, float v4,             # <<<<<<<<<<<<<<
 *                     float v5, float v6, float v7, float v8):
 *     """ Return the average value of v_i's
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1831
 *     return 0.125 * (v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8)
 * 
 * cdef float max_cube(float v1, float v2, float v3, float v4,             # <<<<<<<<<<<<<<
 *                     float v5, float v6, float v7, float v8):
 *     """ Return the max value of v_i's
 */

static float __pyx_f_26_marching_cubes_lewiner_cy_max_cube(float __pyx_v_v1, float __pyx_v_v2, float __pyx_v_v3, float __pyx_v_v4, float __pyx_v_v5, float __pyx_v_v6, float __pyx_v_v7, float __pyx_v_v8) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  __Pyx_RefNannySetupContext("max_cube", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  __pyx_t_1 = __pyx_v_v8;
  __pyx_t_2 = __pyx_v_v7;
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_1 = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":1840
 *                 v4, max(
 *                 v5, max(
 *                 v6, max(             # <<<<<<<<<<<<<<
 *                 v7, v8)))))))
 * 
 */
  __pyx_t_3 = __pyx_v_v6;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_3) != 0)) {
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  __pyx_t_1 = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":1839
 *                 v3, max(
 *                 v4, max(
 *                 v5, max(             # <<<<<<<<<<<<<<
 *                 v6, max(
 *                 v7, v8)))))))
 */
  __pyx_t_2 = __pyx_v_v5;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_1 = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":1838
 *                 v2, max(
 *                 v3, max(
 *                 v4, max(             # <<<<<<<<<<<<<<
 *                 v5, max(
 *                 v6, max(
 */
  __pyx_t_3 = __pyx_v_v4;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_3) != 0)) {
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  __pyx_t_1 = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":1837
 *     return max(v1, max(
 *                 v2, max(
 *                 v3, max(             # <<<<<<<<<<<<<<
 *                 v4, max(
 *                 v5, max(
 */
  __pyx_t_2 = __pyx_v_v3;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_t_1 = __pyx_t_3;

  /* "_marching_cubes_lewiner_cy.pyx":1836
 *     """
 *     return max(v1, max(
 *                 v2, max(             # <<<<<<<<<<<<<<
 *                 v3, max(
 *                 v4, max(
 */
  __pyx_t_3 = __pyx_v_v2;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_3) != 0)) {
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  __pyx_t_1 = __pyx_t_2;

  /* "_marching_cubes_lewiner_cy.pyx":1835
 *     """ Return the max value of v_i's
 *     """
 *     return max(v1, max(             # <<<<<<<<<<<<<<
 *                 v2, max(
 *                 v3, max(
 */
  __pyx_t_2 = __pyx_v_v1;

  /* "_marching_cubes_lewiner_cy.pyx":1841
 *                 v5, max(
 *                 v6, max(
 *                 v7, v8)))))))             # <<<<<<<<<<<<<<
 * 
 * cdef float dot3(float[:] a, float[:] b):
 */
  if (((__pyx_t_1 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1831
 *     return 0.125 * (v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8)
 * 
 * cdef float max_cube(float v1, float v2, float v3, float v4,             # <<<<<<<<<<<<<<
 *                     float v5, float v6, float v7, float v8):
 *     """ Return the max value of v_i's
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1843
 *                 v7, v8)))))))
 * 
 * cdef float dot3(float[:] a, float[:] b):             # <<<<<<<<<<<<<<
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
 * 
 */

static float __pyx_f_26_marching_cubes_lewiner_cy_dot3(__Pyx_memviewslice __pyx_v_a, __Pyx_memviewslice __pyx_v_b) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("dot3", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1844
 * 
 * cdef float dot3(float[:] a, float[:] b):
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 1;
  __pyx_t_4 = 1;
  __pyx_t_5 = 2;
  __pyx_t_6 = 2;
  __pyx_r = ((((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_1 * __pyx_v_a.strides[0]) ))) * (*((float *) ( /* dim=0 */ (__pyx_v_b.data + __pyx_t_2 * __pyx_v_b.strides[0]) )))) + ((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_3 * __pyx_v_a.strides[0]) ))) * (*((float *) ( /* dim=0 */ (__pyx_v_b.data + __pyx_t_4 * __pyx_v_b.strides[0]) ))))) + ((*((float *) ( /* dim=0 */ (__pyx_v_a.data + __pyx_t_5 * __pyx_v_a.strides[0]) ))) * (*((float *) ( /* dim=0 */ (__pyx_v_b.data + __pyx_t_6 * __pyx_v_b.strides[0]) )))));
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1843
 *                 v7, v8)))))))
 * 
 * cdef float dot3(float[:] a, float[:] b):             # <<<<<<<<<<<<<<
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":1847
 * 
 * 
 * cdef bint the_big_switch(LutProvider luts, Cell cell, int case, int config):             # <<<<<<<<<<<<<<
 *     """ The big switch (i.e. if-statement) that I meticulously ported from
 *     the source code provided by Lewiner et. al.
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_the_big_switch(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_cell, int __pyx_v_case, int __pyx_v_config) {
  int __pyx_v_subconfig;
  int __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("the_big_switch", 0);

  /* "_marching_cubes_lewiner_cy.pyx":1853
 *     """
 * 
 *     cdef int subconfig = 0             # <<<<<<<<<<<<<<
 *     cdef bint result = False
 * 
 */
  __pyx_v_subconfig = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1854
 * 
 *     cdef int subconfig = 0
 *     cdef bint result = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1862
 *     #cell.add_triangles(luts.TILINGX, config, N)
 * 
 *     if case == 1:             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING1, config, 1)
 * 
 */
  switch (__pyx_v_case) {
    case 1:

    /* "_marching_cubes_lewiner_cy.pyx":1863
 * 
 *     if case == 1:
 *         result = cell.add_triangles(luts.TILING1, config, 1)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 2:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1862
 *     #cell.add_triangles(luts.TILINGX, config, N)
 * 
 *     if case == 1:             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING1, config, 1)
 * 
 */
    break;
    case 2:

    /* "_marching_cubes_lewiner_cy.pyx":1866
 * 
 *     elif case == 2:
 *         result = cell.add_triangles(luts.TILING2, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 3:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1865
 *         result = cell.add_triangles(luts.TILING1, config, 1)
 * 
 *     elif case == 2:             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING2, config, 2)
 * 
 */
    break;
    case 3:

    /* "_marching_cubes_lewiner_cy.pyx":1869
 * 
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING3_2, config, 4)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST3->__pyx_vtab)->get1(__pyx_v_luts->TEST3, __pyx_v_config)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":1870
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):
 *             result = cell.add_triangles(luts.TILING3_2, config, 4)             # <<<<<<<<<<<<<<
 *         else:
 *             result = cell.add_triangles(luts.TILING3_1, config, 2)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING3_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1869
 * 
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING3_2, config, 4)
 *         else:
 */
      goto __pyx_L3;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1872
 *             result = cell.add_triangles(luts.TILING3_2, config, 4)
 *         else:
 *             result = cell.add_triangles(luts.TILING3_1, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 4 :
 */
    /*else*/ {
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING3_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L3:;

    /* "_marching_cubes_lewiner_cy.pyx":1868
 *         result = cell.add_triangles(luts.TILING2, config, 2)
 * 
 *     elif case == 3:             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST3.get1(config)):
 *             result = cell.add_triangles(luts.TILING3_2, config, 4)
 */
    break;
    case 4:

    /* "_marching_cubes_lewiner_cy.pyx":1875
 * 
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING4_1, config, 2)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST4->__pyx_vtab)->get1(__pyx_v_luts->TEST4, __pyx_v_config)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":1876
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):
 *             result = cell.add_triangles(luts.TILING4_1, config, 2)             # <<<<<<<<<<<<<<
 *         else:
 *             result = cell.add_triangles(luts.TILING4_2, config, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING4_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1875
 * 
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING4_1, config, 2)
 *         else:
 */
      goto __pyx_L4;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1878
 *             result = cell.add_triangles(luts.TILING4_1, config, 2)
 *         else:
 *             result = cell.add_triangles(luts.TILING4_2, config, 6)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 5 :
 */
    /*else*/ {
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING4_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "_marching_cubes_lewiner_cy.pyx":1874
 *             result = cell.add_triangles(luts.TILING3_1, config, 2)
 * 
 *     elif case == 4 :             # <<<<<<<<<<<<<<
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):
 *             result = cell.add_triangles(luts.TILING4_1, config, 2)
 */
    break;
    case 5:

    /* "_marching_cubes_lewiner_cy.pyx":1881
 * 
 *     elif case == 5 :
 *         result = cell.add_triangles(luts.TILING5, config, 3)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 6 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING5);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1880
 *             result = cell.add_triangles(luts.TILING4_2, config, 6)
 * 
 *     elif case == 5 :             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING5, config, 3)
 * 
 */
    break;
    case 6:

    /* "_marching_cubes_lewiner_cy.pyx":1884
 * 
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST6->__pyx_vtab)->get2(__pyx_v_luts->TEST6, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":1885
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1884
 * 
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)
 *         else:
 */
      goto __pyx_L5;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1887
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING6_1_1, config, 3)
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST6->__pyx_vtab)->get2(__pyx_v_luts->TEST6, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1888
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING6_1_1, config, 3)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_1_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1887
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING6_1_1, config, 3)
 *             else:
 */
        goto __pyx_L6;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1891
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING6_1_2, config, 9)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 7 :
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_1_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L6:;
    }
    __pyx_L5:;

    /* "_marching_cubes_lewiner_cy.pyx":1883
 *         result = cell.add_triangles(luts.TILING5, config, 3)
 * 
 *     elif case == 6 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST6.get2(config,0)):
 *             result = cell.add_triangles(luts.TILING6_2, config, 5)
 */
    break;
    case 7:

    /* "_marching_cubes_lewiner_cy.pyx":1895
 *     elif case == 7 :
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 1);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1896
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 *         # Behavior depends on subconfig
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 1)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 2);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1897
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4             # <<<<<<<<<<<<<<
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.add_triangles(luts.TILING7_1, config, 3)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 2)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 4);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1899
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.add_triangles(luts.TILING7_1, config, 3)             # <<<<<<<<<<<<<<
 *         elif subconfig == 1: result = cell.add_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.add_triangles2(luts.TILING7_2, config, 1, 5)
 */
    switch (__pyx_v_subconfig) {
      case 0:
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":1900
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.add_triangles(luts.TILING7_1, config, 3)
 *         elif subconfig == 1: result = cell.add_triangles2(luts.TILING7_2, config, 0, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 2: result = cell.add_triangles2(luts.TILING7_2, config, 1, 5)
 *         elif subconfig == 3:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":1901
 *         if subconfig == 0: result = cell.add_triangles(luts.TILING7_1, config, 3)
 *         elif subconfig == 1: result = cell.add_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.add_triangles2(luts.TILING7_2, config, 1, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 3:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":1904
 *         elif subconfig == 3:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 0, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 4: result = cell.add_triangles2(luts.TILING7_2, config, 2, 5)
 *         elif subconfig == 5:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1902
 *         elif subconfig == 1: result = cell.add_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.add_triangles2(luts.TILING7_2, config, 1, 5)
 *         elif subconfig == 3:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 0, 9)
 */
      break;
      case 4:

      /* "_marching_cubes_lewiner_cy.pyx":1905
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 0, 9)
 *         elif subconfig == 4: result = cell.add_triangles2(luts.TILING7_2, config, 2, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 5:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 5:

      /* "_marching_cubes_lewiner_cy.pyx":1908
 *         elif subconfig == 5:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 1, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 6:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1906
 *             result = cell.add_triangles2(luts.TILING7_3, config, 0, 9)
 *         elif subconfig == 4: result = cell.add_triangles2(luts.TILING7_2, config, 2, 5)
 *         elif subconfig == 5:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 1, 9)
 */
      break;
      case 6:

      /* "_marching_cubes_lewiner_cy.pyx":1911
 *         elif subconfig == 6:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 2, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1909
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 1, 9)
 *         elif subconfig == 6:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 2, 9)
 */
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":1913
 *             result = cell.add_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 3)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1914
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 *                 result = cell.add_triangles(luts.TILING7_4_2, config, 9)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.add_triangles(luts.TILING7_4_1, config, 5)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_4_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1913
 *             result = cell.add_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 */
        goto __pyx_L10;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1916
 *                 result = cell.add_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 *                 result = cell.add_triangles(luts.TILING7_4_1, config, 5)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 8 :
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_4_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L10:;

      /* "_marching_cubes_lewiner_cy.pyx":1912
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 *                 result = cell.add_triangles(luts.TILING7_4_2, config, 9)
 */
      break;
      default: break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1893
 *                 result = cell.add_triangles(luts.TILING6_1_2, config, 9)
 * 
 *     elif case == 7 :             # <<<<<<<<<<<<<<
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 */
    break;
    case 8:

    /* "_marching_cubes_lewiner_cy.pyx":1919
 * 
 *     elif case == 8 :
 *         result = cell.add_triangles(luts.TILING8, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 9 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING8);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1918
 *                 result = cell.add_triangles(luts.TILING7_4_1, config, 5)
 * 
 *     elif case == 8 :             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING8, config, 2)
 * 
 */
    break;
    case 9:

    /* "_marching_cubes_lewiner_cy.pyx":1922
 * 
 *     elif case == 9 :
 *         result = cell.add_triangles(luts.TILING9, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 10 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING9);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1921
 *         result = cell.add_triangles(luts.TILING8, config, 2)
 * 
 *     elif case == 9 :             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING9, config, 4)
 * 
 */
    break;
    case 10:

    /* "_marching_cubes_lewiner_cy.pyx":1925
 * 
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING10_1_1_, config, 4)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":1926
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING10_1_1_, config, 4)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1927
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING10_1_1_, config, 4)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_1_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1926
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING10_1_1_, config, 4)
 *             else:
 */
        goto __pyx_L12;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1930
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING10_2, config, 8)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L12:;

      /* "_marching_cubes_lewiner_cy.pyx":1925
 * 
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING10_1_1_, config, 4)
 */
      goto __pyx_L11;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1932
 *                 result = cell.add_triangles(luts.TILING10_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING10_2_, config, 8)
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1934
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING10_2_, config, 8)             # <<<<<<<<<<<<<<
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_2_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1932
 *                 result = cell.add_triangles(luts.TILING10_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING10_2_, config, 8)
 */
        goto __pyx_L13;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1936
 *                 result = cell.add_triangles(luts.TILING10_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.add_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 */
      /*else*/ {
        __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 2)) != 0);
        if (__pyx_t_2) {

          /* "_marching_cubes_lewiner_cy.pyx":1937
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):
 *                     result = cell.add_triangles(luts.TILING10_1_1, config, 4)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result = cell.add_triangles(luts.TILING10_1_2, config, 8)
 */
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_1);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "_marching_cubes_lewiner_cy.pyx":1936
 *                 result = cell.add_triangles(luts.TILING10_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.add_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "_marching_cubes_lewiner_cy.pyx":1939
 *                     result = cell.add_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 *                     result = cell.add_triangles(luts.TILING10_1_2, config, 8)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 11 :
 */
        /*else*/ {
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_2);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L14:;
      }
      __pyx_L13:;
    }
    __pyx_L11:;

    /* "_marching_cubes_lewiner_cy.pyx":1924
 *         result = cell.add_triangles(luts.TILING9, config, 4)
 * 
 *     elif case == 10 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 */
    break;
    case 11:

    /* "_marching_cubes_lewiner_cy.pyx":1942
 * 
 *     elif case == 11 :
 *         result = cell.add_triangles(luts.TILING11, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 12 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING11);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":1941
 *                     result = cell.add_triangles(luts.TILING10_1_2, config, 8)
 * 
 *     elif case == 11 :             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING11, config, 4)
 * 
 */
    break;
    case 12:

    /* "_marching_cubes_lewiner_cy.pyx":1945
 * 
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING12_1_1_, config, 4)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":1946
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING12_1_1_, config, 4)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1947
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING12_1_1_, config, 4)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_1_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1946
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles(luts.TILING12_1_1_, config, 4)
 *             else:
 */
        goto __pyx_L16;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1950
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING12_2, config, 8)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L16:;

      /* "_marching_cubes_lewiner_cy.pyx":1945
 * 
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.add_triangles(luts.TILING12_1_1_, config, 4)
 */
      goto __pyx_L15;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1952
 *                 result = cell.add_triangles(luts.TILING12_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING12_2_, config, 8)
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":1954
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING12_2_, config, 8)             # <<<<<<<<<<<<<<
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_2_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":1952
 *                 result = cell.add_triangles(luts.TILING12_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.add_triangles(luts.TILING12_2_, config, 8)
 */
        goto __pyx_L17;
      }

      /* "_marching_cubes_lewiner_cy.pyx":1956
 *                 result = cell.add_triangles(luts.TILING12_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.add_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 */
      /*else*/ {
        __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 2)) != 0);
        if (__pyx_t_2) {

          /* "_marching_cubes_lewiner_cy.pyx":1957
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):
 *                     result = cell.add_triangles(luts.TILING12_1_1, config, 4)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result = cell.add_triangles(luts.TILING12_1_2, config, 8)
 */
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_1);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "_marching_cubes_lewiner_cy.pyx":1956
 *                 result = cell.add_triangles(luts.TILING12_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.add_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 */
          goto __pyx_L18;
        }

        /* "_marching_cubes_lewiner_cy.pyx":1959
 *                     result = cell.add_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 *                     result = cell.add_triangles(luts.TILING12_1_2, config, 8)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 13 :
 */
        /*else*/ {
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_2);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L18:;
      }
      __pyx_L17:;
    }
    __pyx_L15:;

    /* "_marching_cubes_lewiner_cy.pyx":1944
 *         result = cell.add_triangles(luts.TILING11, config, 4)
 * 
 *     elif case == 12 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 */
    break;
    case 13:

    /* "_marching_cubes_lewiner_cy.pyx":1963
 *     elif case == 13 :
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 1);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1964
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 1)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 2);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1965
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 2)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 4);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1966
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 3)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 8);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1967
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32
 * 
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 4)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 16);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1968
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32             # <<<<<<<<<<<<<<
 * 
 *         # Map via LUT
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 5)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 32);
    }

    /* "_marching_cubes_lewiner_cy.pyx":1971
 * 
 *         # Map via LUT
 *         subconfig = luts.SUBCONFIG13.get1(subconfig)             # <<<<<<<<<<<<<<
 * 
 *         # Behavior depends on subconfig
 */
    __pyx_v_subconfig = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->SUBCONFIG13->__pyx_vtab)->get1(__pyx_v_luts->SUBCONFIG13, __pyx_v_subconfig);

    /* "_marching_cubes_lewiner_cy.pyx":1974
 * 
 *         # Behavior depends on subconfig
 *         if subconfig==0:    result = cell.add_triangles(luts.TILING13_1, config, 4)             # <<<<<<<<<<<<<<
 *         elif subconfig==1:  result = cell.add_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.add_triangles2(luts.TILING13_2, config, 1, 6)
 */
    switch (__pyx_v_subconfig) {
      case 0:
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":1975
 *         # Behavior depends on subconfig
 *         if subconfig==0:    result = cell.add_triangles(luts.TILING13_1, config, 4)
 *         elif subconfig==1:  result = cell.add_triangles2(luts.TILING13_2, config, 0, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==2:  result = cell.add_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.add_triangles2(luts.TILING13_2, config, 2, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":1976
 *         if subconfig==0:    result = cell.add_triangles(luts.TILING13_1, config, 4)
 *         elif subconfig==1:  result = cell.add_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.add_triangles2(luts.TILING13_2, config, 1, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==3:  result = cell.add_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.add_triangles2(luts.TILING13_2, config, 3, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":1977
 *         elif subconfig==1:  result = cell.add_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.add_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.add_triangles2(luts.TILING13_2, config, 2, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==4:  result = cell.add_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.add_triangles2(luts.TILING13_2, config, 4, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 4:

      /* "_marching_cubes_lewiner_cy.pyx":1978
 *         elif subconfig==2:  result = cell.add_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.add_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.add_triangles2(luts.TILING13_2, config, 3, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==5:  result = cell.add_triangles2(luts.TILING13_2, config, 4, 6)
 *         elif subconfig==6:  result = cell.add_triangles2(luts.TILING13_2, config, 5, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 5:

      /* "_marching_cubes_lewiner_cy.pyx":1979
 *         elif subconfig==3:  result = cell.add_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.add_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.add_triangles2(luts.TILING13_2, config, 4, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==6:  result = cell.add_triangles2(luts.TILING13_2, config, 5, 6)
 *         #
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 6:

      /* "_marching_cubes_lewiner_cy.pyx":1980
 *         elif subconfig==4:  result = cell.add_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.add_triangles2(luts.TILING13_2, config, 4, 6)
 *         elif subconfig==6:  result = cell.add_triangles2(luts.TILING13_2, config, 5, 6)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==7:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":1984
 *         elif subconfig==7:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==8:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1982
 *         elif subconfig==6:  result = cell.add_triangles2(luts.TILING13_2, config, 5, 6)
 *         #
 *         elif subconfig==7:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 0, 10)
 */
      break;
      case 8:

      /* "_marching_cubes_lewiner_cy.pyx":1987
 *         elif subconfig==8:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==9:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1985
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 0, 10)
 *         elif subconfig==8:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 1, 10)
 */
      break;
      case 9:

      /* "_marching_cubes_lewiner_cy.pyx":1990
 *         elif subconfig==9:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==10:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1988
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 1, 10)
 *         elif subconfig==9:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 2, 10)
 */
      break;
      case 10:

      /* "_marching_cubes_lewiner_cy.pyx":1993
 *         elif subconfig==10:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 3, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==11:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1991
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 2, 10)
 *         elif subconfig==10:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 3, 10)
 */
      break;
      case 11:

      /* "_marching_cubes_lewiner_cy.pyx":1996
 *         elif subconfig==11:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 4, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==12:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1994
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 3, 10)
 *         elif subconfig==11:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 4, 10)
 */
      break;
      case 12:

      /* "_marching_cubes_lewiner_cy.pyx":1999
 *         elif subconfig==12:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 5, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==13:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":1997
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 4, 10)
 *         elif subconfig==12:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 5, 10)
 */
      break;
      case 13:

      /* "_marching_cubes_lewiner_cy.pyx":2002
 *         elif subconfig==13:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 6, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==14:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2000
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 5, 10)
 *         elif subconfig==13:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 6, 10)
 */
      break;
      case 14:

      /* "_marching_cubes_lewiner_cy.pyx":2005
 *         elif subconfig==14:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 7, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==15:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 7, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2003
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 6, 10)
 *         elif subconfig==14:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 7, 10)
 */
      break;
      case 15:

      /* "_marching_cubes_lewiner_cy.pyx":2008
 *         elif subconfig==15:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 8, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==16:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2006
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 7, 10)
 *         elif subconfig==15:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 8, 10)
 */
      break;
      case 16:

      /* "_marching_cubes_lewiner_cy.pyx":2011
 *         elif subconfig==16:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 9, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==17:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2009
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 8, 10)
 *         elif subconfig==16:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 9, 10)
 */
      break;
      case 17:

      /* "_marching_cubes_lewiner_cy.pyx":2014
 *         elif subconfig==17:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 10, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==18:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 10, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2012
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 9, 10)
 *         elif subconfig==17:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 10, 10)
 */
      break;
      case 18:

      /* "_marching_cubes_lewiner_cy.pyx":2017
 *         elif subconfig==18:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 11, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==19:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 11, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2015
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 10, 10)
 *         elif subconfig==18:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3, config, 11, 10)
 */
      break;
      case 19:

      /* "_marching_cubes_lewiner_cy.pyx":2021
 *         elif subconfig==19:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 0, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==20:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2019
 *             result = cell.add_triangles2(luts.TILING13_3, config, 11, 10)
 *         #
 *         elif subconfig==19:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 0, 12)
 */
      break;
      case 20:

      /* "_marching_cubes_lewiner_cy.pyx":2024
 *         elif subconfig==20:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 1, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==21:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2022
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 0, 12)
 *         elif subconfig==20:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 1, 12)
 */
      break;
      case 21:

      /* "_marching_cubes_lewiner_cy.pyx":2027
 *         elif subconfig==21:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 2, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==22:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2025
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 1, 12)
 *         elif subconfig==21:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 2, 12)
 */
      break;
      case 22:

      /* "_marching_cubes_lewiner_cy.pyx":2030
 *         elif subconfig==22:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 3, 12)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==23:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2028
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 2, 12)
 *         elif subconfig==22:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_4, config, 3, 12)
 */
      break;
      case 23:

      /* "_marching_cubes_lewiner_cy.pyx":2033
 *         #
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 0, 6)
 */
      __pyx_v_subconfig = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2034
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2035
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 0, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 0, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2034
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 */
        goto __pyx_L25;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2037
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==24:
 *             subconfig = 1
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L25:;

      /* "_marching_cubes_lewiner_cy.pyx":2032
 *             result = cell.add_triangles2(luts.TILING13_4, config, 3, 12)
 *         #
 *         elif subconfig==23:             # <<<<<<<<<<<<<<
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 24:

      /* "_marching_cubes_lewiner_cy.pyx":2039
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 0, 10)
 *         elif subconfig==24:
 *             subconfig = 1             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 1, 6)
 */
      __pyx_v_subconfig = 1;

      /* "_marching_cubes_lewiner_cy.pyx":2040
 *         elif subconfig==24:
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2041
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 1, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 1, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2040
 *         elif subconfig==24:
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 */
        goto __pyx_L26;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2043
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==25:
 *             subconfig = 2 ;
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L26:;

      /* "_marching_cubes_lewiner_cy.pyx":2038
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 0, 10)
 *         elif subconfig==24:             # <<<<<<<<<<<<<<
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 25:

      /* "_marching_cubes_lewiner_cy.pyx":2045
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 1, 10)
 *         elif subconfig==25:
 *             subconfig = 2 ;             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 2, 6)
 */
      __pyx_v_subconfig = 2;

      /* "_marching_cubes_lewiner_cy.pyx":2046
 *         elif subconfig==25:
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2047
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 2, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 2, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2046
 *         elif subconfig==25:
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 */
        goto __pyx_L27;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2049
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==26:
 *             subconfig = 3 ;
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L27:;

      /* "_marching_cubes_lewiner_cy.pyx":2044
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 1, 10)
 *         elif subconfig==25:             # <<<<<<<<<<<<<<
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 26:

      /* "_marching_cubes_lewiner_cy.pyx":2051
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 2, 10)
 *         elif subconfig==26:
 *             subconfig = 3 ;             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 3, 6)
 */
      __pyx_v_subconfig = 3;

      /* "_marching_cubes_lewiner_cy.pyx":2052
 *         elif subconfig==26:
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2053
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 3, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 3, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2052
 *         elif subconfig==26:
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 */
        goto __pyx_L28;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2055
 *                 result = cell.add_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 3, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==27:
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L28:;

      /* "_marching_cubes_lewiner_cy.pyx":2050
 *             else:
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 2, 10)
 *         elif subconfig==26:             # <<<<<<<<<<<<<<
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 27:

      /* "_marching_cubes_lewiner_cy.pyx":2059
 *         elif subconfig==27:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==28:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2057
 *                 result = cell.add_triangles2(luts.TILING13_5_2, config, 3, 10)
 *         #
 *         elif subconfig==27:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 0, 10)
 */
      break;
      case 28:

      /* "_marching_cubes_lewiner_cy.pyx":2062
 *         elif subconfig==28:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==29:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2060
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 0, 10)
 *         elif subconfig==28:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 1, 10)
 */
      break;
      case 29:

      /* "_marching_cubes_lewiner_cy.pyx":2065
 *         elif subconfig==29:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==30:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2063
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 1, 10)
 *         elif subconfig==29:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 2, 10)
 */
      break;
      case 30:

      /* "_marching_cubes_lewiner_cy.pyx":2068
 *         elif subconfig==30:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 3, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==31:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2066
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 2, 10)
 *         elif subconfig==30:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 3, 10)
 */
      break;
      case 31:

      /* "_marching_cubes_lewiner_cy.pyx":2071
 *         elif subconfig==31:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 4, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==32:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2069
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 3, 10)
 *         elif subconfig==31:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 4, 10)
 */
      break;
      case 32:

      /* "_marching_cubes_lewiner_cy.pyx":2074
 *         elif subconfig==32:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 5, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==33:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2072
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 4, 10)
 *         elif subconfig==32:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 5, 10)
 */
      break;
      case 33:

      /* "_marching_cubes_lewiner_cy.pyx":2077
 *         elif subconfig==33:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config,6, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==34:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2075
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 5, 10)
 *         elif subconfig==33:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config,6, 10)
 */
      break;
      case 34:

      /* "_marching_cubes_lewiner_cy.pyx":2080
 *         elif subconfig==34:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 7, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==35:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 7, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2078
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config,6, 10)
 *         elif subconfig==34:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 7, 10)
 */
      break;
      case 35:

      /* "_marching_cubes_lewiner_cy.pyx":2083
 *         elif subconfig==35:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 8, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==36:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2081
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 7, 10)
 *         elif subconfig==35:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 8, 10)
 */
      break;
      case 36:

      /* "_marching_cubes_lewiner_cy.pyx":2086
 *         elif subconfig==36:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 9, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==37:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2084
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 8, 10)
 *         elif subconfig==36:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 9, 10)
 */
      break;
      case 37:

      /* "_marching_cubes_lewiner_cy.pyx":2089
 *         elif subconfig==37:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 10, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==38:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 10, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2087
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 9, 10)
 *         elif subconfig==37:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 10, 10)
 */
      break;
      case 38:

      /* "_marching_cubes_lewiner_cy.pyx":2092
 *         elif subconfig==38:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 11, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==39:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 11, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2090
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 10, 10)
 *         elif subconfig==38:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 11, 10)
 */
      break;
      case 39:

      /* "_marching_cubes_lewiner_cy.pyx":2095
 *         #
 *         elif subconfig==39:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 0, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==40:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 1, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2094
 *             result = cell.add_triangles2(luts.TILING13_3_, config, 11, 10)
 *         #
 *         elif subconfig==39:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:
 */
      break;
      case 40:

      /* "_marching_cubes_lewiner_cy.pyx":2097
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 1, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==41:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 2, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2096
 *         elif subconfig==39:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:
 */
      break;
      case 41:

      /* "_marching_cubes_lewiner_cy.pyx":2099
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 2, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==42:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 3, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2098
 *         elif subconfig==40:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:
 */
      break;
      case 42:

      /* "_marching_cubes_lewiner_cy.pyx":2101
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 3, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==43:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 4, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2100
 *         elif subconfig==41:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:
 */
      break;
      case 43:

      /* "_marching_cubes_lewiner_cy.pyx":2103
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 4, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==44:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 5, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2102
 *         elif subconfig==42:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:
 */
      break;
      case 44:

      /* "_marching_cubes_lewiner_cy.pyx":2105
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 5, 6)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==45:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2104
 *         elif subconfig==43:
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 5, 6)
 *         #
 */
      break;
      case 45:

      /* "_marching_cubes_lewiner_cy.pyx":2108
 *         #
 *         elif subconfig==45:
 *             result = cell.add_triangles(luts.TILING13_1_, config, 4)             # <<<<<<<<<<<<<<
 *         #
 *         else:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_1_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2107
 *             result = cell.add_triangles2(luts.TILING13_2_, config, 5, 6)
 *         #
 *         elif subconfig==45:             # <<<<<<<<<<<<<<
 *             result = cell.add_triangles(luts.TILING13_1_, config, 4)
 *         #
 */
      break;
      default:

      /* "_marching_cubes_lewiner_cy.pyx":2111
 *         #
 *         else:
 *             print("Marching Cubes: Impossible case 13?" )             # <<<<<<<<<<<<<<
 * 
 *     elif case == 14 :
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Marching_Cubes_Impossible_case_1) < 0) __PYX_ERR(0, 2111, __pyx_L1_error)
      break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":1961
 *                     result = cell.add_triangles(luts.TILING12_1_2, config, 8)
 * 
 *     elif case == 13 :             # <<<<<<<<<<<<<<
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 */
    break;
    case 14:

    /* "_marching_cubes_lewiner_cy.pyx":2114
 * 
 *     elif case == 14 :
 *         result = cell.add_triangles(luts.TILING14, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING14);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->add_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2113
 *             print("Marching Cubes: Impossible case 13?" )
 * 
 *     elif case == 14 :             # <<<<<<<<<<<<<<
 *         result = cell.add_triangles(luts.TILING14, config, 4)
 * 
 */
    break;
    default: break;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2116
 *         result = cell.add_triangles(luts.TILING14, config, 4)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":1847
 * 
 * 
 * cdef bint the_big_switch(LutProvider luts, Cell cell, int case, int config):             # <<<<<<<<<<<<<<
 *     """ The big switch (i.e. if-statement) that I meticulously ported from
 *     the source code provided by Lewiner et. al.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.the_big_switch", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":2124
 * 
 * 
 * cdef int check_the_big_switch(LutProvider luts, Cell cell, int case, int config):             # <<<<<<<<<<<<<<
 *     """ CHECK The big switch (i.e. if-statement) that I meticulously ported from
 *     the source code provided by Lewiner et. al.
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_check_the_big_switch(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_cell, int __pyx_v_case, int __pyx_v_config) {
  int __pyx_v_subconfig;
  int __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_the_big_switch", 0);

  /* "_marching_cubes_lewiner_cy.pyx":2130
 *     """
 * 
 *     cdef int subconfig = 0             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 * 
 */
  __pyx_v_subconfig = 0;

  /* "_marching_cubes_lewiner_cy.pyx":2131
 * 
 *     cdef int subconfig = 0
 *     cdef int result = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result = 0;

  /* "_marching_cubes_lewiner_cy.pyx":2139
 *     #cell.check_triangles(luts.TILINGX, config, N)
 * 
 *     if case == 1:             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING1, config, 1)
 * 
 */
  switch (__pyx_v_case) {
    case 1:

    /* "_marching_cubes_lewiner_cy.pyx":2140
 * 
 *     if case == 1:
 *         result = cell.check_triangles(luts.TILING1, config, 1)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 2:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2139
 *     #cell.check_triangles(luts.TILINGX, config, N)
 * 
 *     if case == 1:             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING1, config, 1)
 * 
 */
    break;
    case 2:

    /* "_marching_cubes_lewiner_cy.pyx":2143
 * 
 *     elif case == 2:
 *         result = cell.check_triangles(luts.TILING2, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 3:
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2142
 *         result = cell.check_triangles(luts.TILING1, config, 1)
 * 
 *     elif case == 2:             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING2, config, 2)
 * 
 */
    break;
    case 3:

    /* "_marching_cubes_lewiner_cy.pyx":2146
 * 
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING3_2, config, 4)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST3->__pyx_vtab)->get1(__pyx_v_luts->TEST3, __pyx_v_config)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":2147
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):
 *             result = cell.check_triangles(luts.TILING3_2, config, 4)             # <<<<<<<<<<<<<<
 *         else:
 *             result = cell.check_triangles(luts.TILING3_1, config, 2)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING3_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2146
 * 
 *     elif case == 3:
 *         if test_face(cell, luts.TEST3.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING3_2, config, 4)
 *         else:
 */
      goto __pyx_L3;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2149
 *             result = cell.check_triangles(luts.TILING3_2, config, 4)
 *         else:
 *             result = cell.check_triangles(luts.TILING3_1, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 4 :
 */
    /*else*/ {
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING3_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L3:;

    /* "_marching_cubes_lewiner_cy.pyx":2145
 *         result = cell.check_triangles(luts.TILING2, config, 2)
 * 
 *     elif case == 3:             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST3.get1(config)):
 *             result = cell.check_triangles(luts.TILING3_2, config, 4)
 */
    break;
    case 4:

    /* "_marching_cubes_lewiner_cy.pyx":2152
 * 
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING4_1, config, 2)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST4->__pyx_vtab)->get1(__pyx_v_luts->TEST4, __pyx_v_config)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":2153
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):
 *             result = cell.check_triangles(luts.TILING4_1, config, 2)             # <<<<<<<<<<<<<<
 *         else:
 *             result = cell.check_triangles(luts.TILING4_2, config, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING4_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2152
 * 
 *     elif case == 4 :
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING4_1, config, 2)
 *         else:
 */
      goto __pyx_L4;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2155
 *             result = cell.check_triangles(luts.TILING4_1, config, 2)
 *         else:
 *             result = cell.check_triangles(luts.TILING4_2, config, 6)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 5 :
 */
    /*else*/ {
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING4_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "_marching_cubes_lewiner_cy.pyx":2151
 *             result = cell.check_triangles(luts.TILING3_1, config, 2)
 * 
 *     elif case == 4 :             # <<<<<<<<<<<<<<
 *         if test_internal(cell, luts, case, config, subconfig, luts.TEST4.get1(config)):
 *             result = cell.check_triangles(luts.TILING4_1, config, 2)
 */
    break;
    case 5:

    /* "_marching_cubes_lewiner_cy.pyx":2158
 * 
 *     elif case == 5 :
 *         result = cell.check_triangles(luts.TILING5, config, 3)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 6 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING5);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2157
 *             result = cell.check_triangles(luts.TILING4_2, config, 6)
 * 
 *     elif case == 5 :             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING5, config, 3)
 * 
 */
    break;
    case 6:

    /* "_marching_cubes_lewiner_cy.pyx":2161
 * 
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)
 *         else:
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST6->__pyx_vtab)->get2(__pyx_v_luts->TEST6, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":2162
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2161
 * 
 *     elif case == 6 :
 *         if test_face(cell, luts.TEST6.get2(config,0)):             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)
 *         else:
 */
      goto __pyx_L5;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2164
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING6_1_1, config, 3)
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST6->__pyx_vtab)->get2(__pyx_v_luts->TEST6, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2165
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING6_1_1, config, 3)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_1_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2164
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)
 *         else:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST6.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING6_1_1, config, 3)
 *             else:
 */
        goto __pyx_L6;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2168
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING6_1_2, config, 9)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 7 :
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING6_1_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L6:;
    }
    __pyx_L5:;

    /* "_marching_cubes_lewiner_cy.pyx":2160
 *         result = cell.check_triangles(luts.TILING5, config, 3)
 * 
 *     elif case == 6 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST6.get2(config,0)):
 *             result = cell.check_triangles(luts.TILING6_2, config, 5)
 */
    break;
    case 7:

    /* "_marching_cubes_lewiner_cy.pyx":2172
 *     elif case == 7 :
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 1);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2173
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 *         # Behavior depends on subconfig
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 1)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 2);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2174
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST7.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4             # <<<<<<<<<<<<<<
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.check_triangles(luts.TILING7_1, config, 3)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 2)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 4);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2176
 *         if test_face(cell, luts.TEST7.get2(config,2)): subconfig += 4
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.check_triangles(luts.TILING7_1, config, 3)             # <<<<<<<<<<<<<<
 *         elif subconfig == 1: result = cell.check_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.check_triangles2(luts.TILING7_2, config, 1, 5)
 */
    switch (__pyx_v_subconfig) {
      case 0:
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":2177
 *         # Behavior depends on subconfig
 *         if subconfig == 0: result = cell.check_triangles(luts.TILING7_1, config, 3)
 *         elif subconfig == 1: result = cell.check_triangles2(luts.TILING7_2, config, 0, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 2: result = cell.check_triangles2(luts.TILING7_2, config, 1, 5)
 *         elif subconfig == 3:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":2178
 *         if subconfig == 0: result = cell.check_triangles(luts.TILING7_1, config, 3)
 *         elif subconfig == 1: result = cell.check_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.check_triangles2(luts.TILING7_2, config, 1, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 3:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":2181
 *         elif subconfig == 3:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 0, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 4: result = cell.check_triangles2(luts.TILING7_2, config, 2, 5)
 *         elif subconfig == 5:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2179
 *         elif subconfig == 1: result = cell.check_triangles2(luts.TILING7_2, config, 0, 5)
 *         elif subconfig == 2: result = cell.check_triangles2(luts.TILING7_2, config, 1, 5)
 *         elif subconfig == 3:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 0, 9)
 */
      break;
      case 4:

      /* "_marching_cubes_lewiner_cy.pyx":2182
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 0, 9)
 *         elif subconfig == 4: result = cell.check_triangles2(luts.TILING7_2, config, 2, 5)             # <<<<<<<<<<<<<<
 *         elif subconfig == 5:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 5:

      /* "_marching_cubes_lewiner_cy.pyx":2185
 *         elif subconfig == 5:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 1, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 6:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2183
 *             result = cell.check_triangles2(luts.TILING7_3, config, 0, 9)
 *         elif subconfig == 4: result = cell.check_triangles2(luts.TILING7_2, config, 2, 5)
 *         elif subconfig == 5:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 1, 9)
 */
      break;
      case 6:

      /* "_marching_cubes_lewiner_cy.pyx":2188
 *         elif subconfig == 6:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 2, 9)             # <<<<<<<<<<<<<<
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2186
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 1, 9)
 *         elif subconfig == 6:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 2, 9)
 */
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":2190
 *             result = cell.check_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 3)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2191
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 *                 result = cell.check_triangles(luts.TILING7_4_2, config, 9)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.check_triangles(luts.TILING7_4_1, config, 5)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_4_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2190
 *             result = cell.check_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 */
        goto __pyx_L10;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2193
 *                 result = cell.check_triangles(luts.TILING7_4_2, config, 9)
 *             else:
 *                 result = cell.check_triangles(luts.TILING7_4_1, config, 5)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 8 :
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING7_4_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L10:;

      /* "_marching_cubes_lewiner_cy.pyx":2189
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING7_3, config, 2, 9)
 *         elif subconfig == 7:             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST7.get2(config,3)):
 *                 result = cell.check_triangles(luts.TILING7_4_2, config, 9)
 */
      break;
      default: break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2170
 *                 result = cell.check_triangles(luts.TILING6_1_2, config, 9)
 * 
 *     elif case == 7 :             # <<<<<<<<<<<<<<
 *         # Get subconfig
 *         if test_face(cell, luts.TEST7.get2(config,0)): subconfig += 1
 */
    break;
    case 8:

    /* "_marching_cubes_lewiner_cy.pyx":2196
 * 
 *     elif case == 8 :
 *         result = cell.check_triangles(luts.TILING8, config, 2)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 9 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING8);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2195
 *                 result = cell.check_triangles(luts.TILING7_4_1, config, 5)
 * 
 *     elif case == 8 :             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING8, config, 2)
 * 
 */
    break;
    case 9:

    /* "_marching_cubes_lewiner_cy.pyx":2199
 * 
 *     elif case == 9 :
 *         result = cell.check_triangles(luts.TILING9, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 10 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING9);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2198
 *         result = cell.check_triangles(luts.TILING8, config, 2)
 * 
 *     elif case == 9 :             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING9, config, 4)
 * 
 */
    break;
    case 10:

    /* "_marching_cubes_lewiner_cy.pyx":2202
 * 
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING10_1_1_, config, 4)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":2203
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING10_1_1_, config, 4)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2204
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING10_1_1_, config, 4)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_1_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2203
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING10_1_1_, config, 4)
 *             else:
 */
        goto __pyx_L12;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2207
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING10_2, config, 8)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L12:;

      /* "_marching_cubes_lewiner_cy.pyx":2202
 * 
 *     elif case == 10 :
 *         if test_face(cell, luts.TEST10.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING10_1_1_, config, 4)
 */
      goto __pyx_L11;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2209
 *                 result = cell.check_triangles(luts.TILING10_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING10_2_, config, 8)
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2211
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING10_2_, config, 8)             # <<<<<<<<<<<<<<
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_2_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2209
 *                 result = cell.check_triangles(luts.TILING10_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST10.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING10_2_, config, 8)
 */
        goto __pyx_L13;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2213
 *                 result = cell.check_triangles(luts.TILING10_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.check_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 */
      /*else*/ {
        __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST10->__pyx_vtab)->get2(__pyx_v_luts->TEST10, __pyx_v_config, 2)) != 0);
        if (__pyx_t_2) {

          /* "_marching_cubes_lewiner_cy.pyx":2214
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):
 *                     result = cell.check_triangles(luts.TILING10_1_1, config, 4)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result = cell.check_triangles(luts.TILING10_1_2, config, 8)
 */
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_1);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "_marching_cubes_lewiner_cy.pyx":2213
 *                 result = cell.check_triangles(luts.TILING10_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST10.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.check_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "_marching_cubes_lewiner_cy.pyx":2216
 *                     result = cell.check_triangles(luts.TILING10_1_1, config, 4)
 *                 else:
 *                     result = cell.check_triangles(luts.TILING10_1_2, config, 8)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 11 :
 */
        /*else*/ {
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING10_1_2);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L14:;
      }
      __pyx_L13:;
    }
    __pyx_L11:;

    /* "_marching_cubes_lewiner_cy.pyx":2201
 *         result = cell.check_triangles(luts.TILING9, config, 4)
 * 
 *     elif case == 10 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST10.get2(config,0)):
 *             if test_face(cell, luts.TEST10.get2(config,1)):
 */
    break;
    case 11:

    /* "_marching_cubes_lewiner_cy.pyx":2219
 * 
 *     elif case == 11 :
 *         result = cell.check_triangles(luts.TILING11, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 12 :
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING11);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2218
 *                     result = cell.check_triangles(luts.TILING10_1_2, config, 8)
 * 
 *     elif case == 11 :             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING11, config, 4)
 * 
 */
    break;
    case 12:

    /* "_marching_cubes_lewiner_cy.pyx":2222
 * 
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING12_1_1_, config, 4)
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {

      /* "_marching_cubes_lewiner_cy.pyx":2223
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING12_1_1_, config, 4)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2224
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING12_1_1_, config, 4)             # <<<<<<<<<<<<<<
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_1_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2223
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles(luts.TILING12_1_1_, config, 4)
 *             else:
 */
        goto __pyx_L16;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2227
 *             else:
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING12_2, config, 8)             # <<<<<<<<<<<<<<
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L16:;

      /* "_marching_cubes_lewiner_cy.pyx":2222
 * 
 *     elif case == 12 :
 *         if test_face(cell, luts.TEST12.get2(config,0)):             # <<<<<<<<<<<<<<
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 result = cell.check_triangles(luts.TILING12_1_1_, config, 4)
 */
      goto __pyx_L15;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2229
 *                 result = cell.check_triangles(luts.TILING12_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING12_2_, config, 8)
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 1)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2231
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING12_2_, config, 8)             # <<<<<<<<<<<<<<
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_2_);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2229
 *                 result = cell.check_triangles(luts.TILING12_2, config, 8)
 *         else:
 *             if test_face(cell, luts.TEST12.get2(config,1)):             # <<<<<<<<<<<<<<
 *                 #cell.calculate_center_vertex() # v12 needed
 *                 result = cell.check_triangles(luts.TILING12_2_, config, 8)
 */
        goto __pyx_L17;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2233
 *                 result = cell.check_triangles(luts.TILING12_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.check_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 */
      /*else*/ {
        __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 2)) != 0);
        if (__pyx_t_2) {

          /* "_marching_cubes_lewiner_cy.pyx":2234
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):
 *                     result = cell.check_triangles(luts.TILING12_1_1, config, 4)             # <<<<<<<<<<<<<<
 *                 else:
 *                     result = cell.check_triangles(luts.TILING12_1_2, config, 8)
 */
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_1);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "_marching_cubes_lewiner_cy.pyx":2233
 *                 result = cell.check_triangles(luts.TILING12_2_, config, 8)
 *             else:
 *                 if test_internal(cell, luts, case, config, subconfig, luts.TEST12.get2(config,2)):             # <<<<<<<<<<<<<<
 *                     result = cell.check_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 */
          goto __pyx_L18;
        }

        /* "_marching_cubes_lewiner_cy.pyx":2236
 *                     result = cell.check_triangles(luts.TILING12_1_1, config, 4)
 *                 else:
 *                     result = cell.check_triangles(luts.TILING12_1_2, config, 8)             # <<<<<<<<<<<<<<
 * 
 *     elif case == 13 :
 */
        /*else*/ {
          __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING12_1_2);
          __Pyx_INCREF(__pyx_t_1);
          __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L18:;
      }
      __pyx_L17:;
    }
    __pyx_L15:;

    /* "_marching_cubes_lewiner_cy.pyx":2221
 *         result = cell.check_triangles(luts.TILING11, config, 4)
 * 
 *     elif case == 12 :             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST12.get2(config,0)):
 *             if test_face(cell, luts.TEST12.get2(config,1)):
 */
    break;
    case 13:

    /* "_marching_cubes_lewiner_cy.pyx":2240
 *     elif case == 13 :
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 0)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 1);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2241
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 1)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 2);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2242
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 2)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 4);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2243
 *         if test_face(cell, luts.TEST13.get2(config,1)): subconfig += 2
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 3)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 8);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2244
 *         if test_face(cell, luts.TEST13.get2(config,2)): subconfig += 4
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16             # <<<<<<<<<<<<<<
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32
 * 
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 4)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 16);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2245
 *         if test_face(cell, luts.TEST13.get2(config,3)): subconfig += 8
 *         if test_face(cell, luts.TEST13.get2(config,4)): subconfig += 16
 *         if test_face(cell, luts.TEST13.get2(config,5)): subconfig += 32             # <<<<<<<<<<<<<<
 * 
 *         # Map via LUT
 */
    __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_face(__pyx_v_cell, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 5)) != 0);
    if (__pyx_t_2) {
      __pyx_v_subconfig = (__pyx_v_subconfig + 32);
    }

    /* "_marching_cubes_lewiner_cy.pyx":2248
 * 
 *         # Map via LUT
 *         subconfig = luts.SUBCONFIG13.get1(subconfig)             # <<<<<<<<<<<<<<
 * 
 *         # Behavior depends on subconfig
 */
    __pyx_v_subconfig = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->SUBCONFIG13->__pyx_vtab)->get1(__pyx_v_luts->SUBCONFIG13, __pyx_v_subconfig);

    /* "_marching_cubes_lewiner_cy.pyx":2251
 * 
 *         # Behavior depends on subconfig
 *         if subconfig==0:    result = cell.check_triangles(luts.TILING13_1, config, 4)             # <<<<<<<<<<<<<<
 *         elif subconfig==1:  result = cell.check_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.check_triangles2(luts.TILING13_2, config, 1, 6)
 */
    switch (__pyx_v_subconfig) {
      case 0:
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_1);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":2252
 *         # Behavior depends on subconfig
 *         if subconfig==0:    result = cell.check_triangles(luts.TILING13_1, config, 4)
 *         elif subconfig==1:  result = cell.check_triangles2(luts.TILING13_2, config, 0, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==2:  result = cell.check_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.check_triangles2(luts.TILING13_2, config, 2, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":2253
 *         if subconfig==0:    result = cell.check_triangles(luts.TILING13_1, config, 4)
 *         elif subconfig==1:  result = cell.check_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.check_triangles2(luts.TILING13_2, config, 1, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==3:  result = cell.check_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.check_triangles2(luts.TILING13_2, config, 3, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":2254
 *         elif subconfig==1:  result = cell.check_triangles2(luts.TILING13_2, config, 0, 6)
 *         elif subconfig==2:  result = cell.check_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.check_triangles2(luts.TILING13_2, config, 2, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==4:  result = cell.check_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.check_triangles2(luts.TILING13_2, config, 4, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 4:

      /* "_marching_cubes_lewiner_cy.pyx":2255
 *         elif subconfig==2:  result = cell.check_triangles2(luts.TILING13_2, config, 1, 6)
 *         elif subconfig==3:  result = cell.check_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.check_triangles2(luts.TILING13_2, config, 3, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==5:  result = cell.check_triangles2(luts.TILING13_2, config, 4, 6)
 *         elif subconfig==6:  result = cell.check_triangles2(luts.TILING13_2, config, 5, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 5:

      /* "_marching_cubes_lewiner_cy.pyx":2256
 *         elif subconfig==3:  result = cell.check_triangles2(luts.TILING13_2, config, 2, 6)
 *         elif subconfig==4:  result = cell.check_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.check_triangles2(luts.TILING13_2, config, 4, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==6:  result = cell.check_triangles2(luts.TILING13_2, config, 5, 6)
 *         #
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 6:

      /* "_marching_cubes_lewiner_cy.pyx":2257
 *         elif subconfig==4:  result = cell.check_triangles2(luts.TILING13_2, config, 3, 6)
 *         elif subconfig==5:  result = cell.check_triangles2(luts.TILING13_2, config, 4, 6)
 *         elif subconfig==6:  result = cell.check_triangles2(luts.TILING13_2, config, 5, 6)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==7:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":2261
 *         elif subconfig==7:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==8:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2259
 *         elif subconfig==6:  result = cell.check_triangles2(luts.TILING13_2, config, 5, 6)
 *         #
 *         elif subconfig==7:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 0, 10)
 */
      break;
      case 8:

      /* "_marching_cubes_lewiner_cy.pyx":2264
 *         elif subconfig==8:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==9:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2262
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 0, 10)
 *         elif subconfig==8:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 1, 10)
 */
      break;
      case 9:

      /* "_marching_cubes_lewiner_cy.pyx":2267
 *         elif subconfig==9:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==10:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2265
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 1, 10)
 *         elif subconfig==9:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 2, 10)
 */
      break;
      case 10:

      /* "_marching_cubes_lewiner_cy.pyx":2270
 *         elif subconfig==10:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 3, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==11:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2268
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 2, 10)
 *         elif subconfig==10:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 3, 10)
 */
      break;
      case 11:

      /* "_marching_cubes_lewiner_cy.pyx":2273
 *         elif subconfig==11:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 4, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==12:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2271
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 3, 10)
 *         elif subconfig==11:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 4, 10)
 */
      break;
      case 12:

      /* "_marching_cubes_lewiner_cy.pyx":2276
 *         elif subconfig==12:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 5, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==13:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2274
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 4, 10)
 *         elif subconfig==12:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 5, 10)
 */
      break;
      case 13:

      /* "_marching_cubes_lewiner_cy.pyx":2279
 *         elif subconfig==13:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 6, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==14:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2277
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 5, 10)
 *         elif subconfig==13:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 6, 10)
 */
      break;
      case 14:

      /* "_marching_cubes_lewiner_cy.pyx":2282
 *         elif subconfig==14:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 7, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==15:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 7, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2280
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 6, 10)
 *         elif subconfig==14:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 7, 10)
 */
      break;
      case 15:

      /* "_marching_cubes_lewiner_cy.pyx":2285
 *         elif subconfig==15:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 8, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==16:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2283
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 7, 10)
 *         elif subconfig==15:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 8, 10)
 */
      break;
      case 16:

      /* "_marching_cubes_lewiner_cy.pyx":2288
 *         elif subconfig==16:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 9, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==17:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2286
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 8, 10)
 *         elif subconfig==16:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 9, 10)
 */
      break;
      case 17:

      /* "_marching_cubes_lewiner_cy.pyx":2291
 *         elif subconfig==17:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 10, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==18:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 10, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2289
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 9, 10)
 *         elif subconfig==17:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 10, 10)
 */
      break;
      case 18:

      /* "_marching_cubes_lewiner_cy.pyx":2294
 *         elif subconfig==18:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 11, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==19:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 11, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2292
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 10, 10)
 *         elif subconfig==18:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3, config, 11, 10)
 */
      break;
      case 19:

      /* "_marching_cubes_lewiner_cy.pyx":2298
 *         elif subconfig==19:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 0, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==20:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2296
 *             result = cell.check_triangles2(luts.TILING13_3, config, 11, 10)
 *         #
 *         elif subconfig==19:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 0, 12)
 */
      break;
      case 20:

      /* "_marching_cubes_lewiner_cy.pyx":2301
 *         elif subconfig==20:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 1, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==21:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2299
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 0, 12)
 *         elif subconfig==20:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 1, 12)
 */
      break;
      case 21:

      /* "_marching_cubes_lewiner_cy.pyx":2304
 *         elif subconfig==21:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 2, 12)             # <<<<<<<<<<<<<<
 *         elif subconfig==22:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2302
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 1, 12)
 *         elif subconfig==21:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 2, 12)
 */
      break;
      case 22:

      /* "_marching_cubes_lewiner_cy.pyx":2307
 *         elif subconfig==22:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 3, 12)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==23:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2305
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 2, 12)
 *         elif subconfig==22:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_4, config, 3, 12)
 */
      break;
      case 23:

      /* "_marching_cubes_lewiner_cy.pyx":2310
 *         #
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 0, 6)
 */
      __pyx_v_subconfig = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2311
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2312
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 0, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 0, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2311
 *         elif subconfig==23:
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 */
        goto __pyx_L25;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2314
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 0, 6)
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==24:
 *             subconfig = 1
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L25:;

      /* "_marching_cubes_lewiner_cy.pyx":2309
 *             result = cell.check_triangles2(luts.TILING13_4, config, 3, 12)
 *         #
 *         elif subconfig==23:             # <<<<<<<<<<<<<<
 *             subconfig = 0 # Note: the original source code sets the subconfig, without apparent reason
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 24:

      /* "_marching_cubes_lewiner_cy.pyx":2316
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 0, 10)
 *         elif subconfig==24:
 *             subconfig = 1             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 1, 6)
 */
      __pyx_v_subconfig = 1;

      /* "_marching_cubes_lewiner_cy.pyx":2317
 *         elif subconfig==24:
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2318
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 1, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 1, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2317
 *         elif subconfig==24:
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 */
        goto __pyx_L26;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2320
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 1, 6)
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==25:
 *             subconfig = 2 ;
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L26:;

      /* "_marching_cubes_lewiner_cy.pyx":2315
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 0, 10)
 *         elif subconfig==24:             # <<<<<<<<<<<<<<
 *             subconfig = 1
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 25:

      /* "_marching_cubes_lewiner_cy.pyx":2322
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 1, 10)
 *         elif subconfig==25:
 *             subconfig = 2 ;             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 2, 6)
 */
      __pyx_v_subconfig = 2;

      /* "_marching_cubes_lewiner_cy.pyx":2323
 *         elif subconfig==25:
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2324
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 2, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 2, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2323
 *         elif subconfig==25:
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 */
        goto __pyx_L27;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2326
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 2, 6)
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==26:
 *             subconfig = 3 ;
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L27:;

      /* "_marching_cubes_lewiner_cy.pyx":2321
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 1, 10)
 *         elif subconfig==25:             # <<<<<<<<<<<<<<
 *             subconfig = 2 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 26:

      /* "_marching_cubes_lewiner_cy.pyx":2328
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 2, 10)
 *         elif subconfig==26:
 *             subconfig = 3 ;             # <<<<<<<<<<<<<<
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 3, 6)
 */
      __pyx_v_subconfig = 3;

      /* "_marching_cubes_lewiner_cy.pyx":2329
 *         elif subconfig==26:
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 */
      __pyx_t_2 = (__pyx_f_26_marching_cubes_lewiner_cy_test_internal(__pyx_v_cell, __pyx_v_luts, __pyx_v_case, __pyx_v_config, __pyx_v_subconfig, ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST13->__pyx_vtab)->get2(__pyx_v_luts->TEST13, __pyx_v_config, 6)) != 0);
      if (__pyx_t_2) {

        /* "_marching_cubes_lewiner_cy.pyx":2330
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 3, 6)             # <<<<<<<<<<<<<<
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 3, 10)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_1);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "_marching_cubes_lewiner_cy.pyx":2329
 *         elif subconfig==26:
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):             # <<<<<<<<<<<<<<
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 */
        goto __pyx_L28;
      }

      /* "_marching_cubes_lewiner_cy.pyx":2332
 *                 result = cell.check_triangles2(luts.TILING13_5_1, config, 3, 6)
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 3, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==27:
 */
      /*else*/ {
        __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_5_2);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L28:;

      /* "_marching_cubes_lewiner_cy.pyx":2327
 *             else:
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 2, 10)
 *         elif subconfig==26:             # <<<<<<<<<<<<<<
 *             subconfig = 3 ;
 *             if test_internal(cell, luts, case, config, subconfig, luts.TEST13.get2(config,6)):
 */
      break;
      case 27:

      /* "_marching_cubes_lewiner_cy.pyx":2336
 *         elif subconfig==27:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 0, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==28:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2334
 *                 result = cell.check_triangles2(luts.TILING13_5_2, config, 3, 10)
 *         #
 *         elif subconfig==27:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 0, 10)
 */
      break;
      case 28:

      /* "_marching_cubes_lewiner_cy.pyx":2339
 *         elif subconfig==28:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 1, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==29:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2337
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 0, 10)
 *         elif subconfig==28:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 1, 10)
 */
      break;
      case 29:

      /* "_marching_cubes_lewiner_cy.pyx":2342
 *         elif subconfig==29:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 2, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==30:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2340
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 1, 10)
 *         elif subconfig==29:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 2, 10)
 */
      break;
      case 30:

      /* "_marching_cubes_lewiner_cy.pyx":2345
 *         elif subconfig==30:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 3, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==31:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2343
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 2, 10)
 *         elif subconfig==30:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 3, 10)
 */
      break;
      case 31:

      /* "_marching_cubes_lewiner_cy.pyx":2348
 *         elif subconfig==31:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 4, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==32:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2346
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 3, 10)
 *         elif subconfig==31:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 4, 10)
 */
      break;
      case 32:

      /* "_marching_cubes_lewiner_cy.pyx":2351
 *         elif subconfig==32:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 5, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==33:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2349
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 4, 10)
 *         elif subconfig==32:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 5, 10)
 */
      break;
      case 33:

      /* "_marching_cubes_lewiner_cy.pyx":2354
 *         elif subconfig==33:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config,6, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==34:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 6, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2352
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 5, 10)
 *         elif subconfig==33:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config,6, 10)
 */
      break;
      case 34:

      /* "_marching_cubes_lewiner_cy.pyx":2357
 *         elif subconfig==34:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 7, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==35:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 7, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2355
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config,6, 10)
 *         elif subconfig==34:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 7, 10)
 */
      break;
      case 35:

      /* "_marching_cubes_lewiner_cy.pyx":2360
 *         elif subconfig==35:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 8, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==36:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 8, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2358
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 7, 10)
 *         elif subconfig==35:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 8, 10)
 */
      break;
      case 36:

      /* "_marching_cubes_lewiner_cy.pyx":2363
 *         elif subconfig==36:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 9, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==37:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 9, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2361
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 8, 10)
 *         elif subconfig==36:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 9, 10)
 */
      break;
      case 37:

      /* "_marching_cubes_lewiner_cy.pyx":2366
 *         elif subconfig==37:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 10, 10)             # <<<<<<<<<<<<<<
 *         elif subconfig==38:
 *             #cell.calculate_center_vertex() # v12 needed
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 10, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2364
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 9, 10)
 *         elif subconfig==37:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 10, 10)
 */
      break;
      case 38:

      /* "_marching_cubes_lewiner_cy.pyx":2369
 *         elif subconfig==38:
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 11, 10)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==39:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_3_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 11, 10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2367
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 10, 10)
 *         elif subconfig==38:             # <<<<<<<<<<<<<<
 *             #cell.calculate_center_vertex() # v12 needed
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 11, 10)
 */
      break;
      case 39:

      /* "_marching_cubes_lewiner_cy.pyx":2372
 *         #
 *         elif subconfig==39:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 0, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==40:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 1, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 0, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2371
 *             result = cell.check_triangles2(luts.TILING13_3_, config, 11, 10)
 *         #
 *         elif subconfig==39:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:
 */
      break;
      case 40:

      /* "_marching_cubes_lewiner_cy.pyx":2374
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 1, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==41:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 2, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 1, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2373
 *         elif subconfig==39:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 0, 6)
 *         elif subconfig==40:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:
 */
      break;
      case 41:

      /* "_marching_cubes_lewiner_cy.pyx":2376
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 2, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==42:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 3, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 2, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2375
 *         elif subconfig==40:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 1, 6)
 *         elif subconfig==41:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:
 */
      break;
      case 42:

      /* "_marching_cubes_lewiner_cy.pyx":2378
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 3, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==43:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 4, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 3, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2377
 *         elif subconfig==41:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 2, 6)
 *         elif subconfig==42:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:
 */
      break;
      case 43:

      /* "_marching_cubes_lewiner_cy.pyx":2380
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 4, 6)             # <<<<<<<<<<<<<<
 *         elif subconfig==44:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 5, 6)
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2379
 *         elif subconfig==42:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 3, 6)
 *         elif subconfig==43:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:
 */
      break;
      case 44:

      /* "_marching_cubes_lewiner_cy.pyx":2382
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 5, 6)             # <<<<<<<<<<<<<<
 *         #
 *         elif subconfig==45:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_2_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles2(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 5, 6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2381
 *         elif subconfig==43:
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 4, 6)
 *         elif subconfig==44:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 5, 6)
 *         #
 */
      break;
      case 45:

      /* "_marching_cubes_lewiner_cy.pyx":2385
 *         #
 *         elif subconfig==45:
 *             result = cell.check_triangles(luts.TILING13_1_, config, 4)             # <<<<<<<<<<<<<<
 *         #
 *         else:
 */
      __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING13_1_);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_marching_cubes_lewiner_cy.pyx":2384
 *             result = cell.check_triangles2(luts.TILING13_2_, config, 5, 6)
 *         #
 *         elif subconfig==45:             # <<<<<<<<<<<<<<
 *             result = cell.check_triangles(luts.TILING13_1_, config, 4)
 *         #
 */
      break;
      default:

      /* "_marching_cubes_lewiner_cy.pyx":2388
 *         #
 *         else:
 *             print("Marching Cubes: Impossible case 13?" )             # <<<<<<<<<<<<<<
 * 
 *     elif case == 14 :
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Marching_Cubes_Impossible_case_1) < 0) __PYX_ERR(0, 2388, __pyx_L1_error)
      break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2238
 *                     result = cell.check_triangles(luts.TILING12_1_2, config, 8)
 * 
 *     elif case == 13 :             # <<<<<<<<<<<<<<
 *         # Calculate subconfig
 *         if test_face(cell, luts.TEST13.get2(config,0)): subconfig += 1
 */
    break;
    case 14:

    /* "_marching_cubes_lewiner_cy.pyx":2391
 * 
 *     elif case == 14 :
 *         result = cell.check_triangles(luts.TILING14, config, 4)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_luts->TILING14);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_result = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell *)__pyx_v_cell->__pyx_vtab)->check_triangles(__pyx_v_cell, ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1), __pyx_v_config, 4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_marching_cubes_lewiner_cy.pyx":2390
 *             print("Marching Cubes: Impossible case 13?" )
 * 
 *     elif case == 14 :             # <<<<<<<<<<<<<<
 *         result = cell.check_triangles(luts.TILING14, config, 4)
 * 
 */
    break;
    default: break;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2393
 *         result = cell.check_triangles(luts.TILING14, config, 4)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "_marching_cubes_lewiner_cy.pyx":2124
 * 
 * 
 * cdef int check_the_big_switch(LutProvider luts, Cell cell, int case, int config):             # <<<<<<<<<<<<<<
 *     """ CHECK The big switch (i.e. if-statement) that I meticulously ported from
 *     the source code provided by Lewiner et. al.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.check_the_big_switch", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":2403
 * 
 * 
 * cdef int test_face(Cell cell, int face):             # <<<<<<<<<<<<<<
 *     """ Return True of the face contains part of the surface.
 *     """
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_test_face(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_cell, int __pyx_v_face) {
  int __pyx_v_absFace;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  double __pyx_v_AC_BD;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("test_face", 0);

  /* "_marching_cubes_lewiner_cy.pyx":2408
 * 
 *     # Get face absolute value
 *     cdef int absFace = face             # <<<<<<<<<<<<<<
 *     if face < 0:
 *         absFace *= -1
 */
  __pyx_v_absFace = __pyx_v_face;

  /* "_marching_cubes_lewiner_cy.pyx":2409
 *     # Get face absolute value
 *     cdef int absFace = face
 *     if face < 0:             # <<<<<<<<<<<<<<
 *         absFace *= -1
 * 
 */
  __pyx_t_1 = ((__pyx_v_face < 0) != 0);
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":2410
 *     cdef int absFace = face
 *     if face < 0:
 *         absFace *= -1             # <<<<<<<<<<<<<<
 * 
 *     # Get values of corners A B C D
 */
    __pyx_v_absFace = (__pyx_v_absFace * -1L);

    /* "_marching_cubes_lewiner_cy.pyx":2409
 *     # Get face absolute value
 *     cdef int absFace = face
 *     if face < 0:             # <<<<<<<<<<<<<<
 *         absFace *= -1
 * 
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":2414
 *     # Get values of corners A B C D
 *     cdef double A, B, C, D
 *     if absFace == 1:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v0, cell.v4, cell.v5, cell.v1
 *     elif absFace == 2:
 */
  switch (__pyx_v_absFace) {
    case 1:

    /* "_marching_cubes_lewiner_cy.pyx":2415
 *     cdef double A, B, C, D
 *     if absFace == 1:
 *         A, B, C, D = cell.v0, cell.v4, cell.v5, cell.v1             # <<<<<<<<<<<<<<
 *     elif absFace == 2:
 *         A, B, C, D = cell.v1, cell.v5, cell.v6, cell.v2
 */
    __pyx_t_2 = __pyx_v_cell->v0;
    __pyx_t_3 = __pyx_v_cell->v4;
    __pyx_t_4 = __pyx_v_cell->v5;
    __pyx_t_5 = __pyx_v_cell->v1;
    __pyx_v_A = __pyx_t_2;
    __pyx_v_B = __pyx_t_3;
    __pyx_v_C = __pyx_t_4;
    __pyx_v_D = __pyx_t_5;

    /* "_marching_cubes_lewiner_cy.pyx":2414
 *     # Get values of corners A B C D
 *     cdef double A, B, C, D
 *     if absFace == 1:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v0, cell.v4, cell.v5, cell.v1
 *     elif absFace == 2:
 */
    break;
    case 2:

    /* "_marching_cubes_lewiner_cy.pyx":2417
 *         A, B, C, D = cell.v0, cell.v4, cell.v5, cell.v1
 *     elif absFace == 2:
 *         A, B, C, D = cell.v1, cell.v5, cell.v6, cell.v2             # <<<<<<<<<<<<<<
 *     elif absFace == 3:
 *         A, B, C, D = cell.v2, cell.v6, cell.v7, cell.v3
 */
    __pyx_t_5 = __pyx_v_cell->v1;
    __pyx_t_4 = __pyx_v_cell->v5;
    __pyx_t_3 = __pyx_v_cell->v6;
    __pyx_t_2 = __pyx_v_cell->v2;
    __pyx_v_A = __pyx_t_5;
    __pyx_v_B = __pyx_t_4;
    __pyx_v_C = __pyx_t_3;
    __pyx_v_D = __pyx_t_2;

    /* "_marching_cubes_lewiner_cy.pyx":2416
 *     if absFace == 1:
 *         A, B, C, D = cell.v0, cell.v4, cell.v5, cell.v1
 *     elif absFace == 2:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v1, cell.v5, cell.v6, cell.v2
 *     elif absFace == 3:
 */
    break;
    case 3:

    /* "_marching_cubes_lewiner_cy.pyx":2419
 *         A, B, C, D = cell.v1, cell.v5, cell.v6, cell.v2
 *     elif absFace == 3:
 *         A, B, C, D = cell.v2, cell.v6, cell.v7, cell.v3             # <<<<<<<<<<<<<<
 *     elif absFace == 4:
 *         A, B, C, D = cell.v3, cell.v7, cell.v4, cell.v0
 */
    __pyx_t_2 = __pyx_v_cell->v2;
    __pyx_t_3 = __pyx_v_cell->v6;
    __pyx_t_4 = __pyx_v_cell->v7;
    __pyx_t_5 = __pyx_v_cell->v3;
    __pyx_v_A = __pyx_t_2;
    __pyx_v_B = __pyx_t_3;
    __pyx_v_C = __pyx_t_4;
    __pyx_v_D = __pyx_t_5;

    /* "_marching_cubes_lewiner_cy.pyx":2418
 *     elif absFace == 2:
 *         A, B, C, D = cell.v1, cell.v5, cell.v6, cell.v2
 *     elif absFace == 3:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v2, cell.v6, cell.v7, cell.v3
 *     elif absFace == 4:
 */
    break;
    case 4:

    /* "_marching_cubes_lewiner_cy.pyx":2421
 *         A, B, C, D = cell.v2, cell.v6, cell.v7, cell.v3
 *     elif absFace == 4:
 *         A, B, C, D = cell.v3, cell.v7, cell.v4, cell.v0             # <<<<<<<<<<<<<<
 *     elif absFace == 5:
 *         A, B, C, D = cell.v0, cell.v3, cell.v2, cell.v1
 */
    __pyx_t_5 = __pyx_v_cell->v3;
    __pyx_t_4 = __pyx_v_cell->v7;
    __pyx_t_3 = __pyx_v_cell->v4;
    __pyx_t_2 = __pyx_v_cell->v0;
    __pyx_v_A = __pyx_t_5;
    __pyx_v_B = __pyx_t_4;
    __pyx_v_C = __pyx_t_3;
    __pyx_v_D = __pyx_t_2;

    /* "_marching_cubes_lewiner_cy.pyx":2420
 *     elif absFace == 3:
 *         A, B, C, D = cell.v2, cell.v6, cell.v7, cell.v3
 *     elif absFace == 4:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v3, cell.v7, cell.v4, cell.v0
 *     elif absFace == 5:
 */
    break;
    case 5:

    /* "_marching_cubes_lewiner_cy.pyx":2423
 *         A, B, C, D = cell.v3, cell.v7, cell.v4, cell.v0
 *     elif absFace == 5:
 *         A, B, C, D = cell.v0, cell.v3, cell.v2, cell.v1             # <<<<<<<<<<<<<<
 *     elif absFace == 6:
 *         A, B, C, D = cell.v4, cell.v7, cell.v6, cell.v5
 */
    __pyx_t_2 = __pyx_v_cell->v0;
    __pyx_t_3 = __pyx_v_cell->v3;
    __pyx_t_4 = __pyx_v_cell->v2;
    __pyx_t_5 = __pyx_v_cell->v1;
    __pyx_v_A = __pyx_t_2;
    __pyx_v_B = __pyx_t_3;
    __pyx_v_C = __pyx_t_4;
    __pyx_v_D = __pyx_t_5;

    /* "_marching_cubes_lewiner_cy.pyx":2422
 *     elif absFace == 4:
 *         A, B, C, D = cell.v3, cell.v7, cell.v4, cell.v0
 *     elif absFace == 5:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v0, cell.v3, cell.v2, cell.v1
 *     elif absFace == 6:
 */
    break;
    case 6:

    /* "_marching_cubes_lewiner_cy.pyx":2425
 *         A, B, C, D = cell.v0, cell.v3, cell.v2, cell.v1
 *     elif absFace == 6:
 *         A, B, C, D = cell.v4, cell.v7, cell.v6, cell.v5             # <<<<<<<<<<<<<<
 * 
 *     # Return sign
 */
    __pyx_t_5 = __pyx_v_cell->v4;
    __pyx_t_4 = __pyx_v_cell->v7;
    __pyx_t_3 = __pyx_v_cell->v6;
    __pyx_t_2 = __pyx_v_cell->v5;
    __pyx_v_A = __pyx_t_5;
    __pyx_v_B = __pyx_t_4;
    __pyx_v_C = __pyx_t_3;
    __pyx_v_D = __pyx_t_2;

    /* "_marching_cubes_lewiner_cy.pyx":2424
 *     elif absFace == 5:
 *         A, B, C, D = cell.v0, cell.v3, cell.v2, cell.v1
 *     elif absFace == 6:             # <<<<<<<<<<<<<<
 *         A, B, C, D = cell.v4, cell.v7, cell.v6, cell.v5
 * 
 */
    break;
    default: break;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2428
 * 
 *     # Return sign
 *     cdef double AC_BD = A*C - B*D             # <<<<<<<<<<<<<<
 *     if AC_BD > - FLT_EPSILON and AC_BD < FLT_EPSILON:
 *         return face >= 0
 */
  __pyx_v_AC_BD = ((__pyx_v_A * __pyx_v_C) - (__pyx_v_B * __pyx_v_D));

  /* "_marching_cubes_lewiner_cy.pyx":2429
 *     # Return sign
 *     cdef double AC_BD = A*C - B*D
 *     if AC_BD > - FLT_EPSILON and AC_BD < FLT_EPSILON:             # <<<<<<<<<<<<<<
 *         return face >= 0
 *     else:
 */
  __pyx_t_6 = ((__pyx_v_AC_BD > (-__pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON)) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_AC_BD < __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON) != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_marching_cubes_lewiner_cy.pyx":2430
 *     cdef double AC_BD = A*C - B*D
 *     if AC_BD > - FLT_EPSILON and AC_BD < FLT_EPSILON:
 *         return face >= 0             # <<<<<<<<<<<<<<
 *     else:
 *         return face * A * AC_BD >= 0;  # face and A invert signs
 */
    __pyx_r = (__pyx_v_face >= 0);
    goto __pyx_L0;

    /* "_marching_cubes_lewiner_cy.pyx":2429
 *     # Return sign
 *     cdef double AC_BD = A*C - B*D
 *     if AC_BD > - FLT_EPSILON and AC_BD < FLT_EPSILON:             # <<<<<<<<<<<<<<
 *         return face >= 0
 *     else:
 */
  }

  /* "_marching_cubes_lewiner_cy.pyx":2432
 *         return face >= 0
 *     else:
 *         return face * A * AC_BD >= 0;  # face and A invert signs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = (((__pyx_v_face * __pyx_v_A) * __pyx_v_AC_BD) >= 0.0);
    goto __pyx_L0;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2403
 * 
 * 
 * cdef int test_face(Cell cell, int face):             # <<<<<<<<<<<<<<
 *     """ Return True of the face contains part of the surface.
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_marching_cubes_lewiner_cy.pyx":2435
 * 
 * 
 * cdef int test_internal(Cell cell, LutProvider luts, int case, int config, int subconfig, int s):             # <<<<<<<<<<<<<<
 *     """ Return True of the face contains part of the surface.
 *     """
 */

static int __pyx_f_26_marching_cubes_lewiner_cy_test_internal(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *__pyx_v_cell, struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v_luts, int __pyx_v_case, int __pyx_v_config, int __pyx_v_subconfig, int __pyx_v_s) {
  double __pyx_v_t;
  double __pyx_v_At;
  double __pyx_v_Bt;
  double __pyx_v_Ct;
  double __pyx_v_Dt;
  double __pyx_v_a;
  double __pyx_v_b;
  int __pyx_v_test;
  int __pyx_v_edge;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_internal", 0);

  /* "_marching_cubes_lewiner_cy.pyx":2441
 *     # Typedefs
 *     cdef double t, At, Bt, Ct, Dt, a, b
 *     cdef int test = 0             # <<<<<<<<<<<<<<
 *     cdef int edge = -1 # reference edge of the triangulation
 * 
 */
  __pyx_v_test = 0;

  /* "_marching_cubes_lewiner_cy.pyx":2442
 *     cdef double t, At, Bt, Ct, Dt, a, b
 *     cdef int test = 0
 *     cdef int edge = -1 # reference edge of the triangulation             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_edge = -1;

  /* "_marching_cubes_lewiner_cy.pyx":2447
 *     # Calculate At Bt Ct Dt a b
 *     # Select case 4, 10,  7, 12, 13
 *     At, Bt, Ct, Dt = 0.0, 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 * 
 *     if case==4 or case==10:
 */
  __pyx_t_1 = 0.0;
  __pyx_t_2 = 0.0;
  __pyx_t_3 = 0.0;
  __pyx_t_4 = 0.0;
  __pyx_v_At = __pyx_t_1;
  __pyx_v_Bt = __pyx_t_2;
  __pyx_v_Ct = __pyx_t_3;
  __pyx_v_Dt = __pyx_t_4;

  /* "_marching_cubes_lewiner_cy.pyx":2449
 *     At, Bt, Ct, Dt = 0.0, 0.0, 0.0, 0.0
 * 
 *     if case==4 or case==10:             # <<<<<<<<<<<<<<
 *         a = ( cell.v4 - cell.v0 ) * ( cell.v6 - cell.v2 ) - ( cell.v7 - cell.v3 ) * ( cell.v5 - cell.v1 )
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )
 */
  switch (__pyx_v_case) {
    case 4:
    case 10:

    /* "_marching_cubes_lewiner_cy.pyx":2450
 * 
 *     if case==4 or case==10:
 *         a = ( cell.v4 - cell.v0 ) * ( cell.v6 - cell.v2 ) - ( cell.v7 - cell.v3 ) * ( cell.v5 - cell.v1 )             # <<<<<<<<<<<<<<
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )
 *         t = - b / (2*a + FLT_EPSILON)
 */
    __pyx_v_a = (((__pyx_v_cell->v4 - __pyx_v_cell->v0) * (__pyx_v_cell->v6 - __pyx_v_cell->v2)) - ((__pyx_v_cell->v7 - __pyx_v_cell->v3) * (__pyx_v_cell->v5 - __pyx_v_cell->v1)));

    /* "_marching_cubes_lewiner_cy.pyx":2451
 *     if case==4 or case==10:
 *         a = ( cell.v4 - cell.v0 ) * ( cell.v6 - cell.v2 ) - ( cell.v7 - cell.v3 ) * ( cell.v5 - cell.v1 )
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )             # <<<<<<<<<<<<<<
 *         t = - b / (2*a + FLT_EPSILON)
 *         if t<0 or t>1:  return s>0 ;
 */
    __pyx_v_b = ((((__pyx_v_cell->v2 * (__pyx_v_cell->v4 - __pyx_v_cell->v0)) + (__pyx_v_cell->v0 * (__pyx_v_cell->v6 - __pyx_v_cell->v2))) - (__pyx_v_cell->v1 * (__pyx_v_cell->v7 - __pyx_v_cell->v3))) - (__pyx_v_cell->v3 * (__pyx_v_cell->v5 - __pyx_v_cell->v1)));

    /* "_marching_cubes_lewiner_cy.pyx":2452
 *         a = ( cell.v4 - cell.v0 ) * ( cell.v6 - cell.v2 ) - ( cell.v7 - cell.v3 ) * ( cell.v5 - cell.v1 )
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )
 *         t = - b / (2*a + FLT_EPSILON)             # <<<<<<<<<<<<<<
 *         if t<0 or t>1:  return s>0 ;
 * 
 */
    __pyx_v_t = ((-__pyx_v_b) / ((2.0 * __pyx_v_a) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

    /* "_marching_cubes_lewiner_cy.pyx":2453
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )
 *         t = - b / (2*a + FLT_EPSILON)
 *         if t<0 or t>1:  return s>0 ;             # <<<<<<<<<<<<<<
 * 
 *         At = cell.v0 + ( cell.v4 - cell.v0 ) * t
 */
    __pyx_t_6 = ((__pyx_v_t < 0.0) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_t > 1.0) != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L4_bool_binop_done:;
    if (__pyx_t_5) {
      __pyx_r = (__pyx_v_s > 0);
      goto __pyx_L0;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2455
 *         if t<0 or t>1:  return s>0 ;
 * 
 *         At = cell.v0 + ( cell.v4 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *         Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 */
    __pyx_v_At = (__pyx_v_cell->v0 + ((__pyx_v_cell->v4 - __pyx_v_cell->v0) * __pyx_v_t));

    /* "_marching_cubes_lewiner_cy.pyx":2456
 * 
 *         At = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *         Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *         Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *         Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 */
    __pyx_v_Bt = (__pyx_v_cell->v3 + ((__pyx_v_cell->v7 - __pyx_v_cell->v3) * __pyx_v_t));

    /* "_marching_cubes_lewiner_cy.pyx":2457
 *         At = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *         Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *         Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 * 
 */
    __pyx_v_Ct = (__pyx_v_cell->v2 + ((__pyx_v_cell->v6 - __pyx_v_cell->v2) * __pyx_v_t));

    /* "_marching_cubes_lewiner_cy.pyx":2458
 *         Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *         Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 * 
 *     elif case==6 or case==7 or case==12 or case==13:
 */
    __pyx_v_Dt = (__pyx_v_cell->v1 + ((__pyx_v_cell->v5 - __pyx_v_cell->v1) * __pyx_v_t));

    /* "_marching_cubes_lewiner_cy.pyx":2449
 *     At, Bt, Ct, Dt = 0.0, 0.0, 0.0, 0.0
 * 
 *     if case==4 or case==10:             # <<<<<<<<<<<<<<
 *         a = ( cell.v4 - cell.v0 ) * ( cell.v6 - cell.v2 ) - ( cell.v7 - cell.v3 ) * ( cell.v5 - cell.v1 )
 *         b =  cell.v2 * ( cell.v4 - cell.v0 ) + cell.v0 * ( cell.v6 - cell.v2 ) - cell.v1 * ( cell.v7 - cell.v3 ) - cell.v3 * ( cell.v5 - cell.v1 )
 */
    break;
    case 6:

    /* "_marching_cubes_lewiner_cy.pyx":2460
 *         Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 * 
 *     elif case==6 or case==7 or case==12 or case==13:             # <<<<<<<<<<<<<<
 *         # Define edge
 *         if case == 6:  edge = luts.TEST6.get2(config, 2)
 */
    case 7:
    case 12:
    case 13:

    /* "_marching_cubes_lewiner_cy.pyx":2462
 *     elif case==6 or case==7 or case==12 or case==13:
 *         # Define edge
 *         if case == 6:  edge = luts.TEST6.get2(config, 2)             # <<<<<<<<<<<<<<
 *         elif case == 7: edge = luts.TEST7.get2(config, 4)
 *         elif case == 12: edge = luts.TEST12.get2(config, 3)
 */
    switch (__pyx_v_case) {
      case 6:
      __pyx_v_edge = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST6->__pyx_vtab)->get2(__pyx_v_luts->TEST6, __pyx_v_config, 2);
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":2463
 *         # Define edge
 *         if case == 6:  edge = luts.TEST6.get2(config, 2)
 *         elif case == 7: edge = luts.TEST7.get2(config, 4)             # <<<<<<<<<<<<<<
 *         elif case == 12: edge = luts.TEST12.get2(config, 3)
 *         elif case == 13: edge = luts.TILING13_5_1.get3(config, subconfig, 0)
 */
      __pyx_v_edge = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST7->__pyx_vtab)->get2(__pyx_v_luts->TEST7, __pyx_v_config, 4);
      break;
      case 12:

      /* "_marching_cubes_lewiner_cy.pyx":2464
 *         if case == 6:  edge = luts.TEST6.get2(config, 2)
 *         elif case == 7: edge = luts.TEST7.get2(config, 4)
 *         elif case == 12: edge = luts.TEST12.get2(config, 3)             # <<<<<<<<<<<<<<
 *         elif case == 13: edge = luts.TILING13_5_1.get3(config, subconfig, 0)
 * 
 */
      __pyx_v_edge = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TEST12->__pyx_vtab)->get2(__pyx_v_luts->TEST12, __pyx_v_config, 3);
      break;
      case 13:

      /* "_marching_cubes_lewiner_cy.pyx":2465
 *         elif case == 7: edge = luts.TEST7.get2(config, 4)
 *         elif case == 12: edge = luts.TEST12.get2(config, 3)
 *         elif case == 13: edge = luts.TILING13_5_1.get3(config, subconfig, 0)             # <<<<<<<<<<<<<<
 * 
 *         if edge==0:
 */
      __pyx_v_edge = ((struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut *)__pyx_v_luts->TILING13_5_1->__pyx_vtab)->get3(__pyx_v_luts->TILING13_5_1, __pyx_v_config, __pyx_v_subconfig, 0);
      break;
      default: break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2467
 *         elif case == 13: edge = luts.TILING13_5_1.get3(config, subconfig, 0)
 * 
 *         if edge==0:             # <<<<<<<<<<<<<<
 *             t  = cell.v0 / ( cell.v0 - cell.v1 + FLT_EPSILON )
 *             At = 0
 */
    switch (__pyx_v_edge) {
      case 0:

      /* "_marching_cubes_lewiner_cy.pyx":2468
 * 
 *         if edge==0:
 *             t  = cell.v0 / ( cell.v0 - cell.v1 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v3 + ( cell.v2 - cell.v3 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v0 / ((__pyx_v_cell->v0 - __pyx_v_cell->v1) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2469
 *         if edge==0:
 *             t  = cell.v0 / ( cell.v0 - cell.v1 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Ct = cell.v7 + ( cell.v6 - cell.v7 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2470
 *             t  = cell.v0 / ( cell.v0 - cell.v1 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v3 + ( cell.v2 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Dt = cell.v4 + ( cell.v5 - cell.v4 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v3 + ((__pyx_v_cell->v2 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2471
 *             At = 0
 *             Bt = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Ct = cell.v7 + ( cell.v6 - cell.v7 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v4 + ( cell.v5 - cell.v4 ) * t
 *         elif edge==1:
 */
      __pyx_v_Ct = (__pyx_v_cell->v7 + ((__pyx_v_cell->v6 - __pyx_v_cell->v7) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2472
 *             Bt = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Ct = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Dt = cell.v4 + ( cell.v5 - cell.v4 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==1:
 *             t  = cell.v1 / ( cell.v1 - cell.v2 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v4 + ((__pyx_v_cell->v5 - __pyx_v_cell->v4) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2467
 *         elif case == 13: edge = luts.TILING13_5_1.get3(config, subconfig, 0)
 * 
 *         if edge==0:             # <<<<<<<<<<<<<<
 *             t  = cell.v0 / ( cell.v0 - cell.v1 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 1:

      /* "_marching_cubes_lewiner_cy.pyx":2474
 *             Dt = cell.v4 + ( cell.v5 - cell.v4 ) * t
 *         elif edge==1:
 *             t  = cell.v1 / ( cell.v1 - cell.v2 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v0 + ( cell.v3 - cell.v0 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v1 / ((__pyx_v_cell->v1 - __pyx_v_cell->v2) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2475
 *         elif edge==1:
 *             t  = cell.v1 / ( cell.v1 - cell.v2 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Ct = cell.v4 + ( cell.v7 - cell.v4 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2476
 *             t  = cell.v1 / ( cell.v1 - cell.v2 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v0 + ( cell.v3 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Dt = cell.v5 + ( cell.v6 - cell.v5 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v0 + ((__pyx_v_cell->v3 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2477
 *             At = 0
 *             Bt = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Ct = cell.v4 + ( cell.v7 - cell.v4 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v5 + ( cell.v6 - cell.v5 ) * t
 *         elif edge==2:
 */
      __pyx_v_Ct = (__pyx_v_cell->v4 + ((__pyx_v_cell->v7 - __pyx_v_cell->v4) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2478
 *             Bt = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Ct = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Dt = cell.v5 + ( cell.v6 - cell.v5 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==2:
 *             t  = cell.v2 / ( cell.v2 - cell.v3 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v5 + ((__pyx_v_cell->v6 - __pyx_v_cell->v5) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2473
 *             Ct = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Dt = cell.v4 + ( cell.v5 - cell.v4 ) * t
 *         elif edge==1:             # <<<<<<<<<<<<<<
 *             t  = cell.v1 / ( cell.v1 - cell.v2 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 2:

      /* "_marching_cubes_lewiner_cy.pyx":2480
 *             Dt = cell.v5 + ( cell.v6 - cell.v5 ) * t
 *         elif edge==2:
 *             t  = cell.v2 / ( cell.v2 - cell.v3 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v1 + ( cell.v0 - cell.v1 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v2 / ((__pyx_v_cell->v2 - __pyx_v_cell->v3) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2481
 *         elif edge==2:
 *             t  = cell.v2 / ( cell.v2 - cell.v3 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Ct = cell.v5 + ( cell.v4 - cell.v5 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2482
 *             t  = cell.v2 / ( cell.v2 - cell.v3 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v1 + ( cell.v0 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Dt = cell.v6 + ( cell.v7 - cell.v6 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v1 + ((__pyx_v_cell->v0 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2483
 *             At = 0
 *             Bt = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Ct = cell.v5 + ( cell.v4 - cell.v5 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v6 + ( cell.v7 - cell.v6 ) * t
 *         elif edge==3:
 */
      __pyx_v_Ct = (__pyx_v_cell->v5 + ((__pyx_v_cell->v4 - __pyx_v_cell->v5) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2484
 *             Bt = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Ct = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Dt = cell.v6 + ( cell.v7 - cell.v6 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==3:
 *             t  = cell.v3 / ( cell.v3 - cell.v0 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v6 + ((__pyx_v_cell->v7 - __pyx_v_cell->v6) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2479
 *             Ct = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Dt = cell.v5 + ( cell.v6 - cell.v5 ) * t
 *         elif edge==2:             # <<<<<<<<<<<<<<
 *             t  = cell.v2 / ( cell.v2 - cell.v3 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 3:

      /* "_marching_cubes_lewiner_cy.pyx":2486
 *             Dt = cell.v6 + ( cell.v7 - cell.v6 ) * t
 *         elif edge==3:
 *             t  = cell.v3 / ( cell.v3 - cell.v0 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v2 + ( cell.v1 - cell.v2 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v3 / ((__pyx_v_cell->v3 - __pyx_v_cell->v0) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2487
 *         elif edge==3:
 *             t  = cell.v3 / ( cell.v3 - cell.v0 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Ct = cell.v6 + ( cell.v5 - cell.v6 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2488
 *             t  = cell.v3 / ( cell.v3 - cell.v0 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v2 + ( cell.v1 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Dt = cell.v7 + ( cell.v4 - cell.v7 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v2 + ((__pyx_v_cell->v1 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2489
 *             At = 0
 *             Bt = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Ct = cell.v6 + ( cell.v5 - cell.v6 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v7 + ( cell.v4 - cell.v7 ) * t
 *         elif edge==4:
 */
      __pyx_v_Ct = (__pyx_v_cell->v6 + ((__pyx_v_cell->v5 - __pyx_v_cell->v6) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2490
 *             Bt = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Ct = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Dt = cell.v7 + ( cell.v4 - cell.v7 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==4:
 *             t  = cell.v4 / ( cell.v4 - cell.v5 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v7 + ((__pyx_v_cell->v4 - __pyx_v_cell->v7) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2485
 *             Ct = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Dt = cell.v6 + ( cell.v7 - cell.v6 ) * t
 *         elif edge==3:             # <<<<<<<<<<<<<<
 *             t  = cell.v3 / ( cell.v3 - cell.v0 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 4:

      /* "_marching_cubes_lewiner_cy.pyx":2492
 *             Dt = cell.v7 + ( cell.v4 - cell.v7 ) * t
 *         elif edge==4:
 *             t  = cell.v4 / ( cell.v4 - cell.v5 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v7 + ( cell.v6 - cell.v7 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v4 / ((__pyx_v_cell->v4 - __pyx_v_cell->v5) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2493
 *         elif edge==4:
 *             t  = cell.v4 / ( cell.v4 - cell.v5 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Ct = cell.v3 + ( cell.v2 - cell.v3 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2494
 *             t  = cell.v4 / ( cell.v4 - cell.v5 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v7 + ( cell.v6 - cell.v7 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Dt = cell.v0 + ( cell.v1 - cell.v0 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v7 + ((__pyx_v_cell->v6 - __pyx_v_cell->v7) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2495
 *             At = 0
 *             Bt = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Ct = cell.v3 + ( cell.v2 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v0 + ( cell.v1 - cell.v0 ) * t
 *         elif edge==5:
 */
      __pyx_v_Ct = (__pyx_v_cell->v3 + ((__pyx_v_cell->v2 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2496
 *             Bt = cell.v7 + ( cell.v6 - cell.v7 ) * t
 *             Ct = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Dt = cell.v0 + ( cell.v1 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==5:
 *             t  = cell.v5 / ( cell.v5 - cell.v6 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v0 + ((__pyx_v_cell->v1 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2491
 *             Ct = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Dt = cell.v7 + ( cell.v4 - cell.v7 ) * t
 *         elif edge==4:             # <<<<<<<<<<<<<<
 *             t  = cell.v4 / ( cell.v4 - cell.v5 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 5:

      /* "_marching_cubes_lewiner_cy.pyx":2498
 *             Dt = cell.v0 + ( cell.v1 - cell.v0 ) * t
 *         elif edge==5:
 *             t  = cell.v5 / ( cell.v5 - cell.v6 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v4 + ( cell.v7 - cell.v4 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v5 / ((__pyx_v_cell->v5 - __pyx_v_cell->v6) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2499
 *         elif edge==5:
 *             t  = cell.v5 / ( cell.v5 - cell.v6 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Ct = cell.v0 + ( cell.v3 - cell.v0 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2500
 *             t  = cell.v5 / ( cell.v5 - cell.v6 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v4 + ( cell.v7 - cell.v4 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Dt = cell.v1 + ( cell.v2 - cell.v1 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v4 + ((__pyx_v_cell->v7 - __pyx_v_cell->v4) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2501
 *             At = 0
 *             Bt = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Ct = cell.v0 + ( cell.v3 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v1 + ( cell.v2 - cell.v1 ) * t
 *         elif edge==6:
 */
      __pyx_v_Ct = (__pyx_v_cell->v0 + ((__pyx_v_cell->v3 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2502
 *             Bt = cell.v4 + ( cell.v7 - cell.v4 ) * t
 *             Ct = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Dt = cell.v1 + ( cell.v2 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==6:
 *             t  = cell.v6 / ( cell.v6 - cell.v7 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v1 + ((__pyx_v_cell->v2 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2497
 *             Ct = cell.v3 + ( cell.v2 - cell.v3 ) * t
 *             Dt = cell.v0 + ( cell.v1 - cell.v0 ) * t
 *         elif edge==5:             # <<<<<<<<<<<<<<
 *             t  = cell.v5 / ( cell.v5 - cell.v6 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 6:

      /* "_marching_cubes_lewiner_cy.pyx":2504
 *             Dt = cell.v1 + ( cell.v2 - cell.v1 ) * t
 *         elif edge==6:
 *             t  = cell.v6 / ( cell.v6 - cell.v7 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v5 + ( cell.v4 - cell.v5 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v6 / ((__pyx_v_cell->v6 - __pyx_v_cell->v7) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2505
 *         elif edge==6:
 *             t  = cell.v6 / ( cell.v6 - cell.v7 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Ct = cell.v1 + ( cell.v0 - cell.v1 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2506
 *             t  = cell.v6 / ( cell.v6 - cell.v7 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v5 + ( cell.v4 - cell.v5 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Dt = cell.v2 + ( cell.v3 - cell.v2 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v5 + ((__pyx_v_cell->v4 - __pyx_v_cell->v5) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2507
 *             At = 0
 *             Bt = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Ct = cell.v1 + ( cell.v0 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v2 + ( cell.v3 - cell.v2 ) * t
 *         elif edge==7:
 */
      __pyx_v_Ct = (__pyx_v_cell->v1 + ((__pyx_v_cell->v0 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2508
 *             Bt = cell.v5 + ( cell.v4 - cell.v5 ) * t
 *             Ct = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Dt = cell.v2 + ( cell.v3 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==7:
 *             t  = cell.v7 / ( cell.v7 - cell.v4 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v2 + ((__pyx_v_cell->v3 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2503
 *             Ct = cell.v0 + ( cell.v3 - cell.v0 ) * t
 *             Dt = cell.v1 + ( cell.v2 - cell.v1 ) * t
 *         elif edge==6:             # <<<<<<<<<<<<<<
 *             t  = cell.v6 / ( cell.v6 - cell.v7 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 7:

      /* "_marching_cubes_lewiner_cy.pyx":2510
 *             Dt = cell.v2 + ( cell.v3 - cell.v2 ) * t
 *         elif edge==7:
 *             t  = cell.v7 / ( cell.v7 - cell.v4 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v6 + ( cell.v5 - cell.v6 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v7 / ((__pyx_v_cell->v7 - __pyx_v_cell->v4) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2511
 *         elif edge==7:
 *             t  = cell.v7 / ( cell.v7 - cell.v4 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Ct = cell.v2 + ( cell.v1 - cell.v2 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2512
 *             t  = cell.v7 / ( cell.v7 - cell.v4 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v6 + ( cell.v5 - cell.v6 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Dt = cell.v3 + ( cell.v0 - cell.v3 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v6 + ((__pyx_v_cell->v5 - __pyx_v_cell->v6) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2513
 *             At = 0
 *             Bt = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Ct = cell.v2 + ( cell.v1 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v3 + ( cell.v0 - cell.v3 ) * t
 *         elif edge==8:
 */
      __pyx_v_Ct = (__pyx_v_cell->v2 + ((__pyx_v_cell->v1 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2514
 *             Bt = cell.v6 + ( cell.v5 - cell.v6 ) * t
 *             Ct = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Dt = cell.v3 + ( cell.v0 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==8:
 *             t  = cell.v0 / ( cell.v0 - cell.v4 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v3 + ((__pyx_v_cell->v0 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2509
 *             Ct = cell.v1 + ( cell.v0 - cell.v1 ) * t
 *             Dt = cell.v2 + ( cell.v3 - cell.v2 ) * t
 *         elif edge==7:             # <<<<<<<<<<<<<<
 *             t  = cell.v7 / ( cell.v7 - cell.v4 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 8:

      /* "_marching_cubes_lewiner_cy.pyx":2516
 *             Dt = cell.v3 + ( cell.v0 - cell.v3 ) * t
 *         elif edge==8:
 *             t  = cell.v0 / ( cell.v0 - cell.v4 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v0 / ((__pyx_v_cell->v0 - __pyx_v_cell->v4) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2517
 *         elif edge==8:
 *             t  = cell.v0 / ( cell.v0 - cell.v4 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2518
 *             t  = cell.v0 / ( cell.v0 - cell.v4 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v3 + ((__pyx_v_cell->v7 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2519
 *             At = 0
 *             Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *         elif edge==9:
 */
      __pyx_v_Ct = (__pyx_v_cell->v2 + ((__pyx_v_cell->v6 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2520
 *             Bt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==9:
 *             t  = cell.v1 / ( cell.v1 - cell.v5 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v1 + ((__pyx_v_cell->v5 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2515
 *             Ct = cell.v2 + ( cell.v1 - cell.v2 ) * t
 *             Dt = cell.v3 + ( cell.v0 - cell.v3 ) * t
 *         elif edge==8:             # <<<<<<<<<<<<<<
 *             t  = cell.v0 / ( cell.v0 - cell.v4 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 9:

      /* "_marching_cubes_lewiner_cy.pyx":2522
 *             Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *         elif edge==9:
 *             t  = cell.v1 / ( cell.v1 - cell.v5 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v1 / ((__pyx_v_cell->v1 - __pyx_v_cell->v5) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2523
 *         elif edge==9:
 *             t  = cell.v1 / ( cell.v1 - cell.v5 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Ct = cell.v3 + ( cell.v7 - cell.v3 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2524
 *             t  = cell.v1 / ( cell.v1 - cell.v5 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v0 + ( cell.v4 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Dt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v0 + ((__pyx_v_cell->v4 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2525
 *             At = 0
 *             Bt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Ct = cell.v3 + ( cell.v7 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *         elif edge==10:
 */
      __pyx_v_Ct = (__pyx_v_cell->v3 + ((__pyx_v_cell->v7 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2526
 *             Bt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Ct = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Dt = cell.v2 + ( cell.v6 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==10:
 *             t  = cell.v2 / ( cell.v2 - cell.v6 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v2 + ((__pyx_v_cell->v6 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2521
 *             Ct = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *         elif edge==9:             # <<<<<<<<<<<<<<
 *             t  = cell.v1 / ( cell.v1 - cell.v5 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 10:

      /* "_marching_cubes_lewiner_cy.pyx":2528
 *             Dt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *         elif edge==10:
 *             t  = cell.v2 / ( cell.v2 - cell.v6 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v2 / ((__pyx_v_cell->v2 - __pyx_v_cell->v6) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2529
 *         elif edge==10:
 *             t  = cell.v2 / ( cell.v2 - cell.v6 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *             Ct = cell.v0 + ( cell.v4 - cell.v0 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2530
 *             t  = cell.v2 / ( cell.v2 - cell.v6 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v1 + ( cell.v5 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Dt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v1 + ((__pyx_v_cell->v5 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2531
 *             At = 0
 *             Bt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *             Ct = cell.v0 + ( cell.v4 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         elif edge==11:
 */
      __pyx_v_Ct = (__pyx_v_cell->v0 + ((__pyx_v_cell->v4 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2532
 *             Bt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *             Ct = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Dt = cell.v3 + ( cell.v7 - cell.v3 ) * t             # <<<<<<<<<<<<<<
 *         elif edge==11:
 *             t  = cell.v3 / ( cell.v3 - cell.v7 + FLT_EPSILON )
 */
      __pyx_v_Dt = (__pyx_v_cell->v3 + ((__pyx_v_cell->v7 - __pyx_v_cell->v3) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2527
 *             Ct = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *             Dt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *         elif edge==10:             # <<<<<<<<<<<<<<
 *             t  = cell.v2 / ( cell.v2 - cell.v6 + FLT_EPSILON )
 *             At = 0
 */
      break;
      case 11:

      /* "_marching_cubes_lewiner_cy.pyx":2534
 *             Dt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         elif edge==11:
 *             t  = cell.v3 / ( cell.v3 - cell.v7 + FLT_EPSILON )             # <<<<<<<<<<<<<<
 *             At = 0
 *             Bt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 */
      __pyx_v_t = (__pyx_v_cell->v3 / ((__pyx_v_cell->v3 - __pyx_v_cell->v7) + __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON));

      /* "_marching_cubes_lewiner_cy.pyx":2535
 *         elif edge==11:
 *             t  = cell.v3 / ( cell.v3 - cell.v7 + FLT_EPSILON )
 *             At = 0             # <<<<<<<<<<<<<<
 *             Bt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Ct = cell.v1 + ( cell.v5 - cell.v1 ) * t
 */
      __pyx_v_At = 0.0;

      /* "_marching_cubes_lewiner_cy.pyx":2536
 *             t  = cell.v3 / ( cell.v3 - cell.v7 + FLT_EPSILON )
 *             At = 0
 *             Bt = cell.v2 + ( cell.v6 - cell.v2 ) * t             # <<<<<<<<<<<<<<
 *             Ct = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *             Dt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 */
      __pyx_v_Bt = (__pyx_v_cell->v2 + ((__pyx_v_cell->v6 - __pyx_v_cell->v2) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2537
 *             At = 0
 *             Bt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Ct = cell.v1 + ( cell.v5 - cell.v1 ) * t             # <<<<<<<<<<<<<<
 *             Dt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *         else:
 */
      __pyx_v_Ct = (__pyx_v_cell->v1 + ((__pyx_v_cell->v5 - __pyx_v_cell->v1) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2538
 *             Bt = cell.v2 + ( cell.v6 - cell.v2 ) * t
 *             Ct = cell.v1 + ( cell.v5 - cell.v1 ) * t
 *             Dt = cell.v0 + ( cell.v4 - cell.v0 ) * t             # <<<<<<<<<<<<<<
 *         else:
 *             print( "Invalid edge %i." % edge )
 */
      __pyx_v_Dt = (__pyx_v_cell->v0 + ((__pyx_v_cell->v4 - __pyx_v_cell->v0) * __pyx_v_t));

      /* "_marching_cubes_lewiner_cy.pyx":2533
 *             Ct = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *             Dt = cell.v3 + ( cell.v7 - cell.v3 ) * t
 *         elif edge==11:             # <<<<<<<<<<<<<<
 *             t  = cell.v3 / ( cell.v3 - cell.v7 + FLT_EPSILON )
 *             At = 0
 */
      break;
      default:

      /* "_marching_cubes_lewiner_cy.pyx":2540
 *             Dt = cell.v0 + ( cell.v4 - cell.v0 ) * t
 *         else:
 *             print( "Invalid edge %i." % edge )             # <<<<<<<<<<<<<<
 *     else:
 *         print( "Invalid ambiguous case %i." % case )
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_edge); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_edge_i, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_8) < 0) __PYX_ERR(0, 2540, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      break;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2460
 *         Dt = cell.v1 + ( cell.v5 - cell.v1 ) * t
 * 
 *     elif case==6 or case==7 or case==12 or case==13:             # <<<<<<<<<<<<<<
 *         # Define edge
 *         if case == 6:  edge = luts.TEST6.get2(config, 2)
 */
    break;
    default:

    /* "_marching_cubes_lewiner_cy.pyx":2542
 *             print( "Invalid edge %i." % edge )
 *     else:
 *         print( "Invalid ambiguous case %i." % case )             # <<<<<<<<<<<<<<
 * 
 *     # Process results
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_case); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_ambiguous_case_i, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_7) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    break;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2545
 * 
 *     # Process results
 *     if At >= 0: test += 1             # <<<<<<<<<<<<<<
 *     if Bt >= 0: test += 2
 *     if Ct >= 0: test += 4
 */
  __pyx_t_5 = ((__pyx_v_At >= 0.0) != 0);
  if (__pyx_t_5) {
    __pyx_v_test = (__pyx_v_test + 1);
  }

  /* "_marching_cubes_lewiner_cy.pyx":2546
 *     # Process results
 *     if At >= 0: test += 1
 *     if Bt >= 0: test += 2             # <<<<<<<<<<<<<<
 *     if Ct >= 0: test += 4
 *     if Dt >= 0: test += 8
 */
  __pyx_t_5 = ((__pyx_v_Bt >= 0.0) != 0);
  if (__pyx_t_5) {
    __pyx_v_test = (__pyx_v_test + 2);
  }

  /* "_marching_cubes_lewiner_cy.pyx":2547
 *     if At >= 0: test += 1
 *     if Bt >= 0: test += 2
 *     if Ct >= 0: test += 4             # <<<<<<<<<<<<<<
 *     if Dt >= 0: test += 8
 * 
 */
  __pyx_t_5 = ((__pyx_v_Ct >= 0.0) != 0);
  if (__pyx_t_5) {
    __pyx_v_test = (__pyx_v_test + 4);
  }

  /* "_marching_cubes_lewiner_cy.pyx":2548
 *     if Bt >= 0: test += 2
 *     if Ct >= 0: test += 4
 *     if Dt >= 0: test += 8             # <<<<<<<<<<<<<<
 * 
 *     # Determine what to return
 */
  __pyx_t_5 = ((__pyx_v_Dt >= 0.0) != 0);
  if (__pyx_t_5) {
    __pyx_v_test = (__pyx_v_test + 8);
  }

  /* "_marching_cubes_lewiner_cy.pyx":2551
 * 
 *     # Determine what to return
 *     if test==0: return s>0             # <<<<<<<<<<<<<<
 *     elif test==1: return s>0
 *     elif test==2: return s>0
 */
  switch (__pyx_v_test) {
    case 0:
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 1:

    /* "_marching_cubes_lewiner_cy.pyx":2552
 *     # Determine what to return
 *     if test==0: return s>0
 *     elif test==1: return s>0             # <<<<<<<<<<<<<<
 *     elif test==2: return s>0
 *     elif test==3: return s>0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 2:

    /* "_marching_cubes_lewiner_cy.pyx":2553
 *     if test==0: return s>0
 *     elif test==1: return s>0
 *     elif test==2: return s>0             # <<<<<<<<<<<<<<
 *     elif test==3: return s>0
 *     elif test==4: return s>0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 3:

    /* "_marching_cubes_lewiner_cy.pyx":2554
 *     elif test==1: return s>0
 *     elif test==2: return s>0
 *     elif test==3: return s>0             # <<<<<<<<<<<<<<
 *     elif test==4: return s>0
 *     elif test==5:
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 4:

    /* "_marching_cubes_lewiner_cy.pyx":2555
 *     elif test==2: return s>0
 *     elif test==3: return s>0
 *     elif test==4: return s>0             # <<<<<<<<<<<<<<
 *     elif test==5:
 *         if At * Ct - Bt * Dt <  FLT_EPSILON: return s>0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 5:

    /* "_marching_cubes_lewiner_cy.pyx":2557
 *     elif test==4: return s>0
 *     elif test==5:
 *         if At * Ct - Bt * Dt <  FLT_EPSILON: return s>0             # <<<<<<<<<<<<<<
 *     elif test==6: return s>0
 *     elif test==7: return s<0
 */
    __pyx_t_5 = ((((__pyx_v_At * __pyx_v_Ct) - (__pyx_v_Bt * __pyx_v_Dt)) < __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON) != 0);
    if (__pyx_t_5) {
      __pyx_r = (__pyx_v_s > 0);
      goto __pyx_L0;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2556
 *     elif test==3: return s>0
 *     elif test==4: return s>0
 *     elif test==5:             # <<<<<<<<<<<<<<
 *         if At * Ct - Bt * Dt <  FLT_EPSILON: return s>0
 *     elif test==6: return s>0
 */
    break;
    case 6:

    /* "_marching_cubes_lewiner_cy.pyx":2558
 *     elif test==5:
 *         if At * Ct - Bt * Dt <  FLT_EPSILON: return s>0
 *     elif test==6: return s>0             # <<<<<<<<<<<<<<
 *     elif test==7: return s<0
 *     elif test==8: return s>0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 7:

    /* "_marching_cubes_lewiner_cy.pyx":2559
 *         if At * Ct - Bt * Dt <  FLT_EPSILON: return s>0
 *     elif test==6: return s>0
 *     elif test==7: return s<0             # <<<<<<<<<<<<<<
 *     elif test==8: return s>0
 *     elif test==9: return s>0
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
    case 8:

    /* "_marching_cubes_lewiner_cy.pyx":2560
 *     elif test==6: return s>0
 *     elif test==7: return s<0
 *     elif test==8: return s>0             # <<<<<<<<<<<<<<
 *     elif test==9: return s>0
 *     elif test==10:
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 9:

    /* "_marching_cubes_lewiner_cy.pyx":2561
 *     elif test==7: return s<0
 *     elif test==8: return s>0
 *     elif test==9: return s>0             # <<<<<<<<<<<<<<
 *     elif test==10:
 *         if At * Ct - Bt * Dt >= FLT_EPSILON: return s>0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 10:

    /* "_marching_cubes_lewiner_cy.pyx":2563
 *     elif test==9: return s>0
 *     elif test==10:
 *         if At * Ct - Bt * Dt >= FLT_EPSILON: return s>0             # <<<<<<<<<<<<<<
 *     elif test==11: return s<0
 *     elif test==12: return s>0
 */
    __pyx_t_5 = ((((__pyx_v_At * __pyx_v_Ct) - (__pyx_v_Bt * __pyx_v_Dt)) >= __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON) != 0);
    if (__pyx_t_5) {
      __pyx_r = (__pyx_v_s > 0);
      goto __pyx_L0;
    }

    /* "_marching_cubes_lewiner_cy.pyx":2562
 *     elif test==8: return s>0
 *     elif test==9: return s>0
 *     elif test==10:             # <<<<<<<<<<<<<<
 *         if At * Ct - Bt * Dt >= FLT_EPSILON: return s>0
 *     elif test==11: return s<0
 */
    break;
    case 11:

    /* "_marching_cubes_lewiner_cy.pyx":2564
 *     elif test==10:
 *         if At * Ct - Bt * Dt >= FLT_EPSILON: return s>0
 *     elif test==11: return s<0             # <<<<<<<<<<<<<<
 *     elif test==12: return s>0
 *     elif test==13: return s<0
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
    case 12:

    /* "_marching_cubes_lewiner_cy.pyx":2565
 *         if At * Ct - Bt * Dt >= FLT_EPSILON: return s>0
 *     elif test==11: return s<0
 *     elif test==12: return s>0             # <<<<<<<<<<<<<<
 *     elif test==13: return s<0
 *     elif test==14: return s<0
 */
    __pyx_r = (__pyx_v_s > 0);
    goto __pyx_L0;
    break;
    case 13:

    /* "_marching_cubes_lewiner_cy.pyx":2566
 *     elif test==11: return s<0
 *     elif test==12: return s>0
 *     elif test==13: return s<0             # <<<<<<<<<<<<<<
 *     elif test==14: return s<0
 *     elif test==15: return s<0
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
    case 14:

    /* "_marching_cubes_lewiner_cy.pyx":2567
 *     elif test==12: return s>0
 *     elif test==13: return s<0
 *     elif test==14: return s<0             # <<<<<<<<<<<<<<
 *     elif test==15: return s<0
 *     else: return s<0
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
    case 15:

    /* "_marching_cubes_lewiner_cy.pyx":2568
 *     elif test==13: return s<0
 *     elif test==14: return s<0
 *     elif test==15: return s<0             # <<<<<<<<<<<<<<
 *     else: return s<0
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
    default:

    /* "_marching_cubes_lewiner_cy.pyx":2569
 *     elif test==14: return s<0
 *     elif test==15: return s<0
 *     else: return s<0             # <<<<<<<<<<<<<<
 */
    __pyx_r = (__pyx_v_s < 0);
    goto __pyx_L0;
    break;
  }

  /* "_marching_cubes_lewiner_cy.pyx":2435
 * 
 * 
 * cdef int test_internal(Cell cell, LutProvider luts, int case, int config, int subconfig, int s):             # <<<<<<<<<<<<<<
 *     """ Return True of the face contains part of the surface.
 *     """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("_marching_cubes_lewiner_cy.test_internal", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_LutProvider(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_5__pyx_unpickle_LutProvider(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_26_marching_cubes_lewiner_cy_5__pyx_unpickle_LutProvider = {"__pyx_unpickle_LutProvider", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_26_marching_cubes_lewiner_cy_5__pyx_unpickle_LutProvider, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_26_marching_cubes_lewiner_cy_5__pyx_unpickle_LutProvider(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_LutProvider (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LutProvider", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LutProvider", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_LutProvider") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LutProvider", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.__pyx_unpickle_LutProvider", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_26_marching_cubes_lewiner_cy_4__pyx_unpickle_LutProvider(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_26_marching_cubes_lewiner_cy_4__pyx_unpickle_LutProvider(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LutProvider", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3035ec8, 0x4a4e1b2, 0x53f5fc5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__6, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3035ec8, 0x4a4e1b2, 0x53f5fc5):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 *     __pyx_result = LutProvider.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x3035ec8, 0x4a4e1b2, 0x53f5fc5):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = LutProvider.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3035ec8, 0x4a4e1b2, 0x53f5fc5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 *     __pyx_result = LutProvider.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_26_marching_cubes_lewiner_cy_LutProvider), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 *     __pyx_result = LutProvider.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = LutProvider.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_26_marching_cubes_lewiner_cy___pyx_unpickle_LutProvider__set_state(((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 *     __pyx_result = LutProvider.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LutProvider(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.__pyx_unpickle_LutProvider", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_26_marching_cubes_lewiner_cy___pyx_unpickle_LutProvider__set_state(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LutProvider__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[51])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->CASES);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->CASES));
  __pyx_v___pyx_result->CASES = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->CASESCLASSIC);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->CASESCLASSIC));
  __pyx_v___pyx_result->CASESCLASSIC = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 2);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->EDGESRELX);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->EDGESRELX));
  __pyx_v___pyx_result->EDGESRELX = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 3);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->EDGESRELY);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->EDGESRELY));
  __pyx_v___pyx_result->EDGESRELY = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 4);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->EDGESRELZ);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->EDGESRELZ));
  __pyx_v___pyx_result->EDGESRELZ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 5);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->SUBCONFIG13);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->SUBCONFIG13));
  __pyx_v___pyx_result->SUBCONFIG13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 6), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 6);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST10);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST10));
  __pyx_v___pyx_result->TEST10 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 7)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 7), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 7);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST12);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST12));
  __pyx_v___pyx_result->TEST12 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 8)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 8), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 8);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST13);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST13));
  __pyx_v___pyx_result->TEST13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 9)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 9), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 9);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST3);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST3));
  __pyx_v___pyx_result->TEST3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 10)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 10), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 10);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST4);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST4));
  __pyx_v___pyx_result->TEST4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 11)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 11), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 11);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST6);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST6));
  __pyx_v___pyx_result->TEST6 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 12)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 12), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 12);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TEST7);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TEST7));
  __pyx_v___pyx_result->TEST7 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 13)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 13), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 13);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING1));
  __pyx_v___pyx_result->TILING1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 14)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 14), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 14);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING10_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING10_1_1));
  __pyx_v___pyx_result->TILING10_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 15)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 15), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 15);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING10_1_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING10_1_1_));
  __pyx_v___pyx_result->TILING10_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 16)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 16), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 16);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING10_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING10_1_2));
  __pyx_v___pyx_result->TILING10_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 17)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 17), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 17);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING10_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING10_2));
  __pyx_v___pyx_result->TILING10_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 18)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 18), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 18);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING10_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING10_2_));
  __pyx_v___pyx_result->TILING10_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 19)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 19), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 19);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING11);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING11));
  __pyx_v___pyx_result->TILING11 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 20)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 20), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 20);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING12_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING12_1_1));
  __pyx_v___pyx_result->TILING12_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 21)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 21), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 21);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING12_1_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING12_1_1_));
  __pyx_v___pyx_result->TILING12_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 22)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 22), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 22);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING12_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING12_1_2));
  __pyx_v___pyx_result->TILING12_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 23)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 23), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 23);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING12_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING12_2));
  __pyx_v___pyx_result->TILING12_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 24)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 24), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 24);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING12_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING12_2_));
  __pyx_v___pyx_result->TILING12_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 25)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 25), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 25);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_1));
  __pyx_v___pyx_result->TILING13_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 26)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 26), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 26);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_1_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_1_));
  __pyx_v___pyx_result->TILING13_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 27)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 27), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 27);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_2));
  __pyx_v___pyx_result->TILING13_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 28)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 28), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 28);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_2_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_2_));
  __pyx_v___pyx_result->TILING13_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 29)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 29), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 29);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_3);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_3));
  __pyx_v___pyx_result->TILING13_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 30)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 30), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 30);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_3_);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_3_));
  __pyx_v___pyx_result->TILING13_3_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 31)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 31), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 31);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_4);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_4));
  __pyx_v___pyx_result->TILING13_4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 32)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 32), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 32);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_5_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_5_1));
  __pyx_v___pyx_result->TILING13_5_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 33)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 33), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 33);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING13_5_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING13_5_2));
  __pyx_v___pyx_result->TILING13_5_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 34)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 34), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 34);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING14);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING14));
  __pyx_v___pyx_result->TILING14 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 35)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 35), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 35);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING2));
  __pyx_v___pyx_result->TILING2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 36)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 36), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 36);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING3_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING3_1));
  __pyx_v___pyx_result->TILING3_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 37)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 37), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 37);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING3_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING3_2));
  __pyx_v___pyx_result->TILING3_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 38)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 38), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 38);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING4_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING4_1));
  __pyx_v___pyx_result->TILING4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 39)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 39), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 39);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING4_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING4_2));
  __pyx_v___pyx_result->TILING4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 40)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 40), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 40);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING5);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING5));
  __pyx_v___pyx_result->TILING5 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 41)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 41), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 41);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING6_1_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING6_1_1));
  __pyx_v___pyx_result->TILING6_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 42)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 42), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 42);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING6_1_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING6_1_2));
  __pyx_v___pyx_result->TILING6_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 43)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 43), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 43);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING6_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING6_2));
  __pyx_v___pyx_result->TILING6_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 44)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 44), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 44);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING7_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING7_1));
  __pyx_v___pyx_result->TILING7_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 45)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 45), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 45);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING7_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING7_2));
  __pyx_v___pyx_result->TILING7_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 46)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 46), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 46);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING7_3);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING7_3));
  __pyx_v___pyx_result->TILING7_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 47)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 47), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 47);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING7_4_1);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING7_4_1));
  __pyx_v___pyx_result->TILING7_4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 48)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 48), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 48);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING7_4_2);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING7_4_2));
  __pyx_v___pyx_result->TILING7_4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 49)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 49), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 49);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING8);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING8));
  __pyx_v___pyx_result->TILING8 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 50)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 50), __pyx_ptype_26_marching_cubes_lewiner_cy_Lut))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 50);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->TILING9);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->TILING9));
  __pyx_v___pyx_result->TILING9 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[51])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 51) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[51])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 51)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 51));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[51])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_LutProvider__set_state(<LutProvider> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LutProvider__set_state(LutProvider __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.CASES = __pyx_state[0]; __pyx_result.CASESCLASSIC = __pyx_state[1]; __pyx_result.EDGESRELX = __pyx_state[2]; __pyx_result.EDGESRELY = __pyx_state[3]; __pyx_result.EDGESRELZ = __pyx_state[4]; __pyx_result.SUBCONFIG13 = __pyx_state[5]; __pyx_result.TEST10 = __pyx_state[6]; __pyx_result.TEST12 = __pyx_state[7]; __pyx_result.TEST13 = __pyx_state[8]; __pyx_result.TEST3 = __pyx_state[9]; __pyx_result.TEST4 = __pyx_state[10]; __pyx_result.TEST6 = __pyx_state[11]; __pyx_result.TEST7 = __pyx_state[12]; __pyx_result.TILING1 = __pyx_state[13]; __pyx_result.TILING10_1_1 = __pyx_state[14]; __pyx_result.TILING10_1_1_ = __pyx_state[15]; __pyx_result.TILING10_1_2 = __pyx_state[16]; __pyx_result.TILING10_2 = __pyx_state[17]; __pyx_result.TILING10_2_ = __pyx_state[18]; __pyx_result.TILING11 = __pyx_state[19]; __pyx_result.TILING12_1_1 = __pyx_state[20]; __pyx_result.TILING12_1_1_ = __pyx_state[21]; __pyx_result.TILING12_1_2 = __pyx_state[22]; __pyx_result.TILING12_2 = __pyx_state[23]; __pyx_result.TILING12_2_ = __pyx_state[24]; __pyx_result.TILING13_1 = __pyx_state[25]; __pyx_result.TILING13_1_ = __pyx_state[26]; __pyx_result.TILING13_2 = __pyx_state[27]; __pyx_result.TILING13_2_ = __pyx_state[28]; __pyx_result.TILING13_3 = __pyx_state[29]; __pyx_result.TILING13_3_ = __pyx_state[30]; __pyx_result.TILING13_4 = __pyx_state[31]; __pyx_result.TILING13_5_1 = __pyx_state[32]; __pyx_result.TILING13_5_2 = __pyx_state[33]; __pyx_result.TILING14 = __pyx_state[34]; __pyx_result.TILING2 = __pyx_state[35]; __pyx_result.TILING3_1 = __pyx_state[36]; __pyx_result.TILING3_2 = __pyx_state[37]; __pyx_result.TILING4_1 = __pyx_state[38]; __pyx_result.TILING4_2 = __pyx_state[39]; __pyx_result.TILING5 = __pyx_state[40]; __pyx_result.TILING6_1_1 = __pyx_state[41]; __pyx_result.TILING6_1_2 = __pyx_state[42]; __pyx_result.TILING6_2 = __pyx_state[43]; __pyx_result.TILING7_1 = __pyx_state[44]; __pyx_result.TILING7_2 = __pyx_state[45]; __pyx_result.TILING7_3 = __pyx_state[46]; __pyx_result.TILING7_4_1 = __pyx_state[47]; __pyx_result.TILING7_4_2 = __pyx_state[48]; __pyx_result.TILING8 = __pyx_state[49]; __pyx_result.TILING9 = __pyx_state[50]
 *     if len(__pyx_state) > 51 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_marching_cubes_lewiner_cy.__pyx_unpickle_LutProvider__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":869
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":870
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":868
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":873
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":875
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":874
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":876
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":872
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":882
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 882, __pyx_L3_error)

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":883
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 883, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 884, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 884, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":881
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":880
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":888
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 888, __pyx_L3_error)

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":889
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 889, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 890, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 890, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":887
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":886
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":894
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 894, __pyx_L3_error)

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":895
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 895, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":896
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 896, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 896, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":893
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":892
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  char __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "array.pxd":98
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":100
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":101
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":102
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "array.pxd":103
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "array.pxd":104
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":105
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":107
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "array.pxd":109
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); __PYX_ERR(3, 109, __pyx_L1_error)

    /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  }

  /* "array.pxd":110
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 110, __pyx_L1_error)
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":111
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":113
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":114
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_7 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_7;

  /* "array.pxd":115
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":116
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":119
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":134
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_3 = (__pyx_v_zero != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "array.pxd":136
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    (void)(memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize)));

    /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  }

  /* "array.pxd":137
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":141
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":142
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  (void)(memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize)));

  /* "array.pxd":143
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":149
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":150
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":151
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 151, __pyx_L1_error)

  /* "array.pxd":152
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  (void)(memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize)));

  /* "array.pxd":153
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "array.pxd":158
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 158, __pyx_L1_error)

    /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  }

  /* "array.pxd":159
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 159, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":163
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  (void)(memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize)));

  /* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 124, __pyx_L3_error)
    } else {

      /* "View.MemoryView":124
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 123, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 123, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":130
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 130, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 130, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":131
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 137, __pyx_L1_error)

    /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":140
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":141
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":142
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 142, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 142, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":145
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":146
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 149, __pyx_L1_error)

    /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 152, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":154
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 154, __pyx_L1_error)

      /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":155
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":160
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 161, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":162
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":163
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":165
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 165, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":167
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":170
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":171
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 171, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":175
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 177, __pyx_L1_error)

      /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":180
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":181
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":182
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":183
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":187
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":189
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 190, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 193, __pyx_L1_error)

    /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":194
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":195
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":197
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":199
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":200
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":201
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":204
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":206
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":208
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":217
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":219
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":220
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":224
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":228
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":229
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":232
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":235
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":238
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":241
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":250
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":253
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 253, __pyx_L1_error)

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":254
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":256
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":283
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":285
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":301
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":305
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":308
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":310
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":347
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":348
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":350
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 350, __pyx_L1_error)

    /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":352
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":353
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  __pyx_t_1 = ((!(__PYX_CYTHON_ATOMICS_ENABLED() != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":358
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":359
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":363
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(1, 363, __pyx_L1_error)

        /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  }

  /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":366
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":368
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":370
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":372
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":376
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":380
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":387
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":390
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":389
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":391
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":393
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":397
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":400
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":402
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":409
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 412, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":413
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":415
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 415, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":416
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 420, __pyx_L1_error)

    /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":422
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 422, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":425
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 426, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":429
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 429, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":431
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 437, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":438
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 438, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":441
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 447, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":448
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 448, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 448, __pyx_L1_error)

  /* "View.MemoryView":449
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":453
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":458
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 458, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":461
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":463
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 463, __pyx_L1_error)

      /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":464
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":466
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":468
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":470
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":472
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":477
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 477, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":478
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":481
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":484
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 484, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":485
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":490
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":493
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":495
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":500
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":501
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":496
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 496, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 497, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":506
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":512
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 516, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 522, __pyx_L1_error)

    /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":525
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":527
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":530
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":532
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":535
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":537
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":540
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":542
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":544
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":545
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":546
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":547
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":548
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":549
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":566
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 572, __pyx_L1_error)

    /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":574
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__20, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":581
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":585
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":589
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":593
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":598
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":600
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":601
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":603
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":605
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":609
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":611
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":615
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":618
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 624, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":630
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 630, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":631
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":635
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":637
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":638
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 638, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":643
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":647
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":649
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":650
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 650, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":655
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":661
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":662
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":666
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":674
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":676
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":678
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":679
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":680
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 681, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 681, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__23);
            __Pyx_GIVEREF(__pyx_slice__23);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__23);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":685
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":687
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__23); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 687, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":688
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":691
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 691, __pyx_L1_error)

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":693
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":694
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":696
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":698
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__23);
        __Pyx_GIVEREF(__pyx_slice__23);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__23);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":700
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":703
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 705, __pyx_L1_error)

      /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":713
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":720
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":724
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":727
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 727, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":728
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":730
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":731
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":737
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":738
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":743
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":744
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":753
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)

      /* "View.MemoryView":750
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 750, __pyx_L1_error)

      /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 764, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":832
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":837
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":840
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 840, __pyx_L1_error)

      /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":852
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":857
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":863
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":868
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":870
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":877
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":883
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":886
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":887
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":888
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":894
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":899
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":901
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":902
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 901, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":904
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":906
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":914
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":915
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":919
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":920
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":922
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":923
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":925
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":928
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":930
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 930, __pyx_L1_error)

      /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":933
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 933, __pyx_L1_error)

    /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":935
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":937
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":939
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":946
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":948
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":949
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":953
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = (__pyx_v_ndim / 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":954
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":955
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":956
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":959
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 959, __pyx_L1_error)

      /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":961
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":979
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":985
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":989
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 989, __pyx_L1_error)

    /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":991
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":995
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1010
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1015
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1017
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1018
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1020
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1021
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1023
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1024
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1025
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1026
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1027
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1030
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1034
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1035
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1038
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1039
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1041
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1042
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1044
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1045
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1046
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1048
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1049
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1051
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1058
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1058, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1059
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1061
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1062
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1069
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1070
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1071
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1073
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1074
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1076
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1077
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1078
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1079
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1085
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1086
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1097
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1098
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1100
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1101
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1103
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1105
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1113
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1115
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1123
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1124
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1126
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1133
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1134
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1137
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1139
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1149
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1151
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1156
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1157
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1159
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1160
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1161
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1162
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1164
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1165
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1169
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1170
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1175
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1181
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1183
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1184
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1186
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1199
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1200
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1201
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1203
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1204
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1205
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1207
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1221
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1222
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1224
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1226, __pyx_L1_error)

    /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1229
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1230
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1231
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1232
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1233
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1235
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1239
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1241
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1246
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1248
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1256
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1255
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1255, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1260
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1260, __pyx_L1_error)

  /* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1265
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1265, __pyx_L1_error)

    /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1267
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1267, __pyx_L1_error)
  }

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1278
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1279
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1281
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1282
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1283
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1289
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1291
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1293
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1296
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1297
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1299
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1299, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1302, __pyx_L1_error)

      /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1307
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1309
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1309, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1310
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1322
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1323
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1325
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1326
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1331
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1331, __pyx_L1_error)

    /* "View.MemoryView":1332
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1332, __pyx_L1_error)

    /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1334
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1335
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1338
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1339
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1346
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1348
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1349
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1350
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1351
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1353
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1354
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1355
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1356
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1376
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1383
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1386
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1388
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1390
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1391
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1393
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1402
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1403
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1405
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1413
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1417
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1418
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1419
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1421
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1422
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1424
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__27, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Cell __pyx_vtable_26_marching_cubes_lewiner_cy_Cell;

static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_Cell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)o);
  p->__pyx_vtab = __pyx_vtabptr_26_marching_cubes_lewiner_cy_Cell;
  p->luts = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_Cell(PyObject *o) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->luts);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_26_marching_cubes_lewiner_cy_Cell(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)o;
  if (p->luts) {
    e = (*v)(((PyObject *)p->luts), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_26_marching_cubes_lewiner_cy_Cell(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *)o;
  tmp = ((PyObject*)p->luts);
  p->luts = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_26_marching_cubes_lewiner_cy_Cell[] = {
  {"get_vertices", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_7get_vertices, METH_NOARGS, __pyx_doc_26_marching_cubes_lewiner_cy_4Cell_6get_vertices},
  {"get_normals", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_9get_normals, METH_NOARGS, __pyx_doc_26_marching_cubes_lewiner_cy_4Cell_8get_normals},
  {"get_faces", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_11get_faces, METH_NOARGS, 0},
  {"get_values", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_13get_values, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_4Cell_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_26_marching_cubes_lewiner_cy_Cell = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.Cell", /*tp_name*/
  sizeof(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_Cell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Class to keep track of some stuff during the whole cube marching\n    procedure.\n\n    This \"struct\" keeps track of the current cell location, and the values\n    of corners of the cube. Gradients for the cube corners are calculated\n    when needed.\n\n    Additionally, it keeps track of the array of vertices, faces and normals.\n\n    Notes on vertices\n    -----------------\n    The vertices are stored in a C-array that is increased in size with\n    factors of two if needed. The same applies to the faces and normals.\n\n    Notes on faces\n    --------------\n    To keep track of the vertices already defined, this class maintains\n    two faceLayer arrays. faceLayer1 is of the current layer (z-value)\n    and faceLayer2 is of the next. Both face layers have 4 elements per\n    cell in that layer, 1 for each unique edge per cell (see\n    get_index_in_facelayer). These are initialized as -1, and set to the\n    index in the vertex array when a new vertex is created.\n    In summary, this allows us to keep track of the already created\n    vertices without keeping a very big array.\n\n    Notes on normals\n    ----------------\n    The normal is simply defined as the gradient. Each time that a face is\n    created, we also add the gradient of that vertex position to the\n    normals array. The gradients are all calculated from the differences between\n    the 8 corners of the current cube, but because the final value of a normal\n    was contributed from multiple cells, the normals are quite accurate.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_26_marching_cubes_lewiner_cy_Cell, /*tp_traverse*/
  __pyx_tp_clear_26_marching_cubes_lewiner_cy_Cell, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_26_marching_cubes_lewiner_cy_Cell, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_26_marching_cubes_lewiner_cy_4Cell_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_26_marching_cubes_lewiner_cy_Cell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_26_marching_cubes_lewiner_cy_Lut __pyx_vtable_26_marching_cubes_lewiner_cy_Lut;

static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_Lut(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)o);
  p->__pyx_vtab = __pyx_vtabptr_26_marching_cubes_lewiner_cy_Lut;
  if (unlikely(__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_Lut(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_26_marching_cubes_lewiner_cy_Lut[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_3Lut_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_26_marching_cubes_lewiner_cy_Lut = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.Lut", /*tp_name*/
  sizeof(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_Lut, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Representation of a lookup table.\n    The tables are initially defined as numpy arrays. On initialization,\n    this class converts them to a C array for fast access.\n    This class defines functions to look up values using 1, 2 or 3 indices.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_26_marching_cubes_lewiner_cy_Lut, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_26_marching_cubes_lewiner_cy_3Lut_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_26_marching_cubes_lewiner_cy_Lut, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_26_marching_cubes_lewiner_cy_LutProvider(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)o);
  p->EDGESRELX = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->EDGESRELY = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->EDGESRELZ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->CASESCLASSIC = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->CASES = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING3_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING3_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING5 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING6_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING6_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING6_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING7_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING7_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING7_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING7_4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING7_4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING8 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING9 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING10_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING10_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING10_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING10_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING10_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING11 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING12_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING12_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING12_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING12_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING12_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_3_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_5_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING13_5_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TILING14 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST6 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST7 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST10 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST12 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->TEST13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  p->SUBCONFIG13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_LutProvider(PyObject *o) {
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->EDGESRELX);
  Py_CLEAR(p->EDGESRELY);
  Py_CLEAR(p->EDGESRELZ);
  Py_CLEAR(p->CASESCLASSIC);
  Py_CLEAR(p->CASES);
  Py_CLEAR(p->TILING1);
  Py_CLEAR(p->TILING2);
  Py_CLEAR(p->TILING3_1);
  Py_CLEAR(p->TILING3_2);
  Py_CLEAR(p->TILING4_1);
  Py_CLEAR(p->TILING4_2);
  Py_CLEAR(p->TILING5);
  Py_CLEAR(p->TILING6_1_1);
  Py_CLEAR(p->TILING6_1_2);
  Py_CLEAR(p->TILING6_2);
  Py_CLEAR(p->TILING7_1);
  Py_CLEAR(p->TILING7_2);
  Py_CLEAR(p->TILING7_3);
  Py_CLEAR(p->TILING7_4_1);
  Py_CLEAR(p->TILING7_4_2);
  Py_CLEAR(p->TILING8);
  Py_CLEAR(p->TILING9);
  Py_CLEAR(p->TILING10_1_1);
  Py_CLEAR(p->TILING10_1_1_);
  Py_CLEAR(p->TILING10_1_2);
  Py_CLEAR(p->TILING10_2);
  Py_CLEAR(p->TILING10_2_);
  Py_CLEAR(p->TILING11);
  Py_CLEAR(p->TILING12_1_1);
  Py_CLEAR(p->TILING12_1_1_);
  Py_CLEAR(p->TILING12_1_2);
  Py_CLEAR(p->TILING12_2);
  Py_CLEAR(p->TILING12_2_);
  Py_CLEAR(p->TILING13_1);
  Py_CLEAR(p->TILING13_1_);
  Py_CLEAR(p->TILING13_2);
  Py_CLEAR(p->TILING13_2_);
  Py_CLEAR(p->TILING13_3);
  Py_CLEAR(p->TILING13_3_);
  Py_CLEAR(p->TILING13_4);
  Py_CLEAR(p->TILING13_5_1);
  Py_CLEAR(p->TILING13_5_2);
  Py_CLEAR(p->TILING14);
  Py_CLEAR(p->TEST3);
  Py_CLEAR(p->TEST4);
  Py_CLEAR(p->TEST6);
  Py_CLEAR(p->TEST7);
  Py_CLEAR(p->TEST10);
  Py_CLEAR(p->TEST12);
  Py_CLEAR(p->TEST13);
  Py_CLEAR(p->SUBCONFIG13);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_26_marching_cubes_lewiner_cy_LutProvider(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)o;
  if (p->EDGESRELX) {
    e = (*v)(((PyObject *)p->EDGESRELX), a); if (e) return e;
  }
  if (p->EDGESRELY) {
    e = (*v)(((PyObject *)p->EDGESRELY), a); if (e) return e;
  }
  if (p->EDGESRELZ) {
    e = (*v)(((PyObject *)p->EDGESRELZ), a); if (e) return e;
  }
  if (p->CASESCLASSIC) {
    e = (*v)(((PyObject *)p->CASESCLASSIC), a); if (e) return e;
  }
  if (p->CASES) {
    e = (*v)(((PyObject *)p->CASES), a); if (e) return e;
  }
  if (p->TILING1) {
    e = (*v)(((PyObject *)p->TILING1), a); if (e) return e;
  }
  if (p->TILING2) {
    e = (*v)(((PyObject *)p->TILING2), a); if (e) return e;
  }
  if (p->TILING3_1) {
    e = (*v)(((PyObject *)p->TILING3_1), a); if (e) return e;
  }
  if (p->TILING3_2) {
    e = (*v)(((PyObject *)p->TILING3_2), a); if (e) return e;
  }
  if (p->TILING4_1) {
    e = (*v)(((PyObject *)p->TILING4_1), a); if (e) return e;
  }
  if (p->TILING4_2) {
    e = (*v)(((PyObject *)p->TILING4_2), a); if (e) return e;
  }
  if (p->TILING5) {
    e = (*v)(((PyObject *)p->TILING5), a); if (e) return e;
  }
  if (p->TILING6_1_1) {
    e = (*v)(((PyObject *)p->TILING6_1_1), a); if (e) return e;
  }
  if (p->TILING6_1_2) {
    e = (*v)(((PyObject *)p->TILING6_1_2), a); if (e) return e;
  }
  if (p->TILING6_2) {
    e = (*v)(((PyObject *)p->TILING6_2), a); if (e) return e;
  }
  if (p->TILING7_1) {
    e = (*v)(((PyObject *)p->TILING7_1), a); if (e) return e;
  }
  if (p->TILING7_2) {
    e = (*v)(((PyObject *)p->TILING7_2), a); if (e) return e;
  }
  if (p->TILING7_3) {
    e = (*v)(((PyObject *)p->TILING7_3), a); if (e) return e;
  }
  if (p->TILING7_4_1) {
    e = (*v)(((PyObject *)p->TILING7_4_1), a); if (e) return e;
  }
  if (p->TILING7_4_2) {
    e = (*v)(((PyObject *)p->TILING7_4_2), a); if (e) return e;
  }
  if (p->TILING8) {
    e = (*v)(((PyObject *)p->TILING8), a); if (e) return e;
  }
  if (p->TILING9) {
    e = (*v)(((PyObject *)p->TILING9), a); if (e) return e;
  }
  if (p->TILING10_1_1) {
    e = (*v)(((PyObject *)p->TILING10_1_1), a); if (e) return e;
  }
  if (p->TILING10_1_1_) {
    e = (*v)(((PyObject *)p->TILING10_1_1_), a); if (e) return e;
  }
  if (p->TILING10_1_2) {
    e = (*v)(((PyObject *)p->TILING10_1_2), a); if (e) return e;
  }
  if (p->TILING10_2) {
    e = (*v)(((PyObject *)p->TILING10_2), a); if (e) return e;
  }
  if (p->TILING10_2_) {
    e = (*v)(((PyObject *)p->TILING10_2_), a); if (e) return e;
  }
  if (p->TILING11) {
    e = (*v)(((PyObject *)p->TILING11), a); if (e) return e;
  }
  if (p->TILING12_1_1) {
    e = (*v)(((PyObject *)p->TILING12_1_1), a); if (e) return e;
  }
  if (p->TILING12_1_1_) {
    e = (*v)(((PyObject *)p->TILING12_1_1_), a); if (e) return e;
  }
  if (p->TILING12_1_2) {
    e = (*v)(((PyObject *)p->TILING12_1_2), a); if (e) return e;
  }
  if (p->TILING12_2) {
    e = (*v)(((PyObject *)p->TILING12_2), a); if (e) return e;
  }
  if (p->TILING12_2_) {
    e = (*v)(((PyObject *)p->TILING12_2_), a); if (e) return e;
  }
  if (p->TILING13_1) {
    e = (*v)(((PyObject *)p->TILING13_1), a); if (e) return e;
  }
  if (p->TILING13_1_) {
    e = (*v)(((PyObject *)p->TILING13_1_), a); if (e) return e;
  }
  if (p->TILING13_2) {
    e = (*v)(((PyObject *)p->TILING13_2), a); if (e) return e;
  }
  if (p->TILING13_2_) {
    e = (*v)(((PyObject *)p->TILING13_2_), a); if (e) return e;
  }
  if (p->TILING13_3) {
    e = (*v)(((PyObject *)p->TILING13_3), a); if (e) return e;
  }
  if (p->TILING13_3_) {
    e = (*v)(((PyObject *)p->TILING13_3_), a); if (e) return e;
  }
  if (p->TILING13_4) {
    e = (*v)(((PyObject *)p->TILING13_4), a); if (e) return e;
  }
  if (p->TILING13_5_1) {
    e = (*v)(((PyObject *)p->TILING13_5_1), a); if (e) return e;
  }
  if (p->TILING13_5_2) {
    e = (*v)(((PyObject *)p->TILING13_5_2), a); if (e) return e;
  }
  if (p->TILING14) {
    e = (*v)(((PyObject *)p->TILING14), a); if (e) return e;
  }
  if (p->TEST3) {
    e = (*v)(((PyObject *)p->TEST3), a); if (e) return e;
  }
  if (p->TEST4) {
    e = (*v)(((PyObject *)p->TEST4), a); if (e) return e;
  }
  if (p->TEST6) {
    e = (*v)(((PyObject *)p->TEST6), a); if (e) return e;
  }
  if (p->TEST7) {
    e = (*v)(((PyObject *)p->TEST7), a); if (e) return e;
  }
  if (p->TEST10) {
    e = (*v)(((PyObject *)p->TEST10), a); if (e) return e;
  }
  if (p->TEST12) {
    e = (*v)(((PyObject *)p->TEST12), a); if (e) return e;
  }
  if (p->TEST13) {
    e = (*v)(((PyObject *)p->TEST13), a); if (e) return e;
  }
  if (p->SUBCONFIG13) {
    e = (*v)(((PyObject *)p->SUBCONFIG13), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_26_marching_cubes_lewiner_cy_LutProvider(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *p = (struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider *)o;
  tmp = ((PyObject*)p->EDGESRELX);
  p->EDGESRELX = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->EDGESRELY);
  p->EDGESRELY = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->EDGESRELZ);
  p->EDGESRELZ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->CASESCLASSIC);
  p->CASESCLASSIC = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->CASES);
  p->CASES = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING1);
  p->TILING1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING2);
  p->TILING2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING3_1);
  p->TILING3_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING3_2);
  p->TILING3_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING4_1);
  p->TILING4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING4_2);
  p->TILING4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING5);
  p->TILING5 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING6_1_1);
  p->TILING6_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING6_1_2);
  p->TILING6_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING6_2);
  p->TILING6_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING7_1);
  p->TILING7_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING7_2);
  p->TILING7_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING7_3);
  p->TILING7_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING7_4_1);
  p->TILING7_4_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING7_4_2);
  p->TILING7_4_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING8);
  p->TILING8 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING9);
  p->TILING9 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING10_1_1);
  p->TILING10_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING10_1_1_);
  p->TILING10_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING10_1_2);
  p->TILING10_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING10_2);
  p->TILING10_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING10_2_);
  p->TILING10_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING11);
  p->TILING11 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING12_1_1);
  p->TILING12_1_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING12_1_1_);
  p->TILING12_1_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING12_1_2);
  p->TILING12_1_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING12_2);
  p->TILING12_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING12_2_);
  p->TILING12_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_1);
  p->TILING13_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_1_);
  p->TILING13_1_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_2);
  p->TILING13_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_2_);
  p->TILING13_2_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_3);
  p->TILING13_3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_3_);
  p->TILING13_3_ = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_4);
  p->TILING13_4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_5_1);
  p->TILING13_5_1 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING13_5_2);
  p->TILING13_5_2 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TILING14);
  p->TILING14 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST3);
  p->TEST3 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST4);
  p->TEST4 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST6);
  p->TEST6 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST7);
  p->TEST7 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST10);
  p->TEST10 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST12);
  p->TEST12 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->TEST13);
  p->TEST13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->SUBCONFIG13);
  p->SUBCONFIG13 = ((struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_26_marching_cubes_lewiner_cy_LutProvider[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_26_marching_cubes_lewiner_cy_LutProvider = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.LutProvider", /*tp_name*/
  sizeof(struct __pyx_obj_26_marching_cubes_lewiner_cy_LutProvider), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_26_marching_cubes_lewiner_cy_LutProvider, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " Class that provides a common interface to the many lookup tables\n    used by the algorithm.\n    All the lists of lut names are autogenerated to prevent human error.\n    ", /*tp_doc*/
  __pyx_tp_traverse_26_marching_cubes_lewiner_cy_LutProvider, /*tp_traverse*/
  __pyx_tp_clear_26_marching_cubes_lewiner_cy_LutProvider, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_26_marching_cubes_lewiner_cy_LutProvider, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_26_marching_cubes_lewiner_cy_11LutProvider_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_26_marching_cubes_lewiner_cy_LutProvider, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "_marching_cubes_lewiner_cy._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__marching_cubes_lewiner_cy(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__marching_cubes_lewiner_cy},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_marching_cubes_lewiner_cy",
    __pyx_k_This_is_an_implementation_of_th, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_CASES, __pyx_k_CASES, sizeof(__pyx_k_CASES), 0, 0, 1, 1},
  {&__pyx_n_s_CASESCLASSIC, __pyx_k_CASESCLASSIC, sizeof(__pyx_k_CASESCLASSIC), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Cell, __pyx_k_Cell, sizeof(__pyx_k_Cell), 0, 0, 1, 1},
  {&__pyx_n_s_EDGESRELX, __pyx_k_EDGESRELX, sizeof(__pyx_k_EDGESRELX), 0, 0, 1, 1},
  {&__pyx_n_s_EDGESRELY, __pyx_k_EDGESRELY, sizeof(__pyx_k_EDGESRELY), 0, 0, 1, 1},
  {&__pyx_n_s_EDGESRELZ, __pyx_k_EDGESRELZ, sizeof(__pyx_k_EDGESRELZ), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_ambiguous_case_i, __pyx_k_Invalid_ambiguous_case_i, sizeof(__pyx_k_Invalid_ambiguous_case_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_edge_i, __pyx_k_Invalid_edge_i, sizeof(__pyx_k_Invalid_edge_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_Lut, __pyx_k_Lut, sizeof(__pyx_k_Lut), 0, 0, 1, 1},
  {&__pyx_n_s_LutProvider, __pyx_k_LutProvider, sizeof(__pyx_k_LutProvider), 0, 0, 1, 1},
  {&__pyx_kp_s_Marching_Cubes_Impossible_case_1, __pyx_k_Marching_Cubes_Impossible_case_1, sizeof(__pyx_k_Marching_Cubes_Impossible_case_1), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_Nx, __pyx_k_Nx, sizeof(__pyx_k_Nx), 0, 0, 1, 1},
  {&__pyx_n_s_Nx_bound, __pyx_k_Nx_bound, sizeof(__pyx_k_Nx_bound), 0, 0, 1, 1},
  {&__pyx_n_s_Ny, __pyx_k_Ny, sizeof(__pyx_k_Ny), 0, 0, 1, 1},
  {&__pyx_n_s_Ny_bound, __pyx_k_Ny_bound, sizeof(__pyx_k_Ny_bound), 0, 0, 1, 1},
  {&__pyx_n_s_Nz, __pyx_k_Nz, sizeof(__pyx_k_Nz), 0, 0, 1, 1},
  {&__pyx_n_s_Nz_bound, __pyx_k_Nz_bound, sizeof(__pyx_k_Nz_bound), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_SUBCONFIG13, __pyx_k_SUBCONFIG13, sizeof(__pyx_k_SUBCONFIG13), 0, 0, 1, 1},
  {&__pyx_n_s_TEST10, __pyx_k_TEST10, sizeof(__pyx_k_TEST10), 0, 0, 1, 1},
  {&__pyx_n_s_TEST12, __pyx_k_TEST12, sizeof(__pyx_k_TEST12), 0, 0, 1, 1},
  {&__pyx_n_s_TEST13, __pyx_k_TEST13, sizeof(__pyx_k_TEST13), 0, 0, 1, 1},
  {&__pyx_n_s_TEST3, __pyx_k_TEST3, sizeof(__pyx_k_TEST3), 0, 0, 1, 1},
  {&__pyx_n_s_TEST4, __pyx_k_TEST4, sizeof(__pyx_k_TEST4), 0, 0, 1, 1},
  {&__pyx_n_s_TEST6, __pyx_k_TEST6, sizeof(__pyx_k_TEST6), 0, 0, 1, 1},
  {&__pyx_n_s_TEST7, __pyx_k_TEST7, sizeof(__pyx_k_TEST7), 0, 0, 1, 1},
  {&__pyx_n_s_TILING1, __pyx_k_TILING1, sizeof(__pyx_k_TILING1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING10_1_1, __pyx_k_TILING10_1_1, sizeof(__pyx_k_TILING10_1_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING10_1_1_2, __pyx_k_TILING10_1_1_2, sizeof(__pyx_k_TILING10_1_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING10_1_2, __pyx_k_TILING10_1_2, sizeof(__pyx_k_TILING10_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING10_2, __pyx_k_TILING10_2, sizeof(__pyx_k_TILING10_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING10_2_2, __pyx_k_TILING10_2_2, sizeof(__pyx_k_TILING10_2_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING11, __pyx_k_TILING11, sizeof(__pyx_k_TILING11), 0, 0, 1, 1},
  {&__pyx_n_s_TILING12_1_1, __pyx_k_TILING12_1_1, sizeof(__pyx_k_TILING12_1_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING12_1_1_2, __pyx_k_TILING12_1_1_2, sizeof(__pyx_k_TILING12_1_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING12_1_2, __pyx_k_TILING12_1_2, sizeof(__pyx_k_TILING12_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING12_2, __pyx_k_TILING12_2, sizeof(__pyx_k_TILING12_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING12_2_2, __pyx_k_TILING12_2_2, sizeof(__pyx_k_TILING12_2_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_1, __pyx_k_TILING13_1, sizeof(__pyx_k_TILING13_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_1_2, __pyx_k_TILING13_1_2, sizeof(__pyx_k_TILING13_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_2, __pyx_k_TILING13_2, sizeof(__pyx_k_TILING13_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_2_2, __pyx_k_TILING13_2_2, sizeof(__pyx_k_TILING13_2_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_3, __pyx_k_TILING13_3, sizeof(__pyx_k_TILING13_3), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_3_2, __pyx_k_TILING13_3_2, sizeof(__pyx_k_TILING13_3_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_4, __pyx_k_TILING13_4, sizeof(__pyx_k_TILING13_4), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_5_1, __pyx_k_TILING13_5_1, sizeof(__pyx_k_TILING13_5_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING13_5_2, __pyx_k_TILING13_5_2, sizeof(__pyx_k_TILING13_5_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING14, __pyx_k_TILING14, sizeof(__pyx_k_TILING14), 0, 0, 1, 1},
  {&__pyx_n_s_TILING2, __pyx_k_TILING2, sizeof(__pyx_k_TILING2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING3_1, __pyx_k_TILING3_1, sizeof(__pyx_k_TILING3_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING3_2, __pyx_k_TILING3_2, sizeof(__pyx_k_TILING3_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING4_1, __pyx_k_TILING4_1, sizeof(__pyx_k_TILING4_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING4_2, __pyx_k_TILING4_2, sizeof(__pyx_k_TILING4_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING5, __pyx_k_TILING5, sizeof(__pyx_k_TILING5), 0, 0, 1, 1},
  {&__pyx_n_s_TILING6_1_1, __pyx_k_TILING6_1_1, sizeof(__pyx_k_TILING6_1_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING6_1_2, __pyx_k_TILING6_1_2, sizeof(__pyx_k_TILING6_1_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING6_2, __pyx_k_TILING6_2, sizeof(__pyx_k_TILING6_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING7_1, __pyx_k_TILING7_1, sizeof(__pyx_k_TILING7_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING7_2, __pyx_k_TILING7_2, sizeof(__pyx_k_TILING7_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING7_3, __pyx_k_TILING7_3, sizeof(__pyx_k_TILING7_3), 0, 0, 1, 1},
  {&__pyx_n_s_TILING7_4_1, __pyx_k_TILING7_4_1, sizeof(__pyx_k_TILING7_4_1), 0, 0, 1, 1},
  {&__pyx_n_s_TILING7_4_2, __pyx_k_TILING7_4_2, sizeof(__pyx_k_TILING7_4_2), 0, 0, 1, 1},
  {&__pyx_n_s_TILING8, __pyx_k_TILING8, sizeof(__pyx_k_TILING8), 0, 0, 1, 1},
  {&__pyx_n_s_TILING9, __pyx_k_TILING9, sizeof(__pyx_k_TILING9), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_kp_s_all_0_vec, __pyx_k_all_0_vec, sizeof(__pyx_k_all_0_vec), 0, 0, 1, 0},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_anchor_sign, __pyx_k_anchor_sign, sizeof(__pyx_k_anchor_sign), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_arrays, __pyx_k_arrays, sizeof(__pyx_k_arrays), 0, 0, 1, 1},
  {&__pyx_n_s_arrays2, __pyx_k_arrays2, sizeof(__pyx_k_arrays2), 0, 0, 1, 1},
  {&__pyx_n_s_avg_cube_val_thresh, __pyx_k_avg_cube_val_thresh, sizeof(__pyx_k_avg_cube_val_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_base_vec, __pyx_k_base_vec, sizeof(__pyx_k_base_vec), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_case, __pyx_k_case, sizeof(__pyx_k_case), 0, 0, 1, 1},
  {&__pyx_n_s_cell, __pyx_k_cell, sizeof(__pyx_k_cell), 0, 0, 1, 1},
  {&__pyx_n_s_change_cube, __pyx_k_change_cube, sizeof(__pyx_k_change_cube), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_classic, __pyx_k_classic, sizeof(__pyx_k_classic), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
  {&__pyx_n_s_connected_components, __pyx_k_connected_components, sizeof(__pyx_k_connected_components), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cube_sign, __pyx_k_cube_sign, sizeof(__pyx_k_cube_sign), 0, 0, 1, 1},
  {&__pyx_n_s_cumsum, __pyx_k_cumsum, sizeof(__pyx_k_cumsum), 0, 0, 1, 1},
  {&__pyx_n_s_cur_x_i, __pyx_k_cur_x_i, sizeof(__pyx_k_cur_x_i), 0, 0, 1, 1},
  {&__pyx_n_s_cur_y_i, __pyx_k_cur_y_i, sizeof(__pyx_k_cur_y_i), 0, 0, 1, 1},
  {&__pyx_n_s_cur_z_i, __pyx_k_cur_z_i, sizeof(__pyx_k_cur_z_i), 0, 0, 1, 1},
  {&__pyx_n_s_current_tuple, __pyx_k_current_tuple, sizeof(__pyx_k_current_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dir_index, __pyx_k_dir_index, sizeof(__pyx_k_dir_index), 0, 0, 1, 1},
  {&__pyx_n_s_dir_x, __pyx_k_dir_x, sizeof(__pyx_k_dir_x), 0, 0, 1, 1},
  {&__pyx_n_s_dir_y, __pyx_k_dir_y, sizeof(__pyx_k_dir_y), 0, 0, 1, 1},
  {&__pyx_n_s_dir_z, __pyx_k_dir_z, sizeof(__pyx_k_dir_z), 0, 0, 1, 1},
  {&__pyx_n_s_directions_x, __pyx_k_directions_x, sizeof(__pyx_k_directions_x), 0, 0, 1, 1},
  {&__pyx_n_s_directions_y, __pyx_k_directions_y, sizeof(__pyx_k_directions_y), 0, 0, 1, 1},
  {&__pyx_n_s_directions_z, __pyx_k_directions_z, sizeof(__pyx_k_directions_z), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_faces, __pyx_k_faces, sizeof(__pyx_k_faces), 0, 0, 1, 1},
  {&__pyx_n_s_faces2, __pyx_k_faces2, sizeof(__pyx_k_faces2), 0, 0, 1, 1},
  {&__pyx_n_s_faces_2, __pyx_k_faces_2, sizeof(__pyx_k_faces_2), 0, 0, 1, 1},
  {&__pyx_n_s_faces_ok, __pyx_k_faces_ok, sizeof(__pyx_k_faces_ok), 0, 0, 1, 1},
  {&__pyx_n_s_faces_ok_2, __pyx_k_faces_ok_2, sizeof(__pyx_k_faces_ok_2), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_get_faces, __pyx_k_get_faces, sizeof(__pyx_k_get_faces), 0, 0, 1, 1},
  {&__pyx_n_s_get_normals, __pyx_k_get_normals, sizeof(__pyx_k_get_normals), 0, 0, 1, 1},
  {&__pyx_n_s_get_values, __pyx_k_get_values, sizeof(__pyx_k_get_values), 0, 0, 1, 1},
  {&__pyx_n_s_get_vertices, __pyx_k_get_vertices, sizeof(__pyx_k_get_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_grads, __pyx_k_grads, sizeof(__pyx_k_grads), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_i2, __pyx_k_i2, sizeof(__pyx_k_i2), 0, 0, 1, 1},
  {&__pyx_n_s_i3, __pyx_k_i3, sizeof(__pyx_k_i3), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_im, __pyx_k_im, sizeof(__pyx_k_im), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_luts, __pyx_k_luts, sizeof(__pyx_k_luts), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_marching_cubes_lewiner_cy, __pyx_k_marching_cubes_lewiner_cy, sizeof(__pyx_k_marching_cubes_lewiner_cy), 0, 0, 1, 1},
  {&__pyx_kp_s_marching_cubes_lewiner_cy_pyx, __pyx_k_marching_cubes_lewiner_cy_pyx, sizeof(__pyx_k_marching_cubes_lewiner_cy_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_marching_cubes_udf, __pyx_k_marching_cubes_udf, sizeof(__pyx_k_marching_cubes_udf), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_n_s_max_cube_val_thresh, __pyx_k_max_cube_val_thresh, sizeof(__pyx_k_max_cube_val_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_max_distance, __pyx_k_max_distance, sizeof(__pyx_k_max_distance), 0, 0, 1, 1},
  {&__pyx_n_s_max_distance_temp, __pyx_k_max_distance_temp, sizeof(__pyx_k_max_distance_temp), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_no_mask, __pyx_k_no_mask, sizeof(__pyx_k_no_mask), 0, 0, 1, 1},
  {&__pyx_n_s_non_trivial_mc_cases_queue, __pyx_k_non_trivial_mc_cases_queue, sizeof(__pyx_k_non_trivial_mc_cases_queue), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nt, __pyx_k_nt, sizeof(__pyx_k_nt), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_nx, __pyx_k_nx, sizeof(__pyx_k_nx), 0, 0, 1, 1},
  {&__pyx_n_s_ny, __pyx_k_ny, sizeof(__pyx_k_ny), 0, 0, 1, 1},
  {&__pyx_n_s_nz, __pyx_k_nz, sizeof(__pyx_k_nz), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_LutProvider, __pyx_k_pyx_unpickle_LutProvider, sizeof(__pyx_k_pyx_unpickle_LutProvider), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_queue, __pyx_k_queue, sizeof(__pyx_k_queue), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remove_degenerate_faces, __pyx_k_remove_degenerate_faces, sizeof(__pyx_k_remove_degenerate_faces), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sign_vs, __pyx_k_sign_vs, sizeof(__pyx_k_sign_vs), 0, 0, 1, 1},
  {&__pyx_n_s_signed_im, __pyx_k_signed_im, sizeof(__pyx_k_signed_im), 0, 0, 1, 1},
  {&__pyx_n_s_signed_im_mask, __pyx_k_signed_im_mask, sizeof(__pyx_k_signed_im_mask), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_spacing, __pyx_k_spacing, sizeof(__pyx_k_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_subconfig, __pyx_k_subconfig, sizeof(__pyx_k_subconfig), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_total_cubes, __pyx_k_total_cubes, sizeof(__pyx_k_total_cubes), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_unsure_cases_queue, __pyx_k_unsure_cases_queue, sizeof(__pyx_k_unsure_cases_queue), 0, 0, 1, 1},
  {&__pyx_n_s_unsure_cases_thresh, __pyx_k_unsure_cases_thresh, sizeof(__pyx_k_unsure_cases_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_unsure_cases_visit_neighbours, __pyx_k_unsure_cases_visit_neighbours, sizeof(__pyx_k_unsure_cases_visit_neighbours), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_v0, __pyx_k_v0, sizeof(__pyx_k_v0), 0, 0, 1, 1},
  {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
  {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
  {&__pyx_n_s_v3, __pyx_k_v3, sizeof(__pyx_k_v3), 0, 0, 1, 1},
  {&__pyx_n_s_v4, __pyx_k_v4, sizeof(__pyx_k_v4), 0, 0, 1, 1},
  {&__pyx_n_s_v5, __pyx_k_v5, sizeof(__pyx_k_v5), 0, 0, 1, 1},
  {&__pyx_n_s_v6, __pyx_k_v6, sizeof(__pyx_k_v6), 0, 0, 1, 1},
  {&__pyx_n_s_v7, __pyx_k_v7, sizeof(__pyx_k_v7), 0, 0, 1, 1},
  {&__pyx_n_s_v_index, __pyx_k_v_index, sizeof(__pyx_k_v_index), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_index_array_x, __pyx_k_vertex_index_array_x, sizeof(__pyx_k_vertex_index_array_x), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_index_array_y, __pyx_k_vertex_index_array_y, sizeof(__pyx_k_vertex_index_array_y), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_index_array_z, __pyx_k_vertex_index_array_z, sizeof(__pyx_k_vertex_index_array_z), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_vertices2, __pyx_k_vertices2, sizeof(__pyx_k_vertices2), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_2, __pyx_k_vertices_2, sizeof(__pyx_k_vertices_2), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_map0, __pyx_k_vertices_map0, sizeof(__pyx_k_vertices_map0), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_map1, __pyx_k_vertices_map1, sizeof(__pyx_k_vertices_map1), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_map1_2, __pyx_k_vertices_map1_2, sizeof(__pyx_k_vertices_map1_2), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_map2, __pyx_k_vertices_map2, sizeof(__pyx_k_vertices_map2), 0, 0, 1, 1},
  {&__pyx_n_s_vertices_ok, __pyx_k_vertices_ok, sizeof(__pyx_k_vertices_ok), 0, 0, 1, 1},
  {&__pyx_n_s_visited, __pyx_k_visited, sizeof(__pyx_k_visited), 0, 0, 1, 1},
  {&__pyx_n_s_visited_vs, __pyx_k_visited_vs, sizeof(__pyx_k_visited_vs), 0, 0, 1, 1},
  {&__pyx_n_s_voxel_size, __pyx_k_voxel_size, sizeof(__pyx_k_voxel_size), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x_i, __pyx_k_x_i, sizeof(__pyx_k_x_i), 0, 0, 1, 1},
  {&__pyx_n_s_x_st, __pyx_k_x_st, sizeof(__pyx_k_x_st), 0, 0, 1, 1},
  {&__pyx_n_s_xi, __pyx_k_xi, sizeof(__pyx_k_xi), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_i, __pyx_k_y_i, sizeof(__pyx_k_y_i), 0, 0, 1, 1},
  {&__pyx_n_s_y_st, __pyx_k_y_st, sizeof(__pyx_k_y_st), 0, 0, 1, 1},
  {&__pyx_n_s_yi, __pyx_k_yi, sizeof(__pyx_k_yi), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z_i, __pyx_k_z_i, sizeof(__pyx_k_z_i), 0, 0, 1, 1},
  {&__pyx_n_s_z_st, __pyx_k_z_st, sizeof(__pyx_k_z_st), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zi, __pyx_k_zi, sizeof(__pyx_k_zi), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 884, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 134, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 152, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 406, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 615, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 834, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "_marching_cubes_lewiner_cy.pyx":1155
 *     cdef int Nx_bound, Ny_bound, Nz_bound
 *     Nx_bound, Ny_bound, Nz_bound = Nx - 2 * st, Ny - 2 * st, Nz - 2 * st  # precalculated index range
 *     cdef float[:] base_vec = np.empty((3), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *     cdef float avg_cube_val_thresh = 1.05 * voxel_size
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x3035ec8, 0x4a4e1b2, 0x53f5fc5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x3035ec8, 0x4a4e1b2, 0x53f5fc5) = (CASES, CASESCLASSIC, EDGESRELX, EDGESRELY, EDGESRELZ, SUBCONFIG13, TEST10, TEST12, TEST13, TEST3, TEST4, TEST6, TEST7, TILING1, TILING10_1_1, TILING10_1_1_, TILING10_1_2, TILING10_2, TILING10_2_, TILING11, TILING12_1_1, TILING12_1_1_, TILING12_1_2, TILING12_2, TILING12_2_, TILING13_1, TILING13_1_, TILING13_2, TILING13_2_, TILING13_3, TILING13_3_, TILING13_4, TILING13_5_1, TILING13_5_2, TILING14, TILING2, TILING3_1, TILING3_2, TILING4_1, TILING4_2, TILING5, TILING6_1_1, TILING6_1_2, TILING6_2, TILING7_1, TILING7_2, TILING7_3, TILING7_4_1, TILING7_4_2, TILING8, TILING9))" % __pyx_checksum)
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_int_50552520, __pyx_int_77914546, __pyx_int_88039365); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":884
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../../../anaconda3/envs/geotrans/lib/python3.6/site-packages/numpy/__init__.pxd":890
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__20 = PyTuple_New(1); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__20, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__23 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__23)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__23);
  __Pyx_GIVEREF(__pyx_slice__23);

  /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "_marching_cubes_lewiner_cy.pyx":35
 * 
 * # Define tiny winy number
 * cdef double FLT_EPSILON = np.spacing(1.0) #0.0000001             # <<<<<<<<<<<<<<
 * 
 * # Define abs function for doubles
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_float_1_0); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "_marching_cubes_lewiner_cy.pyx":44
 * # todo: can we disable Cython from checking for zero division? Sometimes we know that it never happens!
 * 
 * def remove_degenerate_faces(vertices, faces, *arrays):             # <<<<<<<<<<<<<<
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 */
  __pyx_tuple__29 = PyTuple_Pack(23, __pyx_n_s_vertices, __pyx_n_s_faces, __pyx_n_s_arrays, __pyx_n_s_vertices_map0, __pyx_n_s_vertices_map1, __pyx_n_s_faces_ok, __pyx_n_s_vertices_2, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_v3, __pyx_n_s_faces_2, __pyx_n_s_vertices_map1_2, __pyx_n_s_faces_ok_2, __pyx_n_s_j, __pyx_n_s_i1, __pyx_n_s_i2, __pyx_n_s_i3, __pyx_n_s_vertices_ok, __pyx_n_s_vertices_map2, __pyx_n_s_faces2, __pyx_n_s_vertices2, __pyx_n_s_arrays2, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_marching_cubes_lewiner_cy_pyx, __pyx_n_s_remove_degenerate_faces, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "_marching_cubes_lewiner_cy.pyx":1115
 * 
 * 
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,             # <<<<<<<<<<<<<<
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):
 */
  __pyx_tuple__31 = PyTuple_Pack(75, __pyx_n_s_im, __pyx_n_s_grads, __pyx_n_s_luts, __pyx_n_s_st, __pyx_n_s_classic, __pyx_n_s_mask, __pyx_n_s_Nx, __pyx_n_s_Ny, __pyx_n_s_Nz, __pyx_n_s_voxel_size, __pyx_n_s_cell, __pyx_n_s_signed_im, __pyx_n_s_signed_im_mask, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_x_st, __pyx_n_s_y_st, __pyx_n_s_z_st, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_zi, __pyx_n_s_x_i, __pyx_n_s_y_i, __pyx_n_s_z_i, __pyx_n_s_dir_x, __pyx_n_s_dir_y, __pyx_n_s_dir_z, __pyx_n_s_cur_x_i, __pyx_n_s_cur_y_i, __pyx_n_s_cur_z_i, __pyx_n_s_nt, __pyx_n_s_case, __pyx_n_s_config, __pyx_n_s_subconfig, __pyx_n_s_no_mask, __pyx_n_s_v0, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_v3, __pyx_n_s_v4, __pyx_n_s_v5, __pyx_n_s_v6, __pyx_n_s_v7, __pyx_n_s_Nx_bound, __pyx_n_s_Ny_bound, __pyx_n_s_Nz_bound, __pyx_n_s_base_vec, __pyx_n_s_avg_cube_val_thresh, __pyx_n_s_max_cube_val_thresh, __pyx_n_s_visited, __pyx_n_s_queue, __pyx_n_s_unsure_cases_queue, __pyx_n_s_non_trivial_mc_cases_queue, __pyx_n_s_current_tuple, __pyx_n_s_sign_vs, __pyx_n_s_visited_vs, __pyx_n_s_cube_sign, __pyx_n_s_total_cubes, __pyx_n_s_connected_components, __pyx_n_s_vertex_index_array_z, __pyx_n_s_vertex_index_array_y, __pyx_n_s_vertex_index_array_x, __pyx_n_s_directions_z, __pyx_n_s_directions_y, __pyx_n_s_directions_x, __pyx_n_s_max_distance, __pyx_n_s_max_distance_temp, __pyx_n_s_unsure_cases_thresh, __pyx_n_s_change_cube, __pyx_n_s_i, __pyx_n_s_v_index, __pyx_n_s_dir_index, __pyx_n_s_unsure_cases_visit_neighbours, __pyx_n_s_anchor_sign); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(6, 0, 75, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_marching_cubes_lewiner_cy_pyx, __pyx_n_s_marching_cubes_udf, 1115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 1115, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_LutProvider(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__33 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_LutProvider, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_05 = PyFloat_FromDouble(1.05); if (unlikely(!__pyx_float_1_05)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_74 = PyFloat_FromDouble(1.74); if (unlikely(!__pyx_float_1_74)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50552520 = PyInt_FromLong(50552520L); if (unlikely(!__pyx_int_50552520)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77914546 = PyInt_FromLong(77914546L); if (unlikely(!__pyx_int_77914546)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_88039365 = PyInt_FromLong(88039365L); if (unlikely(!__pyx_int_88039365)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_26_marching_cubes_lewiner_cy_Cell = &__pyx_vtable_26_marching_cubes_lewiner_cy_Cell;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell._increase_size_vertices = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *))__pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_vertices;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell._increase_size_faces = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *))__pyx_f_26_marching_cubes_lewiner_cy_4Cell__increase_size_faces;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_vertex = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, float, float, float))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_vertex;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_gradient = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, float, float, float))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_gradient_from_index = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int, int, float))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_gradient_from_index;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_face = (PyObject *(*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_face;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.set_cube = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, double, int, int, int, int, double, double, double, double, double, double, double, double))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_set_cube;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.check_triangles = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.check_triangles2 = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_check_triangles2;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_triangles = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.add_triangles2 = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_add_triangles2;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell._add_face_from_edge_index = (__pyx_ctuple_int__and_int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell__add_face_from_edge_index;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.get_index_in_facelayer = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *, int))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_get_index_in_facelayer;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.prepare_for_adding_triangles = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_prepare_for_adding_triangles;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Cell.calculate_center_vertex = (void (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Cell *))__pyx_f_26_marching_cubes_lewiner_cy_4Cell_calculate_center_vertex;
  if (PyType_Ready(&__pyx_type_26_marching_cubes_lewiner_cy_Cell) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_26_marching_cubes_lewiner_cy_Cell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_26_marching_cubes_lewiner_cy_Cell.tp_dictoffset && __pyx_type_26_marching_cubes_lewiner_cy_Cell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_26_marching_cubes_lewiner_cy_Cell.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_26_marching_cubes_lewiner_cy_Cell.tp_dict, __pyx_vtabptr_26_marching_cubes_lewiner_cy_Cell) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Cell, (PyObject *)&__pyx_type_26_marching_cubes_lewiner_cy_Cell) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_26_marching_cubes_lewiner_cy_Cell) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_ptype_26_marching_cubes_lewiner_cy_Cell = &__pyx_type_26_marching_cubes_lewiner_cy_Cell;
  __pyx_vtabptr_26_marching_cubes_lewiner_cy_Lut = &__pyx_vtable_26_marching_cubes_lewiner_cy_Lut;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Lut.get1 = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int))__pyx_f_26_marching_cubes_lewiner_cy_3Lut_get1;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Lut.get2 = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int))__pyx_f_26_marching_cubes_lewiner_cy_3Lut_get2;
  __pyx_vtable_26_marching_cubes_lewiner_cy_Lut.get3 = (int (*)(struct __pyx_obj_26_marching_cubes_lewiner_cy_Lut *, int, int, int))__pyx_f_26_marching_cubes_lewiner_cy_3Lut_get3;
  if (PyType_Ready(&__pyx_type_26_marching_cubes_lewiner_cy_Lut) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_26_marching_cubes_lewiner_cy_Lut.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_26_marching_cubes_lewiner_cy_Lut.tp_dictoffset && __pyx_type_26_marching_cubes_lewiner_cy_Lut.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_26_marching_cubes_lewiner_cy_Lut.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_26_marching_cubes_lewiner_cy_Lut.tp_dict, __pyx_vtabptr_26_marching_cubes_lewiner_cy_Lut) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Lut, (PyObject *)&__pyx_type_26_marching_cubes_lewiner_cy_Lut) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_26_marching_cubes_lewiner_cy_Lut) < 0) __PYX_ERR(0, 854, __pyx_L1_error)
  __pyx_ptype_26_marching_cubes_lewiner_cy_Lut = &__pyx_type_26_marching_cubes_lewiner_cy_Lut;
  if (PyType_Ready(&__pyx_type_26_marching_cubes_lewiner_cy_LutProvider) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_26_marching_cubes_lewiner_cy_LutProvider.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_26_marching_cubes_lewiner_cy_LutProvider.tp_dictoffset && __pyx_type_26_marching_cubes_lewiner_cy_LutProvider.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_26_marching_cubes_lewiner_cy_LutProvider.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LutProvider, (PyObject *)&__pyx_type_26_marching_cubes_lewiner_cy_LutProvider) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_26_marching_cubes_lewiner_cy_LutProvider) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  __pyx_ptype_26_marching_cubes_lewiner_cy_LutProvider = &__pyx_type_26_marching_cubes_lewiner_cy_LutProvider;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("array"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType(__pyx_t_1, "array", "array", sizeof(arrayobject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_5array_array) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_marching_cubes_lewiner_cy(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_marching_cubes_lewiner_cy(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__marching_cubes_lewiner_cy(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__marching_cubes_lewiner_cy(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__marching_cubes_lewiner_cy(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  static PyThread_type_lock __pyx_t_5[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_marching_cubes_lewiner_cy' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__marching_cubes_lewiner_cy(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_marching_cubes_lewiner_cy", __pyx_methods, __pyx_k_This_is_an_implementation_of_th, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__marching_cubes_lewiner_cy) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_marching_cubes_lewiner_cy")) {
      if (unlikely(PyDict_SetItemString(modules, "_marching_cubes_lewiner_cy", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "_marching_cubes_lewiner_cy.pyx":23
 * 
 * # Cython specific imports
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * import cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":27
 * import cython
 * from libcpp.deque cimport deque
 * np.import_array()             # <<<<<<<<<<<<<<
 * from cpython cimport array
 * import array
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 27, __pyx_L1_error)

  /* "_marching_cubes_lewiner_cy.pyx":29
 * np.import_array()
 * from cpython cimport array
 * import array             # <<<<<<<<<<<<<<
 * 
 * # Enable low level memory management
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_array, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":35
 * 
 * # Define tiny winy number
 * cdef double FLT_EPSILON = np.spacing(1.0) #0.0000001             # <<<<<<<<<<<<<<
 * 
 * # Define abs function for doubles
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_spacing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_26_marching_cubes_lewiner_cy_FLT_EPSILON = __pyx_t_4;

  /* "_marching_cubes_lewiner_cy.pyx":44
 * # todo: can we disable Cython from checking for zero division? Sometimes we know that it never happens!
 * 
 * def remove_degenerate_faces(vertices, faces, *arrays):             # <<<<<<<<<<<<<<
 * 
 *     vertices_map0 = np.arange(len(vertices), dtype=np.int32)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_26_marching_cubes_lewiner_cy_1remove_degenerate_faces, NULL, __pyx_n_s_marching_cubes_lewiner_cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_remove_degenerate_faces, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1115
 * 
 * 
 * def marching_cubes_udf(float[:, :, :] im not None, float[:, :, :, :] grads not None,             # <<<<<<<<<<<<<<
 *                    LutProvider luts, int st=1, int classic=0,
 *                    np.ndarray[np.npy_bool, ndim=3, cast=True] mask=None):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_26_marching_cubes_lewiner_cy_3marching_cubes_udf, NULL, __pyx_n_s_marching_cubes_lewiner_cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_marching_cubes_udf, __pyx_t_1) < 0) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LutProvider(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_26_marching_cubes_lewiner_cy_5__pyx_unpickle_LutProvider, NULL, __pyx_n_s_marching_cubes_lewiner_cy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_LutProvider, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_marching_cubes_lewiner_cy.pyx":1
 * #cython: cdivision=True             # <<<<<<<<<<<<<<
 * #cython: boundscheck=False
 * #cython: nonecheck=False
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":317
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":318
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_5[0] = PyThread_allocate_lock();
  __pyx_t_5[1] = PyThread_allocate_lock();
  __pyx_t_5[2] = PyThread_allocate_lock();
  __pyx_t_5[3] = PyThread_allocate_lock();
  __pyx_t_5[4] = PyThread_allocate_lock();
  __pyx_t_5[5] = PyThread_allocate_lock();
  __pyx_t_5[6] = PyThread_allocate_lock();
  __pyx_t_5[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_5, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":551
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":997
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init _marching_cubes_lewiner_cy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _marching_cubes_lewiner_cy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* SetItemInt */
  static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_abs */
  #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* decode_c_string */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* MemviewSliceIsContig */
  static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
  static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
  static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsdsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 4,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE signed char __Pyx_PyInt_As_signed__char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const signed char neg_one = (signed char) -1, const_zero = (signed char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(signed char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(signed char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (signed char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (signed char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(signed char, digit, digits[0])
                case 2:
                    if (8 * sizeof(signed char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) >= 2 * PyLong_SHIFT) {
                            return (signed char) (((((signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(signed char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) >= 3 * PyLong_SHIFT) {
                            return (signed char) (((((((signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(signed char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) >= 4 * PyLong_SHIFT) {
                            return (signed char) (((((((((signed char)digits[3]) << PyLong_SHIFT) | (signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (signed char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(signed char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(signed char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(signed char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(signed char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (signed char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(signed char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(signed char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(signed char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 2 * PyLong_SHIFT) {
                            return (signed char) (((signed char)-1)*(((((signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(signed char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 2 * PyLong_SHIFT) {
                            return (signed char) ((((((signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(signed char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 3 * PyLong_SHIFT) {
                            return (signed char) (((signed char)-1)*(((((((signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(signed char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 3 * PyLong_SHIFT) {
                            return (signed char) ((((((((signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(signed char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 4 * PyLong_SHIFT) {
                            return (signed char) (((signed char)-1)*(((((((((signed char)digits[3]) << PyLong_SHIFT) | (signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(signed char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(signed char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(signed char) - 1 > 4 * PyLong_SHIFT) {
                            return (signed char) ((((((((((signed char)digits[3]) << PyLong_SHIFT) | (signed char)digits[2]) << PyLong_SHIFT) | (signed char)digits[1]) << PyLong_SHIFT) | (signed char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(signed char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(signed char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(signed char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(signed char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            signed char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (signed char) -1;
        }
    } else {
        signed char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (signed char) -1;
        val = __Pyx_PyInt_As_signed__char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to signed char");
    return (signed char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to signed char");
    return (signed char) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_bool(npy_bool value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_bool neg_one = (npy_bool) -1, const_zero = (npy_bool) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_bool) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_bool) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_bool) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_bool) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_bool) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_bool),
                                     little, !is_unsigned);
    }
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
